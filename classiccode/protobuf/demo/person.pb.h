// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_person_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_person_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_person_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_person_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_person_2eproto;
class person;
class personDefaultTypeInternal;
extern personDefaultTypeInternal _person_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::person* Arena::CreateMaybeMessage<::person>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class person PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:person) */ {
 public:
  inline person() : person(nullptr) {};
  virtual ~person();

  person(const person& from);
  person(person&& from) noexcept
    : person() {
    *this = ::std::move(from);
  }

  inline person& operator=(const person& from) {
    CopyFrom(from);
    return *this;
  }
  inline person& operator=(person&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const person& default_instance();

  enum ContactInformationCase {
    kQq = 1,
    kWechat = 2,
    CONTACTINFORMATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const person* internal_default_instance() {
    return reinterpret_cast<const person*>(
               &_person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(person& a, person& b) {
    a.Swap(&b);
  }
  inline void Swap(person* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline person* New() const final {
    return CreateMaybeMessage<person>(nullptr);
  }

  person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<person>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const person& from);
  void MergeFrom(const person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "person";
  }
  protected:
  explicit person(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQqFieldNumber = 1,
    kWechatFieldNumber = 2,
  };
  // string qq = 1;
  private:
  bool _internal_has_qq() const;
  public:
  void clear_qq();
  const std::string& qq() const;
  void set_qq(const std::string& value);
  void set_qq(std::string&& value);
  void set_qq(const char* value);
  void set_qq(const char* value, size_t size);
  std::string* mutable_qq();
  std::string* release_qq();
  void set_allocated_qq(std::string* qq);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_qq();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_qq(
      std::string* qq);
  private:
  const std::string& _internal_qq() const;
  void _internal_set_qq(const std::string& value);
  std::string* _internal_mutable_qq();
  public:

  // string wechat = 2;
  private:
  bool _internal_has_wechat() const;
  public:
  void clear_wechat();
  const std::string& wechat() const;
  void set_wechat(const std::string& value);
  void set_wechat(std::string&& value);
  void set_wechat(const char* value);
  void set_wechat(const char* value, size_t size);
  std::string* mutable_wechat();
  std::string* release_wechat();
  void set_allocated_wechat(std::string* wechat);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_wechat();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_wechat(
      std::string* wechat);
  private:
  const std::string& _internal_wechat() const;
  void _internal_set_wechat(const std::string& value);
  std::string* _internal_mutable_wechat();
  public:

  void clear_ContactInformation();
  ContactInformationCase ContactInformation_case() const;
  // @@protoc_insertion_point(class_scope:person)
 private:
  class _Internal;
  void set_has_qq();
  void set_has_wechat();

  inline bool has_ContactInformation() const;
  inline void clear_has_ContactInformation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ContactInformationUnion {
    ContactInformationUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qq_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wechat_;
  } ContactInformation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_person_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// person

// string qq = 1;
inline bool person::_internal_has_qq() const {
  return ContactInformation_case() == kQq;
}
inline void person::set_has_qq() {
  _oneof_case_[0] = kQq;
}
inline void person::clear_qq() {
  if (_internal_has_qq()) {
    ContactInformation_.qq_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_ContactInformation();
  }
}
inline const std::string& person::qq() const {
  // @@protoc_insertion_point(field_get:person.qq)
  return _internal_qq();
}
inline void person::set_qq(const std::string& value) {
  _internal_set_qq(value);
  // @@protoc_insertion_point(field_set:person.qq)
}
inline std::string* person::mutable_qq() {
  // @@protoc_insertion_point(field_mutable:person.qq)
  return _internal_mutable_qq();
}
inline const std::string& person::_internal_qq() const {
  if (_internal_has_qq()) {
    return ContactInformation_.qq_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void person::_internal_set_qq(const std::string& value) {
  if (!_internal_has_qq()) {
    clear_ContactInformation();
    set_has_qq();
    ContactInformation_.qq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ContactInformation_.qq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void person::set_qq(std::string&& value) {
  // @@protoc_insertion_point(field_set:person.qq)
  if (!_internal_has_qq()) {
    clear_ContactInformation();
    set_has_qq();
    ContactInformation_.qq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ContactInformation_.qq_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:person.qq)
}
inline void person::set_qq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_qq()) {
    clear_ContactInformation();
    set_has_qq();
    ContactInformation_.qq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ContactInformation_.qq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:person.qq)
}
inline void person::set_qq(const char* value,
                             size_t size) {
  if (!_internal_has_qq()) {
    clear_ContactInformation();
    set_has_qq();
    ContactInformation_.qq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ContactInformation_.qq_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:person.qq)
}
inline std::string* person::_internal_mutable_qq() {
  if (!_internal_has_qq()) {
    clear_ContactInformation();
    set_has_qq();
    ContactInformation_.qq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return ContactInformation_.qq_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* person::release_qq() {
  // @@protoc_insertion_point(field_release:person.qq)
  if (_internal_has_qq()) {
    clear_has_ContactInformation();
    return ContactInformation_.qq_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void person::set_allocated_qq(std::string* qq) {
  if (has_ContactInformation()) {
    clear_ContactInformation();
  }
  if (qq != nullptr) {
    set_has_qq();
    ContactInformation_.qq_.UnsafeSetDefault(qq);
  }
  // @@protoc_insertion_point(field_set_allocated:person.qq)
}
inline std::string* person::unsafe_arena_release_qq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:person.qq)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_qq()) {
    clear_has_ContactInformation();
    return ContactInformation_.qq_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void person::unsafe_arena_set_allocated_qq(std::string* qq) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_qq()) {
    ContactInformation_.qq_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_ContactInformation();
  if (qq) {
    set_has_qq();
    ContactInformation_.qq_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qq, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:person.qq)
}

// string wechat = 2;
inline bool person::_internal_has_wechat() const {
  return ContactInformation_case() == kWechat;
}
inline void person::set_has_wechat() {
  _oneof_case_[0] = kWechat;
}
inline void person::clear_wechat() {
  if (_internal_has_wechat()) {
    ContactInformation_.wechat_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_ContactInformation();
  }
}
inline const std::string& person::wechat() const {
  // @@protoc_insertion_point(field_get:person.wechat)
  return _internal_wechat();
}
inline void person::set_wechat(const std::string& value) {
  _internal_set_wechat(value);
  // @@protoc_insertion_point(field_set:person.wechat)
}
inline std::string* person::mutable_wechat() {
  // @@protoc_insertion_point(field_mutable:person.wechat)
  return _internal_mutable_wechat();
}
inline const std::string& person::_internal_wechat() const {
  if (_internal_has_wechat()) {
    return ContactInformation_.wechat_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void person::_internal_set_wechat(const std::string& value) {
  if (!_internal_has_wechat()) {
    clear_ContactInformation();
    set_has_wechat();
    ContactInformation_.wechat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ContactInformation_.wechat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void person::set_wechat(std::string&& value) {
  // @@protoc_insertion_point(field_set:person.wechat)
  if (!_internal_has_wechat()) {
    clear_ContactInformation();
    set_has_wechat();
    ContactInformation_.wechat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ContactInformation_.wechat_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:person.wechat)
}
inline void person::set_wechat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_wechat()) {
    clear_ContactInformation();
    set_has_wechat();
    ContactInformation_.wechat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ContactInformation_.wechat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:person.wechat)
}
inline void person::set_wechat(const char* value,
                             size_t size) {
  if (!_internal_has_wechat()) {
    clear_ContactInformation();
    set_has_wechat();
    ContactInformation_.wechat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ContactInformation_.wechat_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:person.wechat)
}
inline std::string* person::_internal_mutable_wechat() {
  if (!_internal_has_wechat()) {
    clear_ContactInformation();
    set_has_wechat();
    ContactInformation_.wechat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return ContactInformation_.wechat_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* person::release_wechat() {
  // @@protoc_insertion_point(field_release:person.wechat)
  if (_internal_has_wechat()) {
    clear_has_ContactInformation();
    return ContactInformation_.wechat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void person::set_allocated_wechat(std::string* wechat) {
  if (has_ContactInformation()) {
    clear_ContactInformation();
  }
  if (wechat != nullptr) {
    set_has_wechat();
    ContactInformation_.wechat_.UnsafeSetDefault(wechat);
  }
  // @@protoc_insertion_point(field_set_allocated:person.wechat)
}
inline std::string* person::unsafe_arena_release_wechat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:person.wechat)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_wechat()) {
    clear_has_ContactInformation();
    return ContactInformation_.wechat_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void person::unsafe_arena_set_allocated_wechat(std::string* wechat) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_wechat()) {
    ContactInformation_.wechat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_ContactInformation();
  if (wechat) {
    set_has_wechat();
    ContactInformation_.wechat_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wechat, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:person.wechat)
}

inline bool person::has_ContactInformation() const {
  return ContactInformation_case() != CONTACTINFORMATION_NOT_SET;
}
inline void person::clear_has_ContactInformation() {
  _oneof_case_[0] = CONTACTINFORMATION_NOT_SET;
}
inline person::ContactInformationCase person::ContactInformation_case() const {
  return person::ContactInformationCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_person_2eproto
