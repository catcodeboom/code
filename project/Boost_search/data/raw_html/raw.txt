AcknowledgementsAcknowledgementsHomeLibrariesPeopleFAQMoreAcknowledgements      The idea of representing a type as multiple compile-time integers, and passing      these integers across function boundaries using sizeof(), was taken from Steve      Dewhurst's article "A Bitwise typeof Operator", CUJ 2002. This article      can also be viewed online, at http://www.semantics.org/localarchive.html.          Special thank you to Paul Mensonides, Vesa Karvonen, and Aleksey Gurtovoy for      the Boost Preprocessor Library and MPL. Without these two libraries, this typeof      implementation would not exist.          The following people provided support, gave valuable comments, or in any other      way contributed to the library development (in alphabetical order):              David Abrahams                  Andrey Beliakov                  Joel de Guzman                  Daniel James                  Vesa Karvonen                  Andy Little                  Paul Mensonides                  Alexander Nasonov                  Tobias Schwinger                  Martin Wille        Copyright Â© 2004, 2005 Arkadiy Vertleyb, Peder Holt        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at         http://www.boost.org/LICENSE_1_0.txt )      https://www.boost.org/doc/libs/1_81_0/doc/html/typeof/ackn.html
ReferenceReferenceHomeLibrariesPeopleFAQMoreReferenceAUTO, AUTO_TPLCOMPLIANTINCREMENT_REGISTRATION_GROUPINTEGRALLIMIT_FUNCTION_ARITYMESSAGESLIMIT_SIZEREGISTER_TYPEREGISTER_TEMPLATETEMPLATETYPEOF, TYPEOF_TPLTYPEOF_NESTED_TYPEDEF, TYPEOF_NESTED_TYPEDEF_TPLAUTO, AUTO_TPL        The BOOST_AUTO macro emulates        the proposed auto keyword in        C++.              Usage      BOOST_AUTO(var,expr)BOOST_AUTO_TPL(var,expr)Argumentsvar              a variable to be initialized with the expression            expr              a valid c++ expression                    Remarks              If you want to use auto in a        template-context, use BOOST_AUTO_TPL(expr),        which takes care of the typename        keyword inside the auto expression.              Sample Code      int main(){    length::meter a(5);    force::newton b(6);    BOOST_AUTO(c, a * b);}COMPLIANT        The BOOST_TYPEOF_COMPLIANT        macro can be used to force the emulation mode. Define it if your compiler        by default uses another mode, such as native typeof        or Microsoft-specific trick, but you want to use the emulation mode, for        example for portability reasons.      INCREMENT_REGISTRATION_GROUP        The BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP        macro ensures that type registrations in different header files receive unique        identifiers.              Usage      #include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()        Remarks              specified once in every cpp/hpp file where any registration is performed,        before any registration.              Sample Code      #include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()class X;BOOST_TYPEOF_REGISTER_TYPE(X)INTEGRAL        The BOOST_TYPEOF_INTEGRAL        macro is used when registering an integral template parameter using BOOST_TYPEOF_REGISTER_TEMPLATE.              Useful for enums and dependent        integral template parameters.              Usage      BOOST_TYPEOF_INTEGRAL(x)Argumentsx              a fully qualified integral type or enum                    Remarks              A short syntax has been implemented for the built in types (int, bool, long,        unsigned long, etc.) Other non-type template parameters (e.g. pointer to        member) are not supported.              Sample Code      #include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()namespace foo{    enum color {red, green, blue};    template&lt;color C0,typename T1&gt;    class class_with_enum {};    template&lt;typename T0,T0 I1&gt;    class class_with_dependent_non_type {};}BOOST_TYPEOF_REGISTER_TEMPLATE(foo::class_with_enum,    (BOOST_TYPEOF_INTEGRAL(foo::color))    (typename)    )BOOST_TYPEOF_REGISTER_TEMPLATE(foo::class_with_dependent_non_type,    (typename)    (BOOST_TYPEOF_INTEGRAL(P0))    )LIMIT_FUNCTION_ARITY        The BOOST_TYPEOF_LIMIT_FUNCTION_ARITY        macro defines how many parameters are supported for functios, and applies        to functions, function pointers, function references, and member function        pointers. The default value is 10. Redefine if you want the Typeof Library        to handle functions with more parameters.      MESSAGES        Define BOOST_TYPEOF_MESSAGE        before including boost/typeof/typeof.hpp to include messages "using        typeof emulation" and "using native typeof". By default, these        messages will not be displayed.      LIMIT_SIZE        The BOOST_TYPEOF_LIMIT_SIZE        macro defines the size of the compile-time sequence used to encode a type.        The default value is 50. Increase it if you want the Typeof Library to handle        very complex types, although this possibility is limited by the maximum number        of template parameters supported by your compiler. On the other hand, if        you work only with very simple types, decreasing this number may help to        boost compile-time performance.      REGISTER_TYPE        The BOOST_TYPEOF_REGISTER_TYPE        macro informs the Typeof Library about the existence of a type              Usage      BOOST_TYPEOF_REGISTER_TYPE(x)Argumentsx              a fully qualified type                    Remarks              Must be used in the global namespace              Sample Code      #include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()namespace foo{    class bar {};    enum color {red, green, blue};}BOOST_TYPEOF_REGISTER_TYPE(foo::bar)BOOST_TYPEOF_REGISTER_TYPE(foo::color)REGISTER_TEMPLATE        The BOOST_TYPEOF_REGISTER_TEMPLATE        macro informs the Typeof Library about the existence of a template and describes        its parameters              Usage      BOOST_TYPEOF_REGISTER_TEMPLATE(x, n)BOOST_TYPEOF_REGISTER_TEMPLATE(x, seq)Argumentsx              a fully qualified template            n              the number of template arguments. Only valid if all template arguments              are typenames            seq              a sequence of template arguments. Must be used when integral or template              template parameters are present                    Remarks              Must be used in the global namespace.              The library allows registration of templates with type, integral, and template        template parameters:                  A type template parameter is described by the (class)            or (typename) sequence element                      A template parameter of a well-known integral type can be described by            simply supplying its type, like (unsigned int). The following well-known integral types            are supported:                              [signed/unsigned] char                                  [unsigned] short                                  [unsigned] int                                  [unsigned] long                                  unsigned                                  bool                                  size_t                                      Enums and typedefs of integral types, need to be described explicitly            with the BOOST_TYPEOF_INTEGRAL            macro, like (BOOST_TYPEOF_INTEGRAL(MyEnum))                      Template template parameters are described with the BOOST_TYPEOF_TEMPLATE            macro, like: (BOOST_TYPEOF_TEMPLATE((class)(unsigned int))).            In case of all type parameters this can be shortened to something like            (BOOST_TYPEOF_TEMPLATE(2)).            The nested template template parameters are not supported.                  Sample Code      #include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()namespace foo{    template&lt;typename T0, typename T1&gt;    class simple_template {};    template&lt;typename T0, int I1&gt;    class class_with_integral_constant {};}BOOST_TYPEOF_REGISTER_TEMPLATE(foo::simple_template, 2)BOOST_TYPEOF_REGISTER_TEMPLATE(foo::class_with_integral_constant, (typename)(int))TEMPLATE        The BOOST_TYPEOF_TEMPLATE        macro is used when registering template template parameters using BOOST_TYPEOF_REGISTER_TEMPLATE.              Usage      BOOST_TYPEOF_TEMPLATE(n)BOOST_TYPEOF_TEMPLATE(seq)Argumentsn              the number of template arguments. Only valid if all template arguments              are typenames            seq              a sequence of template arguments. Must be used when there are integral              constants in the nested template                    Remarks              Can not be used to register nested template template parameters.              Sample Code      #include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()namespace foo{    enum color {red, green, blue};    template&lt;color C0, template&lt;typename&gt; class T1&gt;    class nested_template_class {};    template&lt;template&lt;typename, unsigned char&gt; class T1&gt;    class nested_with_integral {};}BOOST_TYPEOF_REGISTER_TEMPLATE(foo::nested_template_class,    (foo::color)    (BOOST_TYPEOF_TEMPLATE(1))    )BOOST_TYPEOF_REGISTER_TEMPLATE(foo::nested_with_integral,    (BOOST_TYPEOF_TEMPLATE((typename)(unsigned char)))    )TYPEOF, TYPEOF_TPL        The BOOST_TYPEOF macro calculates        the type of an expression, but removes the top-level qualifiers, const&amp;              Usage      BOOST_TYPEOF(expr)BOOST_TYPEOF_TPL(expr)Argumentsexpr              a valid c++ expression that can be bound to const T&amp;                    Remarks              If you want to use typeof        in a template-context, use BOOST_TYPEOF_TPL(expr),        which takes care of typename        inside the typeof expression.              Sample Code      template&lt;typename A, typename B&gt;struct result_of_conditional{    typedef BOOST_TYPEOF_TPL(true?A():B()) type;};template&lt;typename A, typename B&gt;result_of_conditional&lt;A, B&gt;::type min(const A&amp; a,const B&amp; b){    return a &lt; b ? a : b;}TYPEOF_NESTED_TYPEDEF, TYPEOF_NESTED_TYPEDEF_TPL        The TYPEOF_NESTED_TYPEDEF        macro works in much the same way as the 'TYPEOF' macro does, but workarounds        several compiler deficiencies.              Usage      BOOST_TYPEOF_NESTED_TYPEDEF(name,expr)BOOST_TYPEOF_NESTED_TYPEDEF_TPL(name,expr)Argumentsname              a valid identifier to nest the typeof operation inside                          expr                          a valid c++ expression that can be bound to const T&amp;                    Remarks              'typeof_nested_typedef' nests the 'typeof' operation inside a struct. By        doing this, the 'typeof' operation can be split into two steps, deconfusing        several compilers (notably VC7.1 and VC8.0) on the way. This also removes        the limitation imposed by BOOST_TYPEOF_LIMIT_SIZE        and allows you to use 'typeof' on much larger expressions.              If you want to use typeof_nested_typedef        in a template-context, use BOOST_TYPEOF_NESTED_TYPEDEF_TPL(name,expr),        which takes care of typename        inside the typeof expression.              'typeof_nested_typedef' can not be used at function/block scope.              Sample Code      template&lt;typename A, typename B&gt;struct result_of_conditional{    BOOST_TYPEOF_NESTED_TYPEDEF_TPL(nested,true?A():B())    typedef typename nested::type type;};template&lt;typename A, typename B&gt;result_of_conditional&lt;A, B&gt;::type min(const A&amp; a,const B&amp; b){    return a &lt; b ? a : b;}Copyright Â© 2004, 2005 Arkadiy Vertleyb, Peder Holt        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at         http://www.boost.org/LICENSE_1_0.txt )      https://www.boost.org/doc/libs/1_81_0/doc/html/typeof/refe.html
TutorialTutorialHomeLibrariesPeopleFAQMoreTutorial      To start using typeof include the typeof header:    #include &lt;boost/typeof/typeof.hpp&gt;      To deduce the type of an expression at compile time use the BOOST_TYPEOF      macro:    namespace ex1{    typedef BOOST_TYPEOF(1 + 0.5) type;    BOOST_STATIC_ASSERT((is_same&lt;type, double&gt;::value));}      In the dependent context use BOOST_TYPEOF_TPL      instead of BOOST_TYPEOF:    namespace ex2{    template&lt;class T, class U&gt;    BOOST_TYPEOF_TPL(T() + U()) add(const T&amp; t, const U&amp; u)    {        return t + u;    };    typedef BOOST_TYPEOF(add('a', 1.5)) type;    BOOST_STATIC_ASSERT((is_same&lt;type, double&gt;::value));}      The above examples are possible because the Typeof Library knows about primitive      types, such as int, double, char,      etc. The Typeof Library also knows about most types and templates defined by      the Standard C++ Library, but the appropriate headers need to be included to      take advantage of this:    #include &lt;boost/typeof/std/utility.hpp&gt;namespace ex3{    BOOST_AUTO(p, make_pair(1, 2));    BOOST_STATIC_ASSERT((is_same&lt;BOOST_TYPEOF(p), pair&lt;int, int&gt; &gt;::value));}      Here &lt;boost/typeof/std/utility.hpp&gt;      includes &lt;utility&gt; and contains knowledge about templates      defined there. This naming convention applies in general, for example to let      the Typeof Library handle std::vector,      include &lt;boost/typeof/std/vector.hpp&gt;,      etc.          To deduce the type of a variable from the expression, this variable is initialized      with, use the BOOST_AUTO macro      (or BOOST_AUTO_TPL in a dependent      context:    #include &lt;boost/typeof/std/string.hpp&gt;namespace ex4{    BOOST_AUTO(p, new int[20]);    BOOST_STATIC_ASSERT((is_same&lt;BOOST_TYPEOF(p), int*&gt;::value));}      Both BOOST_TYPEOF and BOOST_AUTO strip top-level qualifiers. Therefore,      to allocate for example a reference, it has to be specified explicitly:    namespace ex5{    string&amp; hello()    {        static string s = "hello";        return s;    }    BOOST_AUTO(&amp;s, hello());}      To better understand this syntax, note that this gets expanded into:    BOOST_TYPEOF(hello()) &amp;s = hello();      If your define your own type, the Typeof Library cannot handle it unless you      let it know about this type. You tell the Typeof Library about a type (or template)      by the means of "registering" this type/template.          Any source or header file where types/templates are registered has to contain      the following line before any registration is done:    #include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()      After this a type can be registered:    namespace ex6{    struct MyType    {};}BOOST_TYPEOF_REGISTER_TYPE(ex6::MyType)      The registration must be done from the context of global namespace; fully qualified      type name has to be used.          Any number of types can be registered in one file, each on a separate line.          Once your type is registered, the Typeof Library can handle it in any context:    namespace ex6{    typedef BOOST_TYPEOF(make_pair(1, MyType())) type;    BOOST_STATIC_ASSERT((is_same&lt;type, pair&lt;int, MyType&gt; &gt;::value));}      A template is registered by specifying its fully qualified name, and describing      its parameters. In the simplest case, when all parameters are type parameters,      only their number needs to be specified:    namespace ex7{    template&lt;class T, class U&gt;    struct MyTemplate    {};}BOOST_TYPEOF_REGISTER_TEMPLATE(ex7::MyTemplate, 2)namespace ex7{    typedef BOOST_TYPEOF(make_pair(1, MyTemplate&lt;int, ex6::MyType&gt;())) type;    BOOST_STATIC_ASSERT((is_same&lt;type,        pair&lt;int, MyTemplate&lt;int, ex6::MyType&gt; &gt;    &gt;::value));}      When a template has integral template parameters, all parameters need to be      described in the preprocessor sequence:    namespace ex8{    template&lt;class T, int n&gt;    struct MyTemplate    {};}BOOST_TYPEOF_REGISTER_TEMPLATE(ex8::MyTemplate, (class)(int))namespace ex8{    typedef BOOST_TYPEOF(make_pair(1, MyTemplate&lt;ex7::MyTemplate&lt;ex6::MyType, int&gt;, 0&gt;())) type;    BOOST_STATIC_ASSERT((is_same&lt;type,        pair&lt;int, MyTemplate&lt;ex7::MyTemplate&lt;ex6::MyType, int&gt;, 0&gt; &gt;    &gt;::value));}      Please see the reference for more details.    Copyright Â© 2004, 2005 Arkadiy Vertleyb, Peder Holt        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at         http://www.boost.org/LICENSE_1_0.txt )      https://www.boost.org/doc/libs/1_81_0/doc/html/typeof/tuto.html
Contributed By:Contributed By:HomeLibrariesPeopleFAQMoreContributed By:          Compliant compilers -- Arkadiy Vertleyb, Peder Holt                  MSVC 6.5, 7.0, 7.1 -- Igor Chesnokov, Peder Holt        Copyright Â© 2004, 2005 Arkadiy Vertleyb, Peder Holt        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at         http://www.boost.org/LICENSE_1_0.txt )      https://www.boost.org/doc/libs/1_81_0/doc/html/typeof/cont.html
Other considerations and tipsOther considerations and tipsHomeLibrariesPeopleFAQMoreOther considerations and tipsNative typeof support and emulationThe three participating partiesSupported featuresWhat needs to be registered?LimitationsNative typeof support and emulation        Many compilers support typeof already, most noticeable GCC and Metrowerks.              Igor Chesnokov discovered a method that allows to implement typeof on the VC series of compilers. It        uses a bug in the Microsoft compiler that allows a nested class of base to        be defined in a class derived from base:      template&lt;int ID&gt; struct typeof_access{    struct id2type; //not defined};template&lt;class T, int ID&gt; struct typeof_register : typeof_access{    // define base's nested class here    struct typeof_access::id2type    {        typedef T type;    };};//Type registration function typeof_register&lt;T, compile-time-constant&gt; register_type(const T&amp;);//Actually register type by instantiating typeof_register for the correct typesizeof(register_type(some-type));//Use the base class to access the type.typedef typeof_access::id2type::type type;        Peder Holt adapted this method to VC7.0, where the nested class is a template        class that is specialized in the derived class.              In VC8.0, it seemed that all the bug-featire had been fixed, but Steven Watanabe        managed to implement a more rigorous version of the VC7.0 fix that enables        'typeof' to be supported 'natively' here as well.              For many other compilers neither native typeof        support nor the trick described above is an option. For such compilers the        emulation method is the only way of implementing typeof.              According to a rough estimate, at the time of this writing the introduction        of the typeof, auto, etc., into the C++ standard may not        happen soon. Even after it's done, some time still has to pass before most        compilers implement this feature. But even after that, there always are legacy        compilers to support (for example now, in 2005, many people are still using        VC6, long after VC7.x, and even VC8.0 beta became available).              Considering extreme usefulness of the feature right now, it seems to make        sense to implement it at the library level.              The emulation mode seems to be important even if a better option is present        on some particular compiler. If a library author wants to develop portable        code using typeof, she needs        to use emulation mode and register her types and templates. Those users who        have a better option can still take advantage of it, since the registration        macros are defined as no-op on such compilers, while the users for whom emulation        is the only option will use it.              The other consideration applies to the users of VC7.1. Even though the more        convenient typeof trick is        available, the possibility of upgrade to VC8, where emulation remains the        only option, should be considered.              The emulation mode can be forced on the compilers that don't use it by default        by defining the BOOST_TYPEOF_COMPLIANT        symbol:      g++ -D BOOST_TYPEOF_COMPLIANT -I \boost\boost_1_32_0 main.cppThe three participating parties        The Lambda example from the Motivation section requires the following registration:      #include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()BOOST_TYPEOF_REGISTER_TEMPLATE(boost::tuples::tuple, 2);BOOST_TYPEOF_REGISTER_TEMPLATE(boost::lambda::lambda_functor, 1);BOOST_TYPEOF_REGISTER_TEMPLATE(boost::lambda::lambda_functor_base, 2);BOOST_TYPEOF_REGISTER_TEMPLATE(boost::lambda::relational_action, 1);BOOST_TYPEOF_REGISTER_TEMPLATE(boost::lambda::logical_action, 1);BOOST_TYPEOF_REGISTER_TEMPLATE(boost::lambda::other_action, 1);BOOST_TYPEOF_REGISTER_TYPE(boost::lambda::greater_action);BOOST_TYPEOF_REGISTER_TYPE(boost::lambda::less_action);BOOST_TYPEOF_REGISTER_TYPE(boost::lambda::and_action);BOOST_TYPEOF_REGISTER_TEMPLATE(boost::lambda::placeholder, (int));        It may seem that the price for the ability to discover the expression's type        is too high: rather large amount of registration is required. However note        that all of the above registration is done only once, and after that, any        combination of the registered types and templates would be handled. Moreover,        this registration is typically done not by the end-user, but rather by a        layer on top of some library (in this example -- Boost.Lambda).              When thinking about this, it's helpful to consider three parties: the typeof        facility, the library (probably built on expression templates principle),        and the end-user. The typeof facility is responsible for registering fundamental        types. The library can register its own types and templates.              In the best-case scenario, if the expressions always consist of only fundamental        types and library-defined types and templates, a library author can achieve        the impression that the typeof        is natively supported for her library. On the other hand, the more often        expressions contain user-defined types, the more responsibility is put on        the end-user, and therefore the less attractive this approach becomes.              Thus, the ratio of user-defined types in the expressions should be the main        factor to consider when deciding whether or not to apply the typeof facility.      Supported features        The Typeof library pre-registers fundamental types. For these types, and        for any other types/templates registered by the user library or end-user,        any combination of the following is supported:                  Pointers;                      References (except top-level);                      Consts (except top-level);                      Volatiles (except top-level);                      Arrays;                      Functions, function pointers, and references;                      Pointers to member functions;                      Pointers to data members.                  For example the following type:      int&amp; (*)(const volatile char*, double[5], void(*)(short))        is supported right away, and something like:      void (MyClass::*)(int MyClass::*, MyClass[10]) const        is supported provided MyClass        is registered.              The Typeof Library also provides registration files for most STL classes/templates.        These files are located in the std subdirectory, and named after corresponding        STL headers. These files are not included by the typeof system and have to        be explicitly included by the user, as needed:      #include &lt;boost/typeof/std/functional.hpp&gt;BOOST_AUTO(fun, std::bind2nd(std::less&lt;int&gt;(), 21)); //create named function object for future use.What needs to be registered?        It is possible to take advantage of the compiler when registering types for        the Typeof Library. Even though there is currently no direct support for        typeof in the language, the compiler is aware of what the type of an expression        is, and gives an error if it encounters an expression that has not been handled        correctly. In the typeof        context, this error message will contain clues to what types needs to be        registered with the Typeof Library in order for BOOST_TYPEOF        to work.      struct X {};template&lt;typename A,bool B&gt;struct Y {};std::pair&lt;X,Y&lt;int,true&gt; &gt; a;BOOST_AUTO(a,b);        We get the following error message from VC7.1      error C2504: 'boost::type_of::'anonymous-namespace'::encode_type_impl&lt;V,Type_Not_Registered_With_Typeof_System&gt;' : base    class undefined        with        [            V=boost::type_of::'anonymous-namespace'::encode_type_impl&lt;boost::mpl::vector0&lt;boost::mpl::na&gt;,std::pair&lt;X,Y&lt;int,true&gt;&gt;&gt;::V0,            Type_Not_Registered_With_Typeof_System=X        ]        Inspecting this error message, we see that the compiler complains about        X      BOOST_TYPEOF_REGISTER_TYPE(X); //register X with the typeof system        Recompiling, we get a new error message from VC7.1      error C2504: 'boost::type_of::'anonymous-namespace'::encode_type_impl&lt;V,Type_Not_Registered_With_Typeof_System&gt;' : base    class undefined        with        [            V=boost::type_of::'anonymous-namespace'::encode_type_impl&lt;boost::mpl::vector0&lt;boost::mpl::na&gt;,std::pair&lt;X,Y&lt;int,true&gt;&gt;&gt;::V1,            Type_Not_Registered_With_Typeof_System=Y&lt;int,true&gt;        ]        Inspecting this error message, we see that the compiler complains about        Y&lt;int,true&gt;. Since Y        is a template, and contains integral constants, we need to take more care        when registering:      BOOST_TYPEOF_REGISTER_TEMPLATE(Y,(typename)(bool)); //register template class Y        It is a good idea to look up the exact definition of Y        when it contains integral constants. For simple template classes containing        only typenames, you can rely solely on the compiler error.              The above code now compiles.              This technique can be used to get an overview of which types needs to be        registered for a given project in order to support typeof.      Limitations        Nested template template parameters are not supported, like:      template&lt;template&lt;template&lt;class&gt; class&gt; class Tpl&gt;class A; // can't register!        Classes and templates nested inside other templates also can't be registered        because of the issue of nondeduced context. This limitation is most noticeable        with regards to standard iterators in Dinkumware STL, which are implemented        as nested classes. Instead, instantiations can be registered:      BOOST_TYPEOF_REGISTER_TYPE(std::list&lt;int&gt;::const_iterator)Copyright Â© 2004, 2005 Arkadiy Vertleyb, Peder Holt        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at         http://www.boost.org/LICENSE_1_0.txt )      https://www.boost.org/doc/libs/1_81_0/doc/html/typeof/other.html
HistoryHistoryHomeLibrariesPeopleFAQMoreHistoryBoost 1.61            Functions for aligning up, down, and testing alignment of integral values.          Boost 1.59            Joel Falcou and Charly Chevalier contributed the alignment hint macro.          Boost 1.56            Glen Fernandes implemented and contributed the Align library to Boost.          Copyright Â© 2014-2017 Glen      Joseph Fernandes        Distributed under the Boost Software License, Version 1.0.      https://www.boost.org/doc/libs/1_81_0/doc/html/align/history.html
RationaleRationaleHomeLibrariesPeopleFAQMoreRationale      Dynamic      allocation          C++11 added the ability to specify increased alignment (over-alignment) for      class types. Unfortunately, ::operator new      allocation functions, new expressions      and the Default Allocator, std::allocator,      do not support dynamic memory allocation of over-aligned data. This library      provides allocation functions and allocators that respect the alignment requirements      of a type and so are suitable for allocating memory for over-aligned types.    aligned_alloc(alignment, size)            Replaces ::operator            new(size, std::nothrow)          aligned_free(pointer)            Replaces ::operator            delete(pointer,            std::nothrow)          aligned_allocator&lt;T&gt;            Replaces std::allocator&lt;T&gt;          aligned_allocator_adaptor&lt;Allocator&gt;            Replaces use of Allocator          aligned_delete            Replaces std::default_delete&lt;T&gt;                Pointer      alignment          C++11 provided std::align in the standard library to align a      pointer value. Unfortunately some C++ standard library implementations do not      support it yet (libstdc++ as far as gcc 4.8.0) and other standard library implementations      implement it incorrectly (dinkumware in msvc11.0). This library provides it      for those implementations and also for C++03 compilers where it is equally      useful.          Querying      alignment          C++11 provided the std::alignment_of trait in the standard library      to query the alignment requirement of a type. Unfortunately some C++ standard      library vendors do not implement it in an entirely standard conforming manner,      such as for array types (libc++ as far as clang 3.4). Other vendor implementations      report incorrect values for certain types, such as pointer to members (msvc      14.0). This library provides it for those implementations and also for C++03      compilers where it is equally useful.          Hinting      alignment          Allocating aligned memory is sometimes not enough to ensure that optimal code      is generated. Developers use specific compiler intrinsics to notify the compiler      of a given alignment property of a memory block. This library provides a macro,      BOOST_ALIGN_ASSUME_ALIGNED,      to abstract that functionality for compilers with the appropriate intrinsics.          Checking      alignment          This library provides a function, is_aligned      to test the alignment of a pointer value. It is generally useful in assertions      to validate that memory is correctly aligned.    Copyright Â© 2014-2017 Glen      Joseph Fernandes        Distributed under the Boost Software License, Version 1.0.      https://www.boost.org/doc/libs/1_81_0/doc/html/align/rationale.html
ExamplesExamplesHomeLibrariesPeopleFAQMoreExamples      Aligned      allocation          To dynamically allocate storage with desired alignment, you can use the aligned_alloc function:              void*          storage =          boost::alignment::aligned_alloc(alignment,          size);              To deallocate storage allocated with the aligned_alloc      function, use the aligned_free      function:              boost::alignment::aligned_free(storage);              Aligned      allocator          For C++ allocator aware code, you can use the aligned_allocator      class template for an allocator that respects over-alignment:              std::vector&lt;int128_t, boost::alignment::aligned_allocator&lt;int128_t&gt;          &gt; vector;              This template allows specifying minimum alignment for all dynamic allocations:              std::vector&lt;double, boost::alignment::aligned_allocator&lt;double, 64&gt; &gt;          vector;              Aligned      allocator adaptor          To turn an allocator into an allocator that respects over-alignment, you can      use the aligned_allocator_adaptor      class template:              boost::alignment::aligned_allocator_adaptor&lt;First&gt; second(first);              This template allows specifying minimum alignment for all dynamic allocations:              boost::alignment::aligned_allocator_adaptor&lt;First, 64&gt; second(first);              Aligned      deleter          For a deleter that can be paired with aligned_alloc,      you can use the aligned_delete      class:              std::unique_ptr&lt;double, boost::alignment::aligned_delete&gt;          pointer;              Pointer      alignment          To advance a pointer to the next address with the desired alignment:              void*          pointer =          storage;                  std::size_t space          = size;                  void*          result =          boost::alignment::align(64, sizeof(double), pointer, space);              Querying      alignment          To obtain the alignment of a given type at compie time, you can use:              boost::alignment::alignment_of&lt;int128_t&gt;::value              If your compiler supports C++14 variable templates, you can also use:              boost::alignment::alignment_of_v&lt;int128_t&gt;              Hinting      alignment          To inform the compiler about the alignment of a pointer, you can use:              BOOST_ALIGN_ASSUME_ALIGNED(pointer, 64)              Checking      alignment          To check alignment of a pointer you can use the is_aligned      function:              assert(boost::alignment::is_aligned(pointer, 64));        Copyright Â© 2014-2017 Glen      Joseph Fernandes        Distributed under the Boost Software License, Version 1.0.      https://www.boost.org/doc/libs/1_81_0/doc/html/align/examples.html
CompatibilityCompatibilityHomeLibrariesPeopleFAQMoreCompatibility      This library has been tested with the following C++ implementations:    Compilers            gcc, clang, msvc, intel          Libraries            libstdc++, libc++, dinkumware          Systems            linux, windows, osx          Platforms            x64, x86, arm          Standards            c++98, c++03, c++11, c++14, c++17          Copyright Â© 2014-2017 Glen      Joseph Fernandes        Distributed under the Boost Software License, Version 1.0.      https://www.boost.org/doc/libs/1_81_0/doc/html/align/compatibility.html
VocabularyVocabularyHomeLibrariesPeopleFAQMoreVocabulary      [basic.align]          Object types have alignment requirements which place restrictions      on the addresses at which an object of that type may be allocated. An alignment      is an implementation-defined integer value representing the number of bytes      between successive addresses at which a given object can be allocated. An object      type imposes an alignment requirement on every object of that type; stricter      alignment can be requested using the alignment specifier.          A fundamental alignment is represented by an alignment      less than or equal to the greatest alignment supported by the implementation      in all contexts, which is equal to alignof(std::max_align_t).      The alignment required for a type might be different when it is used as the      type of a complete object and when it is used as the type of a subobject. [Example:              struct B          { long          double d; };                  struct D          : virtual          B {          char c; };              When D is the type of a complete      object, it will have a subobject of type B,      so it must be aligned appropriately for a long      double. If D      appears as a subobject of another object that also has B      as a virtual base class, the B      subobject might be part of a different subobject, reducing the alignment requirements      on the D subobject. âend      example] The result of the alignof      operator reflects the alignment requirement of the type in the complete-object      case.          An extended alignment is represented by an alignment greater      than alignof(std::max_align_t). It is implementation-defined whether any      extended alignments are supported and the contexts in which they are supported.      A type having an extended alignment requirement is an over-aligned      type. [Note: Every over-aligned type is or      contains a class type to which extended alignment applies (possibly through      a non-static data member). âend note]          Alignments are represented as values of the type std::size_t.      Valid alignments include only those values returned by an alignof      expression for the fundamental types plus an additional implementation-defined      set of values, which may be empty. Every alignment value shall be a non-negative      integral power of two.          Alignments have an order from weaker to stronger      or stricter alignments. Stricter alignments have larger      alignment values. An address that satisfies an alignment requirement also satisfies      any weaker valid alignment requirement.          The alignment requirement of a complete type can be queried using an alignof expression. Furthermore, the types      char, signed      char, and unsigned      char shall have the weakest alignment      requirement. [Note: This enables the character types to      be used as the underlying type for an aligned memory area. âend      note]          Comparing alignments is meaningful and provides the obvious results:              Two alignments are equal when their numeric values are equal.                  Two alignments are different when their numeric values are not equal.                  When an alignment is larger than another it represents a stricter alignment.              [Note: The runtime pointer alignment function can be used      to obtain an aligned pointer within a buffer; the aligned-storage templates      in the library can be used to obtain aligned storage. âend      note]          If a request for a specific extended alignment in a specific context is not      supported by an implementation, the program is ill-formed. Additionally, a      request for runtime allocation of dynamic storage for which the requested alignment      cannot be honored shall be treated as an allocation failure.    Copyright Â© 2014-2017 Glen      Joseph Fernandes        Distributed under the Boost Software License, Version 1.0.      https://www.boost.org/doc/libs/1_81_0/doc/html/align/vocabulary.html
AcknowledgmentsAcknowledgmentsHomeLibrariesPeopleFAQMoreAcknowledgments      Thank you to everyone who reviewed the design, code, examples, tests, or documentation,      including:              Peter Dimov                  Andrey Semashev                  Bjorn Reese                  Steven Watanabe                  Antony Polukhin                  Lars Viklund                  Michael Spencer                  Paul A. Bristow              Thank you to Ahmed Charles for serving as the review manager for the formal      review of the library.    Copyright Â© 2014-2017 Glen      Joseph Fernandes        Distributed under the Boost Software License, Version 1.0.      https://www.boost.org/doc/libs/1_81_0/doc/html/align/acknowledgments.html
ReferenceReferenceHomeLibrariesPeopleFAQMoreReferenceFunctionsClassesTraitsMacrosFunctionsalignalign_upalign_downaligned_allocaligned_freeis_alignedalignvoid*            align(std::size_t alignment, std::size_t            size,            void*&amp;            ptr,            std::size_t&amp;            space);Header                      #include &lt;boost/align/align.hpp&gt;                    Effects                      If it is possible to fit size                      bytes of storage aligned by alignment                      into the buffer pointed to by ptr                      with length space,                      the function updates ptr                      to point to the first possible address of such storage and                      decreases space                      by the number of bytes used for alignment. Otherwise, the function                      does nothing.                    Requires                          alignment                          shall be a power of two                                                  ptr shall                          point to contiguous storage of at least space                          bytes                        Returns                      A null pointer if the requested aligned buffer would not fit                      into the available space, otherwise the adjusted value of                      ptr.                    Note                      The function updates its ptr                      and space arguments                      so that it can be called repeatedly with possibly different                      alignment and                      sizearguments                      for the same buffer.                    align_uptemplate&lt;class T&gt; constexpr            T align_up(T value, std::size_t alignment) noexcept;Header                      #include &lt;boost/align/align_up.hpp&gt;                    Constraints                      T is not a                      pointer type                    Requires                      alignment shall                      be a power of two                    Returns                      A value at or after value                      that is a multiple of alignment.                    align_downtemplate&lt;class T&gt; constexpr            T align_down(T value, std::size_t alignment) noexcept;Header                      #include &lt;boost/align/align_down.hpp&gt;                    Constraints                      T is not a                      pointer type                    Requires                      alignment shall                      be a power of two                    Returns                      A value at or before value                      that is a multiple of alignment.                    aligned_allocvoid*            aligned_alloc(std::size_t alignment, std::size_t            size);Header                      #include &lt;boost/align/aligned_alloc.hpp&gt;                    Effects                      Allocates space for an object whose alignment is specified                      by alignment,                      whose size is specified by size,                      and whose value is indeterminate.                    Requires                      alignment shall                      be a power of two.                    Returns                      A null pointer or a pointer to the allocated space.                    Note                      On certain platforms, the space allocated may be slightly larger                      than size bytes,                      to allow for alignment.                    aligned_freevoid aligned_free(void* ptr);Header                      #include &lt;boost/align/aligned_alloc.hpp&gt;                    Effects                      Causes the space pointed to by ptr                      to be deallocated, that is, made available for further allocation.                      If ptr is a                      null pointer, no action occurs. Otherwise, if the argument                      does not match a pointer earlier returned by the aligned_alloc()                      function, or if the space has been deallocated by a call to                      aligned_free(), the behavior is undefined.                    Requires                      ptr is a null                      pointer or a pointer earlier returned by the aligned_alloc()                      function that has not been deallocated by a call to aligned_free().                    Returns                      The aligned_free() function returns no value.                    is_alignedbool is_aligned(const volatile void* ptr, std::size_t            alignment)            noexcept;Header                      #include &lt;boost/align/is_aligned.hpp&gt;                    Requires                      alignment shall                      be a power of two.                    Returns                      true if ptr is aligned on the boundary                      specified by alignment,                      otherwise false.                    template&lt;class T&gt; constexpr            bool is_aligned(T value, std::size_t alignment) noexcept;Header                      #include &lt;boost/align/is_aligned.hpp&gt;                    Constraints                      T is not a                      pointer type                    Requires                      alignment shall                      be a power of two.                    Returns                      true if the value                      of value is                      aligned on the boundary specified by alignment,                      otherwise false.                    Classesaligned_allocatoraligned_allocator_adaptoraligned_deletealigned_allocatortemplate&lt;class T, std::size_t            Alignment =            1&gt;            class aligned_allocator;Header                      #include &lt;boost/align/aligned_allocator.hpp&gt;                    Note                      Using the aligned allocator with a minimum Alignment value                      is generally only useful with containers that are not node-based                      such as vector.                      With node-based containers, such as list,                      the node object would have the minimum alignment instead of                      the value type object.                              Member          types                      typedef T              value_type;                          typedef T* pointer;                          typedef const              T*              const_pointer;                          typedef void* void_pointer;                          typedef const              void*              const_void_pointer;                          typedef std::add_lvalue_reference_t&lt;T&gt; reference;                          typedef std::add_lvalue_reference_t&lt;const              T&gt;              const_reference;                          typedef std::size_t              size_type;                          typedef std::ptrdiff_t              difference_type;                          typedef std::true_type              propagate_on_container_move_assignment;                          typedef std::true_type              is_always_equal;                          template&lt;class U&gt; struct              rebind {              typedef aligned_allocator&lt;U, Alignment&gt; other; };                      Constructors        aligned_allocator() = default;Effects                      Constructs the allocator.                    template&lt;class U&gt; aligned_allocator(const aligned_allocator&lt;U, Alignment&gt;&amp;)            noexcept;Effects                      Constructs the allocator.                              Member          functions                  Except for the destructor, member functions of the aligned allocator shall          not introduce data races as a result of concurrent calls to those member          functions from different threads. Calls to these functions that allocate          or deallocate a particular unit of storage shall occur in a single total          order, and each such deallocation call shall happen before the next allocation          (if any) in this order.        pointer allocate(size_type            size,            const_void_pointer =            0);Returns                      A pointer to the initial element of an array of storage of                      size n *                      sizeof(T),                      aligned on the maximum of the minimum alignment specified and                      the alignment of objects of type T.                    Remark                      The storage is obtained by calling aligned_alloc(std::size_t, std::size_t).                    Throws                      std::bad_alloc if the storage                      cannot be obtained.                    void deallocate(pointer            ptr,            size_type);Requires                      ptr shall be                      a pointer value obtained from allocate().                    Effects                      Deallocates the storage referenced by ptr.                    Remark                      Uses aligned_free(void*).                    size_type max_size() const noexcept;Returns                      The largest value N                      for which the call allocate(N) might succeed.                    template&lt;class U, class... Args&gt; void construct(U* ptr, Args&amp;&amp;...            args);Effects                      ::new((void*)ptr) U(std::forward&lt;Args&gt;(args)...).                    template&lt;class U&gt; void destroy(U* ptr);Effects                      ptr-&gt;~U().                              Global          operators        template&lt;class T1, class T2, std::size_t Alignment&gt; bool operator==(const aligned_allocator&lt;T1, Alignment&gt;&amp;, const            aligned_allocator&lt;T2, Alignment&gt;&amp;)            noexcept;Returns                      true                    template&lt;class T1, class T2, std::size_t Alignment&gt; bool operator!=(const aligned_allocator&lt;T1, Alignment&gt;&amp;, const            aligned_allocator&lt;T2, Alignment&gt;&amp;)            noexcept;Returns                      false                    aligned_allocator_adaptortemplate&lt;class Allocator, std::size_t            Alignment =            1&gt;            class aligned_allocator_adaptor;Header                      #include &lt;boost/align/aligned_allocator_adaptor.hpp&gt;                    Note                      This adaptor can be used with a C++11 Allocator whose pointer                      type is a smart pointer but the adaptor can choose to expose                      only raw pointer types.                              Member          types                      typedef typename              Allocator::value_type value_type;                          typedef value_type* pointer;                          typedef const              value_type*              const_pointer;                          typedef void* void_pointer;                          typedef const              void*              const_void_pointer;                          typedef std::size_t              size_type;                          typedef std::ptrdiff_t              difference_type;                          template&lt;class U&gt; struct              rebind {              typedef aligned_allocator_adaptor&lt;typename              std::allocator_traits&lt;Allocator&gt;::template rebind_alloc&lt;U&gt;, Alignment&gt; other; };                      Constructors        aligned_allocator_adaptor() = default;Effects                      Value-initializes the Allocator                      base class.                    template&lt;class A&gt; aligned_allocator_adaptor(A&amp;&amp; alloc) noexcept;Requires                      Allocator shall                      be constructible from A.                    Effects                      Initializes the Allocator                      base class with std::forward&lt;A&gt;(alloc).                    template&lt;class U&gt; aligned_allocator_adaptor(const aligned_allocator_adaptor&lt;U, Alignment&gt;&amp;            other)            noexcept;Requires                      Allocator shall                      be constructible from A.                    Effects                      Initializes the Allocator                      base class with other.base().                              Member          functions        Allocator&amp;            base()            noexcept;Returns                      static_cast&lt;Allocator&amp;&gt;(*this)                    const Allocator&amp; base() const noexcept;Returns                      static_cast&lt;const Allocator&amp;&gt;(*this)                    pointer allocate(size_type            size);Returns                      A pointer to the initial element of an array of storage of                      size n *                      sizeof(value_type),                      aligned on the maximum of the minimum alignment specified and                      the alignment of objects of type value_type.                    Remark                      The storage is obtained by calling A2::allocate() on an object a2, where a2                      of type A2                      is a rebound copy of base() where its value_type                      is implementation defined.                    Throws                      Throws an exception thrown from A2::allocate() if the storage cannot be                      obtained.                    pointer allocate(size_type            size,            const_void_pointer hint);Requires                      hint is a value                      obtained by calling allocate() on any equivalent allocator                      object, or else a null pointer.                    Returns                      A pointer to the initial element of an array of storage of                      size n *                      sizeof(value_type),                      aligned on the maximum of the minimum alignment specified and                      the alignment of objects of type value_type.                    Remark                      The storage is obtained by calling A2::allocate() on an object a2, where a2                      of type A2                      is a rebound copy of base() where its value_type                      is an implementation defined.                    Throws                      Throws an exception thrown from A2::allocate() if the storage cannot be                      obtained.                    void deallocate(pointer            ptr,            size_type size);Requires                          ptr shall                          be a pointer value obtained from allocate()                                                  size shall                          equal the value passed as the first argument to the invocation                          of allocate() which returned ptr.                        Effects                      Deallocates the storage referenced by ptr.                    Note                      Uses A2::deallocate()                      on an object a2,                      where a2 of                      type A2 is                      a rebound copy of base() where its value_type                      is implementation defined.                              Global          operators        template&lt;class A1, class A2, std::size_t Alignment&gt; bool operator==(const aligned_allocator_adaptor&lt;A1, Alignment&gt;&amp; a1, const aligned_allocator_adaptor&lt;A2, Alignment&gt;&amp;            a2)            noexcept;Returns                      a1.base()                      == a2.base()                    template&lt;class A1, class A2, std::size_t Alignment&gt; bool operator!=(const aligned_allocator_adaptor&lt;A1, Alignment&gt;&amp; a1, const aligned_allocator_adaptor&lt;A2, Alignment&gt;&amp;            a2)            noexcept;Returns                      !(a1                      == a2)                    aligned_deleteclass aligned_delete;Header                      #include &lt;boost/align/aligned_delete.hpp&gt;                              Member          operators        template&lt;class T&gt; void operator()(T* ptr) noexcept(noexcept(ptr-&gt;~T()));Effects                      Calls ~T() on ptr                      to destroy the object and then calls aligned_free() on ptr                      to free the allocated memory.                    Note                      If T is an                      incomplete type, the program is ill-formed.                    Traitsalignment_ofalignment_oftemplate&lt;class T&gt; struct            alignment_of;Header                      #include &lt;boost/align/alignment_of.hpp&gt;                    Value                      The alignment requirement of the type T                      as an integral constant of type std::size_t.                      When T is a                      reference array type, the value shall be the alignment of the                      referenced type. When T                      is an array type, the value shall be the alignment of the element                      type.                    Requires                      T shall be                      a complete object type, or an array thereof, or a reference                      to one of those types.                    MacrosBOOST_ALIGN_ASSUME_ALIGNEDBOOST_ALIGN_ASSUME_ALIGNEDBOOST_ALIGN_ASSUME_ALIGNED(ptr, alignment)Header                      #include &lt;boost/align/assume_aligned.hpp&gt;                    Requires                          alignment                          shall be a power of two                                                  ptr shall                          be mutable                        Effects                      ptr may be                      modified in an implementation specific way to inform the compiler                      of its alignment.                    Copyright Â© 2014-2017 Glen      Joseph Fernandes        Distributed under the Boost Software License, Version 1.0.      https://www.boost.org/doc/libs/1_81_0/doc/html/align/reference.html
Macro BOOST_YAP_USER_CALL_OPERATORMacro BOOST_YAP_USER_CALL_OPERATORHomeLibrariesPeopleFAQMoreMacro BOOST_YAP_USER_CALL_OPERATORBOOST_YAP_USER_CALL_OPERATORSynopsis// In header: &lt;boost/yap/user_macros.hpp&gt;BOOST_YAP_USER_CALL_OPERATOR(expr_template)DescriptionDefines operator overloads for the call operator taking any number of parameters ("operator()") that each produce an expression instantiated from the expr_template expression template. One overload is defined for each of the qualifiers const &amp;, &amp;, and &amp;&amp;. For the lvalue reference overloads, *this is captured by reference into the resulting expression. For the rvalue reference overload, *this is moved into the resulting expression.The u parameters to each of the defined overloads may be any type, including an expression. Each non-expression is wrapped in a terminal expression.Example:  Parameters:expr_templateThe expression template to use to instantiate the result expression. expr_template must be an ExpressionTemplate. Copyright Â© 2018 T. Zachary Laine        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/BOOST_YAP_U_1_3_46_8_2_7_5.html
Macro BOOST_ACCUMULATORS_DEFINE_EXTRACTORMacro BOOST_ACCUMULATORS_DEFINE_EXTRACTORHomeLibrariesPeopleFAQMoreMacro BOOST_ACCUMULATORS_DEFINE_EXTRACTORBOOST_ACCUMULATORS_DEFINE_EXTRACTORSynopsis// In header: &lt;boost/accumulators/framework/extractor.hpp&gt;BOOST_ACCUMULATORS_DEFINE_EXTRACTOR(Tag, Feature, ParamSeq)Copyright Â© 2005, 2006 Eric Niebler        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/BOOST_ACCUM_1_3_2_6_2_13_2.html
Boost.Circular_buffer C++ ReferenceBoost.Circular_buffer C++ ReferenceHomeLibrariesPeopleFAQMoreBoost.Circular_buffer C++ ReferenceHeader &lt;boost/circular_buffer.hpp&gt;Header &lt;boost/circular_buffer/base.hpp&gt;Header &lt;boost/circular_buffer/space_optimized.hpp&gt;Header &lt;boost/circular_buffer.hpp&gt;Includes &lt;boost/circular_buffer/base.hpp&gt; BOOST_CB_ENABLE_DEBUGHeader &lt;boost/circular_buffer/base.hpp&gt;namespace boost {  template&lt;typename T, typename Alloc&gt; class circular_buffer;  template&lt;typename T, typename Alloc&gt;     bool operator==(const circular_buffer&lt; T, Alloc &gt; &amp;,                     const circular_buffer&lt; T, Alloc &gt; &amp;);  template&lt;typename T, typename Alloc&gt;     bool operator&lt;(const circular_buffer&lt; T, Alloc &gt; &amp;,                    const circular_buffer&lt; T, Alloc &gt; &amp;);  template&lt;typename T, typename Alloc&gt;     bool operator!=(const circular_buffer&lt; T, Alloc &gt; &amp;,                     const circular_buffer&lt; T, Alloc &gt; &amp;);  template&lt;typename T, typename Alloc&gt;     bool operator&gt;(const circular_buffer&lt; T, Alloc &gt; &amp;,                    const circular_buffer&lt; T, Alloc &gt; &amp;);  template&lt;typename T, typename Alloc&gt;     bool operator&lt;=(const circular_buffer&lt; T, Alloc &gt; &amp;,                     const circular_buffer&lt; T, Alloc &gt; &amp;);  template&lt;typename T, typename Alloc&gt;     bool operator&gt;=(const circular_buffer&lt; T, Alloc &gt; &amp;,                     const circular_buffer&lt; T, Alloc &gt; &amp;);  template&lt;typename T, typename Alloc&gt;     void swap(circular_buffer&lt; T, Alloc &gt; &amp;, circular_buffer&lt; T, Alloc &gt; &amp;);}Header &lt;boost/circular_buffer/space_optimized.hpp&gt;namespace boost {  template&lt;typename T, typename Alloc&gt; class circular_buffer_space_optimized;  // Test two space optimized circular buffers for equality.   template&lt;typename T, typename Alloc&gt;     bool operator==(const circular_buffer_space_optimized&lt; T, Alloc &gt; &amp; lhs,                     const circular_buffer_space_optimized&lt; T, Alloc &gt; &amp; rhs);  // Lexicographical comparison.   template&lt;typename T, typename Alloc&gt;     bool operator&lt;(const circular_buffer_space_optimized&lt; T, Alloc &gt; &amp; lhs,                    const circular_buffer_space_optimized&lt; T, Alloc &gt; &amp; rhs);  // Test two space optimized circular buffers for non-equality.   template&lt;typename T, typename Alloc&gt;     bool operator!=(const circular_buffer_space_optimized&lt; T, Alloc &gt; &amp; lhs,                     const circular_buffer_space_optimized&lt; T, Alloc &gt; &amp; rhs);  // Lexicographical comparison.   template&lt;typename T, typename Alloc&gt;     bool operator&gt;(const circular_buffer_space_optimized&lt; T, Alloc &gt; &amp; lhs,                    const circular_buffer_space_optimized&lt; T, Alloc &gt; &amp; rhs);  // Lexicographical comparison.   template&lt;typename T, typename Alloc&gt;     bool operator&lt;=(const circular_buffer_space_optimized&lt; T, Alloc &gt; &amp; lhs,                     const circular_buffer_space_optimized&lt; T, Alloc &gt; &amp; rhs);  // Lexicographical comparison.   template&lt;typename T, typename Alloc&gt;     bool operator&gt;=(const circular_buffer_space_optimized&lt; T, Alloc &gt; &amp; lhs,                     const circular_buffer_space_optimized&lt; T, Alloc &gt; &amp; rhs);  // Swap the contents of two space optimized circular buffers.   template&lt;typename T, typename Alloc&gt;     void swap(circular_buffer_space_optimized&lt; T, Alloc &gt; &amp; lhs,               circular_buffer_space_optimized&lt; T, Alloc &gt; &amp; rhs);}Copyright Â© 2003-2013 Jan Gaspar        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_circular_buffer_c___reference.html
Macro BOOST_YAP_USER_UDT_UDT_BINARY_OPERATORMacro BOOST_YAP_USER_UDT_UDT_BINARY_OPERATORHomeLibrariesPeopleFAQMoreMacro BOOST_YAP_USER_UDT_UDT_BINARY_OPERATORBOOST_YAP_USER_UDT_UDT_BINARY_OPERATORSynopsis// In header: &lt;boost/yap/user_macros.hpp&gt;BOOST_YAP_USER_UDT_UDT_BINARY_OPERATOR(op_name, expr_template, t_udt_trait, u_udt_trait)DescriptionDefines a free/non-member operator overload for binary operator op_name that produces an expression instantiated from the expr_template expression template.The lhs parameter to the defined operator overload may be any type that is not an expression and for whicht_udt_trait&lt;std::remove_cv_t&lt;std::remove_reference_t&lt;T&gt;&gt;&gt;::value  is true. The parameter is wrapped in a terminal expression.The rhs parameter to the defined operator overload may be any type that is not an expression and for whichu_udt_trait&lt;std::remove_cv_t&lt;std::remove_reference_t&lt;U&gt;&gt;&gt;::value  is true. The parameter is wrapped in a terminal expression.Example:  Parameters:expr_templateThe expression template to use to instantiate the result expression. expr_template must be an ExpressionTemplate.op_nameThe operator to be overloaded; this must be one of the binary enumerators in expr_kind, without the expr_kind:: qualification.t_udt_traitA trait template to use to constrain which types are accepted as T template parameters to the defined operator overload.u_udt_traitA trait template to use to constrain which types are accepted as U template parameters to the defined operator overload. Copyright Â© 2018 T. Zachary Laine        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/BOOST_YAP__1_3_46_8_2_7_10.html
ChapterÂ 32.Â Boost.RandomChapterÂ 32.Â Boost.RandomHomeLibrariesPeopleFAQMoreChapterÂ 32.Â Boost.RandomJens MaurerCopyright Â© 2000-2005 Jens MaurerCopyright Â© 2009, 2010 Steven Watanabe        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      Table of ContentsIntroductionTutorialGenerating      integers in a rangeGenerating      integers with different probabilitiesGenerating      a random passwordGenerating      quasi-random line-sphere intersectionsReferenceConceptsGeneratorsDistributionsUtilitiesHeadersPerformanceHistory and    AcknowledgementsIntroduction      Random numbers are useful in a variety of applications. The Boost Random Number      Library (Boost.Random for short) provides a variety of generators      and distributions      to produce random numbers having useful properties, such as uniform distribution.          You should read the concepts      documentation for an introduction and the definition of the basic concepts.      For a quick start, it may be sufficient to have a look at random_demo.cpp.          For a very quick start, here's an example:    boost::random::mt19937 rng;         // produces randomness out of thin air                                    // see pseudo-random number generatorsboost::random::uniform_int_distribution&lt;&gt; six(1,6);                                    // distribution that maps to 1..6                                    // see random number distributionsint x = six(rng);                   // simulate rolling a dieLast revised: December 08, 2022 at 01:12:21 GMThttps://www.boost.org/doc/libs/1_81_0/doc/html/boost_random.html
Concept TransformConcept TransformHomeLibrariesPeopleFAQMoreConcept TransformTransformDescription      A Transform is a PrimitiveTransform, a CallableTransform      or an ObjectTransform.    Associated typesresult_typeboost::result_of&lt;when&lt; _, Tn &gt;(Expr, State, Data)&gt;::type      The result of applying the Transform.    NotationTnA type playing the role of transform-type in the Transform concept.ExprA type playing the role of expression-type in the Transform concept.StateA type playing the role of state-type in the Transform concept.DataA type playing the role of data-type in the Transform concept.exprObject of type ExprstateObject of type StatedataObject of type DataValid expressionsNameExpressionTypeSemanticsApply Transformwhen&lt; _, Tn &gt;()(expr, state, data)result_typeApplies the transform.Modelsboost::proto::_child(boost::proto::_left)Copyright Â© 2008 Eric Niebler        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/Transform.html
ChapterÂ 31.Â Boost.ProtoChapterÂ 31.Â Boost.ProtoHomeLibrariesPeopleFAQMoreChapterÂ 31.Â Boost.ProtoEric NieblerCopyright Â© 2008 Eric Niebler        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      Table of ContentsPrefaceUsers' GuideGetting StartedFronts Ends: Defining      Terminals and Non-Terminals of Your EDSLIntermediate      Form: Understanding and Introspecting ExpressionsBack Ends: Making Expression      Templates Do Useful WorkExamplesBackground and ResourcesGlossaryReferenceConceptsClassesFunctionsHeader &lt;boost/proto/args.hpp&gt;Header &lt;boost/proto/core.hpp&gt;Header &lt;boost/proto/debug.hpp&gt;Header &lt;boost/proto/deep_copy.hpp&gt;Header &lt;boost/proto/domain.hpp&gt;Header &lt;boost/proto/eval.hpp&gt;Header &lt;boost/proto/expr.hpp&gt;Header &lt;boost/proto/extends.hpp&gt;Header &lt;boost/proto/functional.hpp&gt;Header &lt;boost/proto/functional/fusion.hpp&gt;Header &lt;boost/proto/functional/fusion/at.hpp&gt;Header &lt;boost/proto/functional/fusion/pop_back.hpp&gt;Header &lt;boost/proto/functional/fusion/pop_front.hpp&gt;Header &lt;boost/proto/functional/fusion/push_back.hpp&gt;Header &lt;boost/proto/functional/fusion/push_front.hpp&gt;Header &lt;boost/proto/functional/fusion/reverse.hpp&gt;Header &lt;boost/proto/functional/range/begin.hpp&gt;Header &lt;boost/proto/functional/range/empty.hpp&gt;Header &lt;boost/proto/functional/range/end.hpp&gt;Header &lt;boost/proto/functional/range/rbegin.hpp&gt;Header &lt;boost/proto/functional/range/rend.hpp&gt;Header &lt;boost/proto/functional/range/size.hpp&gt;Header &lt;boost/proto/functional/std.hpp&gt;Header &lt;boost/proto/functional/std/iterator.hpp&gt;Header &lt;boost/proto/functional/std/utility.hpp&gt;Header &lt;boost/proto/fusion.hpp&gt;Header &lt;boost/proto/generate.hpp&gt;Header &lt;boost/proto/literal.hpp&gt;Header &lt;boost/proto/make_expr.hpp&gt;Header &lt;boost/proto/matches.hpp&gt;Header &lt;boost/proto/operators.hpp&gt;Header &lt;boost/proto/proto.hpp&gt;Header &lt;boost/proto/proto_fwd.hpp&gt;Header &lt;boost/proto/proto_typeof.hpp&gt;Header &lt;boost/proto/repeat.hpp&gt;Header &lt;boost/proto/tags.hpp&gt;Header &lt;boost/proto/traits.hpp&gt;Header &lt;boost/proto/transform.hpp&gt;Header &lt;boost/proto/transform/arg.hpp&gt;Header &lt;boost/proto/transform/call.hpp&gt;Header &lt;boost/proto/transform/default.hpp&gt;Header &lt;boost/proto/transform/env.hpp&gt;Header &lt;boost/proto/transform/fold.hpp&gt;Header &lt;boost/proto/transform/fold_tree.hpp&gt;Header &lt;boost/proto/transform/impl.hpp&gt;Header &lt;boost/proto/transform/integral_c.hpp&gt;Header &lt;boost/proto/transform/lazy.hpp&gt;Header &lt;boost/proto/transform/make.hpp&gt;Header &lt;boost/proto/transform/pass_through.hpp&gt;Header &lt;boost/proto/transform/when.hpp&gt;Header &lt;boost/proto/context.hpp&gt;Header &lt;boost/proto/context/callable.hpp&gt;Header &lt;boost/proto/context/default.hpp&gt;Header &lt;boost/proto/context/null.hpp&gt;AppendicesAppendix A: Release      NotesAppendix B: HistoryAppendix C: RationaleAppendix D: Implementation      NotesAppendix E:      AcknowledgementsPreface        âThere are more things in heaven and earth, Horatio, than are dreamt        of in your philosophy.â              -- William Shakespeare            Description          Proto is a framework for building Embedded Domain-Specific Languages in C++.      It provides tools for constructing, type-checking, transforming and executing      expression templates[32]. More specifically, Proto provides:              An expression tree data structure.                  A mechanism for giving expressions additional behaviors and members.                  Operator overloads for building the tree from an expression.                  Utilities for defining the grammar to which an expression must conform.                  An extensible mechanism for immediately executing an expression template.                  An extensible set of tree transformations to apply to expression trees.              Motivation          Expression Templates are an advanced technique that C++ library developers      use to define embedded mini-languages that target specific problem domains.      The technique has been used to create efficient and easy-to-use libraries for      linear algebra as well as to define C++ parser generators with a readable syntax.      But developing such a library involves writing an inordinate amount of unreadable      and unmaintainable template mumbo-jumbo. Boost.Proto eases the development      of domain-specific embedded      languages (EDSLs). Use Proto to define the primitives of your mini-language      and let Proto handle the operator overloading and the construction of the expression      parse tree. Immediately evaluate the expression tree by passing it a function      object. Or transform the expression tree by defining the grammar of your mini-language,      decorated with an assortment of tree transforms provided by Proto or defined      by you. Then use the grammar to give your users short and readable syntax errors      for invalid expressions! No more mumbo-jumbo -- an expression template library      developed with Proto is declarative and readable.          In short, Proto is an EDSL for defining EDSLs.          How      to Use This Documentation          This documentation makes use of the following naming and formatting conventions.              Code is in fixed width          font and is syntax-highlighted.                  Replaceable text that you will need to supply is in italics.                  If a name refers to a free function, it is specified like this: free_function();          that is, it is in code font and its name is followed by ()          to indicate that it is a free function.                  If a name refers to a class template, it is specified like this: class_template&lt;&gt;;          that is, it is in code font and its name is followed by &lt;&gt;          to indicate that it is a class template.                  If a name refers to a function-like macro, it is specified like this:          MACRO();          that is, it is uppercase in code font and its name is followed by () to indicate that it is a function-like          macro. Object-like macros appear without the trailing ().                  Names that refer to concepts in the generic programming          sense are specified in CamelCase.        Note        In addition, notes such as this one specify non-essential information that        provides additional background or rationale.            Finally, you can mentally add the following to any code fragments in this document:    // Include all of Proto#include &lt;boost/proto/proto.hpp&gt;// Create some namespace aliasesnamespace mpl = boost::mpl;namespace fusion = boost::fusion;namespace proto = boost::proto;// Allow unqualified use of Proto's wildcard patternusing proto::_;[32]         See Expression        Templates      Last revised: December 08, 2022 at 01:12:21 GMThttps://www.boost.org/doc/libs/1_81_0/doc/html/proto.html
TutorialTutorialHomeLibrariesPeopleFAQMoreTutorial      Basic      Skills          The tutorial programs in this first section introduce the fundamental concepts      required to use the asio toolkit. Before plunging into the complex world of      network programming, these tutorial programs illustrate the basic skills using      simple asynchronous timers.              Timer.1 - Using a timer synchronously                  Timer.2 - Using a timer asynchronously                  Timer.3 - Binding arguments          to a completion handler                  Timer.4 - Using a member          function as a completion handler                  Timer.5 - Synchronising completion          handlers in multithreaded programs              Introduction      to Sockets          The tutorial programs in this section show how to use asio to develop simple      client and server programs. These tutorial programs are based around the daytime protocol, which supports      both TCP and UDP.          The first three tutorial programs implement the daytime protocol using TCP.              Daytime.1 - A synchronous          TCP daytime client                  Daytime.2 - A synchronous          TCP daytime server                  Daytime.3 - An asynchronous          TCP daytime server              The next three tutorial programs implement the daytime protocol using UDP.              Daytime.4 - A synchronous          UDP daytime client                  Daytime.5 - A synchronous          UDP daytime server                  Daytime.6 - An asynchronous          UDP daytime server              The last tutorial program in this section demonstrates how asio allows the      TCP and UDP servers to be easily combined into a single program.              Daytime.7 - A combined          TCP/UDP asynchronous server        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/tutorial.html
Revision HistoryRevision HistoryHomeLibrariesPeopleFAQMoreRevision History      Asio      1.26.0 / Boost 1.81              Fixed spawn and co_spawn implementations to dispatch          cancellation handlers on the correct executor. When a completion handler          uses a specified (i.e. non-default) associated executor, cancellation handlers          are dispatched to the executor that was passed to spawn() or co_spawn().                  Fixed spawn to ensure the          completion handler is dispatched through the correct executor.                  Changed to use snprintf          rather than sprintf on          latest Xcode, to address deprecation warnings.                  Fixed compatibility between co_spawn          and any_completion_handler.                  Fixed the arguments passed to select_reactor::run          when it is run on an internal thread.                  Fixed compilation errors when BOOST_ASIO_DISABLE_SMALL_BLOCK_RECYCLING          is defined.                  Updated detection of C++20 coroutine support on clang 14 and later. This          includes the ability to use coroutines with libstdc++.                  Changed standard library feature detection to always enable std::invoke_result when targeting C++17 or          later.                  Fixed detection of return type deduction with MSVC.                  Added a missing include in experimental::coro          implementation.                  Updated the asynchronous operation requirements to relax the requirements          on the associated executor.                  Added io_uring to the implementation notes.              Asio      1.25.0              Added the consign completion          token adapter, which can be used to attach additional values to a completion          handler. This is typically used to keep at least one copy of an object,          such as a smart pointer, alive until the completion handler is called.          For example:        auto timer1 = std::make_shared&lt;asio::steady_timer&gt;(my_io_context);timer1-&gt;expires_after(std::chrono::seconds(1));timer1-&gt;async_wait(    asio::consign(      [](boost::system::error_code ec)      {        // ...      },      timer1    )  );                            Added any_completion_handler&lt;&gt;, which can be used to type-erase          completion handlers. A typical use case is to enable separate compilation          of asynchronous operation implementations. For example:        // Header file:void async_sleep_impl(    asio::any_completion_handler&lt;void(boost::system::error_code)&gt; handler,    asio::any_io_executor ex, std::chrono::nanoseconds duration);template &lt;typename CompletionToken&gt;inline auto async_sleep(asio::any_io_executor ex,    std::chrono::nanoseconds duration, CompletionToken&amp;&amp; token){  return asio::async_initiate&lt;    CompletionToken, void(boost::system::error_code)&gt;(      async_sleep_impl, token, std::move(ex), duration);}// Separately compiled source file:void async_sleep_impl(    asio::any_completion_handler&lt;void(boost::system::error_code)&gt; handler,    asio::any_io_executor ex, std::chrono::nanoseconds duration){  auto timer = std::make_shared&lt;asio::steady_timer&gt;(ex, duration);  timer-&gt;async_wait(asio::consign(std::move(handler), timer));}                            Added experimental::co_composed which facilitates a lightweight          implementation of user-defined asynchronous operations using C++20 coroutines.          The following example illustrates a simple asynchronous operation that          implements an echo protocol in terms of a coroutine:        template &lt;typename CompletionToken&gt;auto async_echo(tcp::socket&amp; socket,    CompletionToken&amp;&amp; token){  return asio::async_initiate&lt;    CompletionToken, void(boost::system::error_code)&gt;(      asio::experimental::co_composed&lt;        void(boost::system::error_code)&gt;(          [](auto state, tcp::socket&amp; socket) -&gt; void          {            try            {              state.throw_if_cancelled(true);              state.reset_cancellation_state(                asio::enable_terminal_cancellation());              for (;;)              {                char data[1024];                std::size_t n = co_await socket.async_read_some(                    asio::buffer(data), asio::deferred);                co_await asio::async_write(socket,                    asio::buffer(data, n), asio::deferred);              }            }            catch (const boost::system::system_error&amp; e)            {              co_return {e.code()};            }          }, socket),      token, std::ref(socket));}                            Add range-based experimental::make_parallel_group() overloads that may          be used to launch a dynamically-sized set of asynchronous operations, where          all operations are the same type. For example:        using op_type = decltype(    socket1.async_read_some(      asio::buffer(data1),      asio::deferred    )  );std::vector&lt;op_type&gt; ops;ops.push_back(    socket1.async_read_some(      asio::buffer(data1),      asio::deferred    )  );ops.push_back(    socket2.async_read_some(      asio::buffer(data2),      asio::deferred    )  );asio::experimental::make_parallel_group(ops).async_wait(    asio::experimental::wait_for_all(),    [](        std::vector&lt;std::size_t&gt; completion_order,        std::vector&lt;boost::system::error_code&gt; e,        std::vector&lt;std::size_t&gt; n      )    {      for (std::size_t i = 0; i &lt; completion_order.size(); ++i)      {        std::size_t idx = completion_order[i];        std::cout &lt;&lt; "socket " &lt;&lt; idx &lt;&lt; " finished: ";        std::cout &lt;&lt; e[idx] &lt;&lt; ", " &lt;&lt; n[idx] &lt;&lt; "\n";      }    }  );           Thanks go to Klemens Morgenstern for supplying part of this implementation.                  Added any_completion_executor,          a type-erased wrappers for executors that are associated with completion          handlers.                  Added missing context query          to use_future's executor.                  Added nothrow constructor overloads to execution::any_executor&lt;&gt; and any_io_executor.                  Optimised representation of empty execution::any_executor          objects to improve the performance of copy and move operations.                  Added an associated_cancellation_slot          specialisation for std::reference_wrapper.                  Changed I/O objects to return their executors by const reference.                  Changed associated to use deduced return types for all two-argument get functions.                  Fixed spawn implementation          to catch unhandled exceptions and rethrow them outside of the spawned "thread".                  Fixed cleanup of of terminal-state spawn          "thread" objects.                  Changed semantics of 'dispatch' to mean the executor is used as-is. An          execution context's default executor is imbued with the possibly-blocking          property.                  Deprecated the execution::execute          customisation point. Use execute          as a member function.                  Deprecated the concepts, traits, functions and customisation points related          to senders and receivers.                  Added a C++11 parallel_group          example.                  Fixed example code to not use the deprecated conversion of a resolve result          to an endpoint.                  Fixed an ambiguity in experimental::channel_traits          specialisations.                  Added a specialised channel implementation for the for R(error_code) signature.                  Made cancelled()          public on the async_compose          'self' object.                  Added io_executor_type and get_io_executor to the async_compose          'self' object.                  Fixed implementation of release() for Windows overlapped handles.                  Enabled deferred awaiting for experimental::coro,          regularised experimental::use_coro,          and fixed allocator handling. This means that use_coro          does not return a coro object, just like use_awaitable does, i.e. it's          an overhead that buys us type erasure. Allocators can now be set for coro by including allocator_arg          in the coro signature.                  Cleaned up experimental::promise          and made it an asynchronous operation object.                  Constrained post/defer overloads on ability to require          blocking.never.                  Changed descriptor implementation to fall back to fcntl          if ioctl fails with ENOTTY when setting non-blocking mode.              Asio      1.24.0 / Boost 1.80              Added a deduced trailing return type, using decltype,          to all asynchronous operations' initiating functions when using C++11.          This change enables the new form of async_result,          where the return type can vary per operation, for C++11.                  Moved append, prepend, as_tuple,          and deferred to the boost::asio namespace, and made them compatible          with C++11. These are no longer experimental facilities, although the names          have temporarily been retained under the boost::asio::experimental          namespace for backwards compatibility.                  Added buffer()          overloads for contiguous containers, such as std::span.                  Added the ability for awaitable&lt;&gt;-based coroutines to directly co_await operations that are packaged          as function objects. For example, using deferred:        asio::awaitable&lt;void&gt; my_coro(){  asio::steady_timer timer(co_await asio::this_coro::executor);  timer.expires_after(std::chrono::seconds(5));  co_await timer.async_wait(asio::deferred);}          or with a handcrafted function object:        asio::awaitable&lt;void&gt; my_coro(){  asio::steady_timer timer(co_await asio::this_coro::executor);  timer.expires_after(std::chrono::seconds(5));  co_await [&amp;](auto&amp;&amp; token)  {    return timer.async_wait(std::forward&lt;decltype(token)&gt;(token));  };}                            Changed spawn()          to be a completion token-based asynchronous operation. This introduces          new spawn()          overloads that conform to the requirements for asynchronous operations.          For example:        std::string do_read(asio::yield_context yield){  char data[1024];  size_t n = my_socket.async_read_some(asio::buffer(data), yield);  return std::string(data, n);}asio::spawn(my_executor, do_read,    [](std::exception_ptr ex, std::string result)    {      // ...    });          These new spawn()          overloads support cancellation, and the basic_yield_context          completion token has also been enhanced to support move-only and variadic          result types. When targeting C++11 and later, these functions are implemented          in terms of Boost.Context directly. The existing overloads have been retained          but are deprecated.                  Added the is_async_operation          trait and async_operation          concept. The is_async_operation          trait may be used to determine if a function object, and optional arguments,          may be called to initiate an asynchronous operation. For example, when          using deferred:        auto d = my_timer.async_wait(asio::deferred);static_assert(asio::is_async_operation&lt;decltype(d)&gt;::value);           or with a handcrafted asynchronous operation:        struct my_async_op{  asio::ip::tcp::socket&amp; socket_ = ...;  template &lt;typename Token&gt;  auto operator()(asio::const_buffer data, Token&amp;&amp; token)  {    return asio::async_write(socket_, data,        std::forward&lt;Token&gt;(token));  }};static_assert(    asio::is_async_operation&lt;      my_async_op, asio::const_buffer&gt;::value);                            Added the completion_signature_of          trait. The completion_signature_of          trait (and corresponding type alias completion_signature_of_t)          may be used to determine the completion signature of an asynchronous operation.          For example:        auto d = my_timer.async_wait(asio::deferred);using sig = asio::completion_signature_of&lt;decltype(d)&gt;::type;// sig is void(error_code)           or with a handcrafted asynchronous operation:        struct my_async_op{  asio::ip::tcp::socket&amp; socket_ = ...;  template &lt;typename Token&gt;  auto operator()(asio::const_buffer data, Token&amp;&amp; token)  {    return asio::async_write(socket_, data,        std::forward&lt;Token&gt;(token));  }};using sig =  asio::completion_signature_of&lt;    my_async_op, asio::const_buffer&gt;::type;// sig is void(error_code, size_t)                            Added converting move construction/assignment to posix descriptors, serial          ports, pipes, Windows object_handle,          Windows stream handles, and Windows random-access handles.                  Added release()          member functions to pipes, Windows stream handles, and Windows random-access          handles.                  Enabled support for Endpoint          implementations that return void          pointers from their data() member functions, as per the documented          Endpoint type requirements.                  Removed all()          and race()          from experimental::promise, as experimental::parallel_group          covers this functionality.                  Added source locations to exceptions and error codes produced by the synchronous          and asynchronous operations.                  Fixed compatibility with OpenSSL 3.0.4 and later.                  Fixed compatibility with with -masm=intel.                  Explicitly stated that socket shutdown() calls are thread-safe with respect to          certain other synchronous operations on the same socket.                  Optimised the move construction of I/O objects where only the executor          type differs.                  Fixed the detection of std::invoke_result          for clang/libc++.                  Fixed an issue where experimental::parallel_group          initiation incorrectly moved arguments instead of forwarding them.                  Fixed a sequencing issue in the implementation of post(), dispatch(), and defer(), where the the associated allocator may          be obtained from an already moved-from completion handler.                  Fixed the awaitable&lt;&gt;          implementation to propagate exceptions from awaited initiation functions          through the current completion handler.                  Fixed detection of std::aligned_alloc          with gcc 7.                  Changed to avoid using the soon-to-be-deprecated std::aligned_storage          on newer compilers.                  Fixed detection of std::aligned_alloc          for older Apple platforms.                  Removed faulty assertions from experimental::coro          implementation.                  Added defence against Qt-defined macros when building with Intel C++.                  Changed the implementation of the select_reactor,          on Windows, to ensure that any exception resulting from failure to recreate          its interrupter's sockets will be allowed to propagate out through io_context::run().                  Fixed various compiler warnings.                  Updated all composed operations examples, and the C++11 timeouts example,          to use the new async_result          form.                  Added composed operation and coroutine examples for C++20.              Asio      1.22.2 / Boost 1.79              On Windows, changed the file support to open files using the same sharing          mode as fopen().                  On Linux, fixed the UNIX domain sockets implementation to correctly handle          EAGAIN as an indication          of an in-progress connect operation.                  Fixed experimental::basic_channel::reset()          and experimental::basic_concurrent_channel::reset()          so that they work correctly for an unclosed channel.                  Fixed potential undefined behaviour in the experimental::promise          operations race()          and all().                  Changed the co_spawn implementation          to explicitly dispatch cancellation signals through the specified executor,          if the the completion handler has an associated executor of its own.                  Added more detailed reference documentation to make_strand(), make_work_guard(), ip::address_v4,          ip::address_v6, experimental::basic_channel,          and experimental::basic_concurrent_channel.                  Re-arranged and extended the Overview documentation to cover files, pipes,          async_compose, experimental::deferred, experimental::parallel_group,          experimental::promise, channels, and completion token          adapters.                  Reverted the io_context          reference documentation to use executor_work_guard          when preventing the io_context          from running out of work.                  Removed references to deadline_timer          from the Overview documentation.                  Added reference documentation cross-references to asynchronous model elements.              Asio      1.22.1              Added bind_allocator, to          simplify associating a custom allocator with a completion token or handler.                  Added the file_base::sync_all_on_write flag, which maps to          O_SYNC on POSIX and FILE_FLAG_WRITE_THROUGH on Windows.                  Added missing implementation of basic_file::release().                  Added per-operation cancellation support to signal sets.                  Exposed recycling_allocator          as part of the public interface.                  Added the nodiscard attribute          to the following functions:                          bind_allocator()                              bind_cancellation_slot()                              bind_executor()                              buffer()                              dynamic_buffer()                              experimental::append()                              experimental::as_single()                              experimental::as_tuple()                              experimental::make_parallel_group()                              experimental::prepend()                              get_associated_allocator()                              get_associated_cancellation_slot()                              get_associated_executor()                              make_work_guard()                                Added compatibility with OpenSSL 3.0, particularly when deprecated functionality          is disabled.                  Added support for adopting an existing SSL* into an ssl::stream&lt;&gt;.                  Enabled executor_work_guard&lt;&gt; even when BOOST_ASIO_NO_TS_EXECUTORS          is defined.                  Enabled movable socket iostreams when using clang.                  Fixed bind_cancellation_slot          compatibility with legacy completion tokens.                  Fixed bind_executor compatibility          with legacy completion tokens.                  Fixed associator specialisations          for experimental::append and experimental::prepend,          to correctly propagate the associated allocator, executor, and cancellation          slot.                  Fixed 'zero as null pointer constant' warning in C++20 coroutines implementation          of awaitable.                  Ensured concurrency hint preprocessor macros are made available when asio/io_context.hpp          is included.                  Fixed issue where the primary associated_allocator          template was not correctly detecting the nested T::allocator_type.                  Fixed io_uring implementation of async_receive_from          operation for sockets.                  Fixed io_uring implementation of write_some_at          operation for files.                  Changed io_uring implementation to correctly check that          it is not the default before registering with reactor.                  Fixed a circular inclusion issue when using io_uring          in some build configurations.                  Fixed experimental::coro's per-operation cancellation to          clear the slot at completion of each operation.                  Fixed memory management in experimental::promise's          type-erased completion handlers.                  Fixed move operator=          implementation for ssl::stream.                  Fixed any_io_executor implementation          to work when both BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT          and BOOST_ASIO_SEPARATE_COMPILATION          are defined.                  Fixed implementation of basic_socket::at_mark() when using the sockatmark() system call.                  Changed the recycling allocator to use the default alignment as the minimum          alignment for allocations.                  Added additional standard header file includes, as required by newer compilers.                  Added a workaround for apparent coroutine codegen bug with Apple's clang.                  Fixed various warnings in the examples and unit tests.                  Added a C++11 example showing file descriptor passing over local sockets.          Thanks to Heiko Hund for providing this example.                  Added C++14 examples of wrapping callback-based APIs in asynchronous operations.                  Added an overview of Asio's asynchronous model to the documentation.                  Reworked reference documentation in terms of completion tokens.                  Updated documentation of asynchronous operation requirements to use new          completion token form.                  Updated documentation for dispatch(), post(), and defer() to cover both the old and new executor          forms.                  Documented per-operation cancellation for serial ports.                  Clarified the non-concurrency guarantees made for allocators.              Asio      1.22.0 / Boost 1.78              Added an io_uring backend. This backend may be used for all I/O objects,          including sockets, timers, and posix descriptors.  The backend          is disabled by default, and must be enabled by defining both BOOST_ASIO_HAS_IO_URING and BOOST_ASIO_DISABLE_EPOLL.           Simply defining BOOST_ASIO_HAS_IO_URING          alone will enable the backend without using it for the existing I/O objects.          This allows it to be used for I/O objects that require io_uring support,          such as files.  This support depends on the liburing          library at both compile and link time. Add -luring to your list of libraries for          linking.                  Added support for files. This introduces new classes for stream-oriented          and random-access files. For example, to write to a newly created stream-oriented          file:        asio::stream_file file(    my_io_context, "/path/to/file",    asio::stream_file::write_only      | asio::stream_file::create      | asio::stream_file::truncate);file.async_write_some(my_buffer,    [](error_code e, size_t n)    {      // ...    });           or to read from a random-access file:        asio::random_access_file file(    my_io_context, "/path/to/file",    asio::random_access_file::read_only);file.async_read_some_at(1234, my_buffer,    [](error_code e, size_t n)    {      // ...    });           This feature currently supports I/O completion ports on Windows,          and io_uring on Linux (define BOOST_ASIO_HAS_IO_URING          to enable).                  Added support for portable pipes. This change add supports for pipes on          POSIX and Windows (when I/O completion ports are available). For example,          to create and use a connected pair of pipe objects:        asio::readable_pipe read_end;asio::writable_pipe write_end;asio::connect_pipe(read_end, write_end);write_end.async_write_some(my_write_buffer,    [](error_code e, size_t n)    {      // ...    });read_end.async_read_some(my_read_buffer,    [](error_code e, size_t n)    {      // ...    });                            Added support for registered buffers. The mutable_registered_buffer          and const_registered_buffer          classes are buffer sequence types that represent registered buffers. These          buffers are obtained by first performing a buffer registration:        auto my_registration =  asio::register_buffers(      my_execution_context,      my_buffer_sequence);           The registration object must be maintained for as long as the buffer          registration is required. The supplied buffer sequence represents the memory          location or locations that will be registered, and the caller must ensure          they remain valid for as long as they are registered. The registration          is automatically removed when the registration object is destroyed. There          can be at most one active registration per execution context.           The registration object is a container of registered buffers. Buffers may          be obtained from it by iterating over the container, or via direct index          access:        asio::mutable_registered_buffer my_buffer  = my_registration[i];           The registered buffers may then be passed directly to operations:        asio::async_read(my_socket, my_buffer,    [](error_code ec, size_t n)    {      // ...    });           Buffer registration supports the io_uring backend when used with          read and write operations on descriptors, files, pipes, and sockets. For          portability, the facility may be used on other platforms, but the registered          buffers will behave as normal buffers.                  Added experimental support for channels. This adds templates experimental::basic_channel and experimental::basic_concurrent_channel,          with aliases experimental::channel          and experimental::concurrent_channel. Channels may be used          to send completions as messages. For example:        // Create a channel with no buffer space.channel&lt;void(error_code, size_t)&gt; ch(ctx);// The call to try_send fails as there is no buffer// space and no waiting receive operations.bool ok = ch.try_send(asio::error::eof, 123);assert(!ok);// The async_send operation is outstanding until// a receive operation consumes the message.ch.async_send(asio::error::eof, 123,    [](error_code ec)    {      // ...    });// The async_receive consumes the message. Both the// async_send and async_receive operations complete// immediately.ch.async_receive(    [](error_code ec, size_t n)    {      // ...    });                            Implemented improvements to experimental::coro.                          Added overload so member functions can provide an explicit executor.                              Added co_spawn for                coro tasks.                              Added reference and overview documentation.                              Adopted awaitable cancellation model.                              Refactored implementation.                                Disabled aligned_alloc          on clang when using an MSVC runtime.                  Changed to use a faster implementation for ip::network_v4::canonical().                  Added template specialisations for common uses to improve compile time.                  Reduced the size of io_context          executors to a single pointer.                  Increased the small object buffer size for execution::any_executor          and any_io_executor.                  Fixed multi-signature handling when variadic templates are disabled.                  Fixed compatibility with new versions of gcc and clang.                  Fixed compilation on Solaris.                  Fixed defence against Qt-defined macros when building with MSVC.                  Improved error messages emitted by ssl          facilities.                  Fixed bind_executor compatibility          with completion tokens.                  Fixed build errors when BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT          is defined.                  Added missing move assignment operator to awaitable&lt;&gt;.                  Fixed an access violation when using coroutines with MSVC, due to incorrect          alignment of allocated memory.                  Fixed a cleanup issue in experimental::parallel_group          that occured when the execution context was shut down with parallel operations          still pending.                  Added clarifications to the documentation on concurrency hints.                  Added documentation on error handling techniques for C++20 coroutines.                  Fixed various warnings.              Asio      1.20.0 / Boost 1.77              Added support for cancellation of individual asynchronous operations. Cancellation          is implemented by having each completion handler carry an associated CancellationSlot, a lightweight cancellation          channel that is specified through the new associated_cancellation_slot          associator. A concrete CancellationSlot          implementation is provided in the form of the cancellation_signal          and cancellation_slot classes.          In conjunction with the bind_cancellation_slot          helper function, these may be used to hook cancellation into asynchronous          operations. However, it should be noted that these classes are the low-level          building blocks of cancellation, and most use cases should use a higher          level abstraction for cancellation, such as experimental::parallel_group          or the new logical operators for awaitable          (see below). The ability to cancel individual operations, or composed operations,          is currently supported by:                          timers                              sockets on POSIX and Windows                              POSIX descriptors                              Windows HANDLEs                              SSL streams                              all Asio-provided composed operations such as async_read                and async_write                              compositions based on async_compose                              C++20 coroutines that use awaitable                              C++20 coroutines that use the new experimental::coro                (see below)                              the new experimental::parallel_group                operation (see below)                              the new experimental::promise                class (see below)                                Added the associator trait.          The associator trait is          used to generically forward associators, such as associated_executor          and associated_allocator,          through intermediate completion handlers. For example:        template &lt;typename Handler&gt;struct intermediate_handler{  Handler handler_;  template &lt;typename... Args&gt;  void operator()(Args&amp;... args)  {    // ...  }};namespace asio {  template &lt;      template &lt;typename, typename&gt; class Associator,      typename Handler,      typename DefaultCandidate&gt;  struct associator&lt;      Associator,      intermediate_handler&lt;Handler&gt;,      DefaultCandidate&gt;  {    using type =      typename Associator&lt;Handler, DefaultCandidate&gt;::type;    static type get(        const intermediate_handler&lt;Handler&gt;&amp; h,        const DefaultCandidate&amp; c = DefaultCandidate()) noexcept    {      return Associator&lt;Handler, DefaultCandidate&gt;::get(          h.handler_, c);    }  };} // namespace asio                            Changed all asynchronous operations implemented in Asio to invoke their          completion handlers as rvalue references. This allows an rvalue reference          qualifier to be added to the function call operator.                  Added support for asynchronous operations with multiple completion signatures.          Completion signatures may also specify that they are noexcept,          and whether they are lvalue-invocable (and thus do not "consume"          the completion handler) or rvalue-invocable (and thus do "consume"          the handler, indicating an end to the asynchronous operation). For example:        auto my_async_operation(...,    asio::completion_token_for&lt;      void(intermediate_result_type) &amp; noexcept,      void(final_result_type) &amp;&amp;    &gt; auto&amp;&amp; token){  // ...}                            Added operator&amp;&amp;          and operator||          for awaitable&lt;&gt;.          The logical operators || and          &amp;&amp; have been overloaded          for awaitable&lt;&gt;,          to allow coroutines to be trivially awaited in parallel.  When          awaited using &amp;&amp;,          the co_await expression          waits until both operations have completed successfully. As a "short-circuit"          evaluation, if one operation fails with an exception, the other is immediately          cancelled. For example:        std::tuple&lt;std::size_t, std::size_t&gt; results =  co_await (    async_read(socket, input_buffer, use_awaitable)      &amp;&amp; async_write(socket, output_buffer, use_awaitable)  );           When awaited using ||,          the co_await expression          waits until either operation succeeds. As a "short-circuit" evaluation,          if one operation succeeds without throwing an exception, the other is immediately          cancelled. For example:        std::variant&lt;std::size_t, std::monostate&gt; results =  co_await (    async_read(socket, input_buffer, use_awaitable)      || timer.async_wait(use_awaitable)  );           The operators may be enabled by adding the #include:        #include &lt;boost/asio/experimental/awaitable_operators.hpp&gt;           and then bringing the contents of the experimental::awaitable_operators          namespace into scope:        using namespace asio::experimental::awaitable_operators;                            Added the experimental::as_tuple          completion token adapter. The as_tuple          completion token adapter can be used to specify that the completion handler          arguments should be combined into a single tuple argument. The as_tuple adapter may be used in conjunction          with use_awaitable and          structured bindings as follows:        auto [e, n] = co_await socket.async_read_some(    asio::buffer(data), as_tuple(use_awaitable));           Alternatively, it may be used as a default completion token like          so:        using default_token = as_tuple_t&lt;use_awaitable_t&lt;&gt;&gt;;using tcp_socket = default_token::as_default_on_t&lt;tcp::socket&gt;;// ...awaitable&lt;void&gt; do_read(tcp_socket socket){  // ...  auto [e, n] = co_await socket.async_read_some(asio::buffer(data));  // ...}                            Added the experimental::append          completion token adapter. The append          completion token adapter can be used to pass additional completion handler          arguments at the end of the completion signature. For example:        timer.async_wait(    asio::experimental::append(      [](boost::system::error_code ec, int i)      {        // ...      },    42)  );std::future&lt;int&gt; f = timer.async_wait(    asio::experimental::append(      asio::use_future,      42    )  );                            Added the experimental::prepend          completion token adapter. The prepend          completion token adapter can be used to pass additional arguments before          the existing completion handler arguments. For example:        timer.async_wait(    asio::experimental::prepend(      [](int i, boost::system::error_code ec)      {        // ...      },    42)  );std::future&lt;std::tuple&lt;int, boost::system::error_code&gt;&gt; f = timer.async_wait(    asio::experimental::prepend(      asio::use_future,      42    )  );                            Added the experimental::deferred          completion token. The deferred          completion token takes a call to an asynchronous operation's initiating          function and turns it into a function object that accepts a completion          token. For example:        auto deferred_op =  timer.async_wait(    asio::experimental::deferred);...std::move(deferred_op)(    [](boost::system::error_code ec){ ... });           or:        auto deferred_op =  timer.async_wait(    asio::experimental::deferred);...std::future&lt;void&gt; =  std::move(deferred_op)(    asio::use_future);           The deferred token also supports chaining, to create simple compositions:        auto deferred_op =  timer.async_wait(    asio::experimental::deferred(      [&amp;](boost::system::error_code ec)      {        timer.expires_after(            std::chrono::seconds(1));        return timer.async_wait(            asio::experimental::deferred);      });...std::future&lt;void&gt; = std::move(deferred_op)(asio::use_future);                            Added the experimental::parallel_group          class and experimental::make_parallel_group          function. This utility may be used to launch work that is performed in          parallel, and wait for one or all of the operations to complete. A parallel_group implements automatic cancellation          of incomplete operations. For example:        experimental::make_parallel_group(    [&amp;](auto token)    {      return stream.async_read_some(asio::buffer(data), token);    },    [&amp;](auto token)    {      return timer.async_wait(token);    }  ).async_wait(    experimental::wait_for_one(),    [](        std::array&lt;std::size_t, 2&gt; completion_order,        boost::system::error_code ec1, std::size_t n1,        boost::system::error_code ec2    )    {      // ...    }  );           The conditions for completion of the group may be specified using          one of the four provided function objects wait_for_all,          wait_for_one, wait_for_one_success, and wait_for_one_error, or with a custom          function. The parallel_group          class can also be combined with deferred          as follows:        experimental::make_parallel_group(    stream.async_read_some(asio::buffer(data), experimental::deferred),    timer.async_wait(experimental::deferred)  ).async_wait(    // ...  );           Note: for maximum flexibility, parallel_group          does not propagate the executor automatically to the operations within          the group.                  Added experimental::promise. The promise          type allows eager execution and synchronisation of async operations. For          example:        auto promise = async_read(    stream, asio::buffer(my_buffer),    asio::experimental::use_promise);... do other stuff while the read is going on ...promise.async_wait( // completion the operation    [](error_code ec, std::size_t bytes_read)    {      ...    });           Promises can be safely disregarded if the result is no longer required.          Different operations can be combined to either wait for all to complete          or for one to complete (and cancel the rest). For example, to wait for          one to complete:        auto timeout_promise =  timer.async_wait(    asio::experimental::use_promise);auto read_promise = async_read(    stream, asio::buffer(my_buffer),    asio::experimental::use_promise);auto promise =  asio::experimental::promise&lt;&gt;::race(    timeout_promise, read_promise);promise.async_wait(    [](std::variant&lt;error_code, std::tuple&lt;error_code, std::size_t&gt;&gt; v)    {      if (v.index() == 0) {} //timed out      else if (v.index() == 1) // completed in time    });           or to wait for all to complete:        auto write_promise = async_write(    stream, asio::buffer(my_write_buffer),    asio::experimental::use_promise);auto read_promise = async_read(    stream, asio::buffer(my_buffer),    asio::experimental::use_promise);auto promise =  asio::experimental::promise&lt;&gt;::all(    write_promise, read_promise);promise.async_wait(    [](std::tuple&lt;error_code, std::size_t&gt; write_result,      std::tuple&lt;error_code, std::size_t&gt; read_result)    {    });           Thanks go to Klemens Morgenstern for contributing this feature.                  Added the experimental::coro          class template. The coro          type is a C++20 coroutine primitive for resumable functions, with the ability          to combine both asynchronous waiting (co_await)          and yielding (co_yield)          into a single, stateful control flow. For example:        #include &lt;boost/asio.hpp&gt;#include &lt;boost/asio/experimental/coro.hpp&gt;using asio::ip::tcp;asio::experimental::coro&lt;std::string&gt; reader(tcp::socket&amp; sock){  std::string buf;  while (sock.is_open())  {    std::size_t n = co_await asio::async_read_until(        sock, asio::dynamic_buffer(buf), '\n',        asio::experimental::use_coro);    co_yield buf.substr(0, n);    buf.erase(0, n);  }}asio::awaitable&lt;void&gt; consumer(tcp::socket sock){  auto r = reader(sock);  auto msg1 = co_await r.async_resume(asio::use_awaitable);  std::cout &lt;&lt; "Message 1: " &lt;&lt; msg1.value_or("\n");  auto msg2 = co_await r.async_resume(asio::use_awaitable);  std::cout &lt;&lt; "Message 2: " &lt;&lt; msg2.value_or("\n");}asio::awaitable&lt;void&gt; listen(tcp::acceptor&amp; acceptor){  for (;;)  {    co_spawn(        acceptor.get_executor(),        consumer(co_await acceptor.async_accept(asio::use_awaitable)),        asio::detached);  }}int main(){  asio::io_context ctx;  tcp::acceptor acceptor(ctx, {tcp::v4(), 54321});  co_spawn(ctx, listen(acceptor), asio::detached);  ctx.run();}           Thanks go to Klemens Morgenstern for contributing this feature.                  Added move assignment to ssl::stream&lt;&gt;.                  Changed co_spawn to dispatch the coroutine's initial step          to the executor, and to only post          the completion handler if the coroutine did not otherwise perform a context          switch (i.e. a co_await          on an asynchronous operation).                  Enabled additional optimisations for any_executor          and any_io_executor when          used with asynchronous operations.                  Added the nodiscard attribute          to awaitable&lt;&gt;.                  Increased the number of cached slots in the default recycling allocator.          This number defaults to 2, but may also be specified by defining the BOOST_ASIO_RECYCLING_ALLOCATOR_CACHE_SIZE          macro.                  Disabled the std::system_error message workaround for recent          MSVC.                  Changed the default allocator behaviour to respect alignment requirements,          to support over-aligned types. Requires C++17 or later, or Boost.                  Ensured the result strings are always initialised in reverse name resolution.                  Fixed recursive template instantiation issues in use_awaitable_t::executor_with_default.                  Fixed the any_io_executor          equality operators to correctly return a result based on the target executor.                  Fixed strand&lt;&gt;          to avoid using a potentially moved-from executor.                  Ensured gcc tests are not used for clang          when detecting compiler features.                  Disabled coroutines support for the clang shipped with          MSVC.                  Fixed compatibility with recent LibreSSL when OPENSSL_NO_SSL_INTERN          is defined.                  Fixed posix::basic_stream_descriptor move operations          to work with non-defaulted executors.              Asio      1.18.2 / Boost 1.76              Added ip::scope_id_type type alias.                  Added ip::port_type type alias.                  Added std::hash specialisations for IP addresses.                  Added std::hash specialisations for ip::basic_endpoint&lt;&gt;.                  Refactored SFINAE usage to improve compile times.                  Added friendship support to customisation points, and made most customisations          private.                  Changed any_io_executor          to a "strong typedef"-style class.                  Fixed experimental::as_single to work with handler hook deprecation.                  Ensured pthread condition variable attributes are cleaned up on all platforms.                  Clarified thread safety notes on sockets and descriptors.                  Ensured errno is not overwritten          if socket()          fails on macOS/FreeBSD.                  Fixed work tracking for io_context          and thread_pool executors          when move-assigned.                  Ensured internal call_stack          objects are accessed only from implementation files.                  Fixed I/O object move-assignment to ensure the executor is left in a valid          state.                  Fixed detection of compiler support for defaulted template argument on          functions with MSVC.                  Prevented the blocking.always          property from being used with strand&lt;&gt;, as it did not produce the correct          semantics.                  Removed deprecated file asio/impl/src.cpp.              Asio      1.18.1 / Boost 1.75              Enabled support for UNIX domain sockets on Windows. From Windows 10, UNIX          domain sockets (a.k.a "local" sockets) are supported on Windows,          with the exception of the connect_pair          function (which will fail with an operation_not_supported error).                  Added executor-converting construction and assignment to ip::basic_resolver.                  Added compatibility between polymorphic executors and the (deprecated)          handler invocation hook.                  Added the experimental::as_single          completion token adapter. The as_single          completion token adapter can be used to specify that the completion handler          arguments should be combined into a single argument. For completion signatures          with a single parameter, the argument is passed through as-is. For signatures          with two or more parameters, the arguments are combined into a tuple. The          as_single adapter may be          used in conjunction with use_awaitable          and structured bindings as follows:        auto [e, n] = co_await socket.async_read_some(    boost::asio::buffer(data), as_single(use_awaitable));           Alternatively, it may be used as a default completion token like          so:        using default_token = as_single_t&lt;use_awaitable_t&lt;&gt;&gt;;using tcp_socket = default_token::as_default_on_t&lt;tcp::socket&gt;;// ...awaitable&lt;void&gt; do_read(tcp_socket socket){  // ...  auto [e, n] = co_await socket.async_read_some(boost::asio::buffer(data));  // ...}                            Added support for MSG_NOSIGNAL          on more platforms by using _POSIX_VERSION          to detect whether it is supported.                  Added the ability to compile using libpthread on Windows.                  Added workarounds for the Intel C++ compiler.                  Added more support for detecting and optimising for handlers that have          no custom executor.                  Reduced lock contention for timer cancellation on Windows.                  Reinstated a previously removed null-pointer check, as it had a measurable          impact on performance.                  Fixed the executor concept          to test for a const-qualified execute().                  Fixed any_executor support          for builds without RTTI support.                  Fixed the thread_pool unit          test to work without RTTI support.                  Fixed C++20 coroutines compatibility with clang on Windows.                  Fixed some compatibility issues with Windows Runtime.                  Fixed shadow name warnings caused by addition of asio::query.                  Fixed a "logical âorâ of equal expressions" warning on linux.                  Fixed a benign switch fallthrough warning.                  Added missing push/pop_options.hpp includes.                  Suppressed zero-as-null-pointer-constant warnings.                  Fixed a comma-operator warning.                  Updated the documentation to clarify when the select          reactor is used on Windows.                  Fixed potential ambiguity caused by any_executor          comparisons and conversion.                  Added detection of non-experimental C++20 coroutines on MSVC 19.8.                  Fixed compatibility with uClibc.                  Fixed strand&lt;&gt;          adaptation of Networking TS executors when targeting older C++ versions          or less conformant compilers.              Asio      1.18.0 / Boost 1.74              Added an implementation of the proposed standard executors (P0443r13,          P1348r0, and P1393r0).                  Added support for the proposed standard executors to Asio's I/O facilities:                          The io_context::executor_type, thread_pool::executor_type,                system_executor,                and strand executors                now meet the requirements for the proposed standard executors. These                classes also continue to meet the existing requirements for the Networking                TS model of executors.                              All I/O objects, asynchronous operations, and utilities including                dispatch, post, defer,                get_associated_executor,                bind_executor, make_work_guard, spawn, co_spawn,                async_compose, use_future, etc., can interoperate                with both new proposed standard executors, and with existing Networking                TS executors. The implementation determines at compile time which                model a particular executor meets; the proposed standard executor                model is used in preference if both are detected.                              The any_io_executor                type alias has been introduced as the new default runtime-polymorphic                executor for all I/O objects. This type alias points to the execution::any_executor&lt;&gt;                template with a set of supportable properties specified for use with                I/O. This change may break existing code that directly uses the old                polymorphic wrapper, executor.                If required for backward compatibility, BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT                can be defined, which changes the any_io_executor                type alias to instead point to the executor                polymorphic wrapper.                              Support for the existing Networking TS model of executors can be                disabled by defining BOOST_ASIO_NO_TS_EXECUTORS.                                Added converting move construction and assignment to basic_waitable_timer.          This enables move construction and assignment between different timer types,          provided the executor types are convertible. For example:        basic_waitable_timer&lt;    clock_type,    traits_type,    io_context::executor_type  &gt; timer1(my_io_context);basic_waitable_timer&lt;    clock_type,    traits_type,    any_io_executor // polymorphic wrapper  &gt; timer2(std::move(timer1));                            Enabled C++20 coroutine support when using gcc 10.                  Added overloads of co_spawn          that launch an awaitable. This change allows us to write:        co_spawn(executor,    echo(std::move(socket)),    detached);           instead of:        co_spawn(executor,    [socket = std::move(socket)]() mutable    {      return echo(std::move(socket));    },    detached);                            Added a new constructor overload to use_awaitable_t's          default executor adapter, to enable conversion between executor types.                  Added support for using detached_t          as a default completion token, by adding members as_default_on() and as_default_on_t&lt;&gt;.                  Added a move constructor to ssl::stream&lt;&gt;.                  Changed ssl::stream&lt;&gt;          write operations to linearise gather-write buffer sequences.                  Added compile-time detection of the deprecated asio_handler_invoke          hook. This hook was deprecated with the introduction of the Networking          TS trait associated_executor          and function get_associated_executor(). Compiling an application with BOOST_ASIO_NO_DEPRECATED will now trigger          a compile error if any handler implements the asio_handler_invoke          hook.                  Added compile-time detection of the deprecated asio_handler_allocate          and asio_handle_deallocate          hooks. These hooks were deprecated with the introduction of the Networking          TS trait associated_allocator          and function get_associated_allocator(). Compiling an application with BOOST_ASIO_NO_DEPRECATED will now trigger          a compile error if any handler implements the asio_handler_allocate          or asio_handler_deallocate          hooks.                  Implemented a number of performance optimisations, including:                          Specialising single-buffer operations to use recv                rather than recvmsg,                send rather than                sendmsg, read rather than readv, and write                rather than writev.                              Lightening the reference counting overhead of the polymorphic wrapper                executor.                              Returning from system call operation wrappers as early as possible,                and only accessing errno                and error codes when on an error path.                              Applying additional optimisations if a "native" I/O executor                (such as io_context::exeutor_type)                is detected.                                Added source location support to handler tracking. The new BOOST_ASIO_HANDLER_LOCATION((file_name,          line,          function_name))          macro may be used to inform the handler tracking mechanism of a source          location. This macro declares an object that is placed on the stack. Then,          when an asynchronous operation is launched with location information, it          outputs lines using the &lt;action&gt;          n^m, prior to the n*m line that signifies          the beginning of the asynchronous operation. For example:          @asio|1589423304.861944|&gt;7|ec=system:0,bytes_transferred=5  @asio|1589423304.861952|7^8|in 'async_write' (...../../include/asio/impl/write.hpp:330)  @asio|1589423304.861952|7^8|called from 'do_write' (handler_tracking/async_tcp_echo_server.cpp:62)  @asio|1589423304.861952|7^8|called from 'operator()' (handler_tracking/async_tcp_echo_server.cpp:51)  @asio|1589423304.861952|7*8|socket@0x7ff61c008230.async_send  @asio|1589423304.861975|.8|non_blocking_send,ec=system:0,bytes_transferred=5  @asio|1589423304.861980|&lt;7|           If std::source_location or std::experimental::source_location          are available, the use_awaitable_t          token (when default-constructed or used as a default completion token)          will also cause handler tracking to output a source location for each newly          created asynchronous operation. A use_awaitable_t          object may also be explicitly constructed with location information.                  Implemented various improvements to the handlerviz.pl          tool.                          Add nodes for pending handlers at bottom of graph, outlined in red.                              Display source location in a tooltip on the edge label (for SVG).                              Use invisible nodes to enforce order to keep related control flow                vertical.                                Added the handlerlive.pl tool, which processes handler          tracking output to produce a list of "live" handlers. Live handlers          are those that are associated with pending asynchronous operations, as          well as handlers that are currently executing. For example:        cat output.txt | perl handlerlive.pl          or:        perl handerlive.pl &lt; output.txt          or:        perl handlerlive.pl output.txt                            Added the handlertree.pl tool, which filters handler          tracking output to include only those events in the tree that produced          the nominated handlers. For example, to filter the output to include only          the events associated with handlers 123,          456, and their predecessors:          cat output.txt | perl handlertree.pl 123 456          or:          perl handlertree.pl 123 456 &lt; output.txt           This script may be combined with handerlive.pl and handlerviz.pl          to produce a graph of the "live" asynchronous operation chains.          For example:          cat output.txt | \    perl handlertree.pl perl handlerlive.pl output.txt | \    perl handlerviz.pl | \    dot -Tsvg &gt; output.svg                            Added changes for clang-based Embarcadero C++ compilers.                  Fixed a deadlock that can occur when multiple threads concurrently initialise          the Windows I/O completion port backend.                  Fixed async_compose to          work with copyable handlers when passed by lvalue.                  Fixed completion signature deduction in co_spawn.                  Removed a spurious Executor          base class from the executor_binder          implementation.                  Various fixes and improvements in the documentation and examples.              Asio      1.16.1 / Boost 1.73              Fixed compatibility with C++20 concept syntax.                  Marked the POSIX descriptor classes' move constructors as noexcept.                  Added the ssl::host_name_verification class, which is          a drop-in replacement for ssl::rfc2818_verification.          The ssl::rfc2818_verification class has been marked          as deprecated. As a consequence of this change, SSL support now depends          on functions that were introduced in OpenSSL 1.0.2.                  Added an ssl::context constructor to take ownership          of a native handle.                  Changed C++ language version detection with gcc to use          __cplusplus macro.                  Fixed a work counting issue in the asynchronous resolve operation for endpoints.                  Fixed the strand&lt;&gt;          converting constructors and assignment operators.                  Ensured that resolvers are restarted correctly after a fork.                  Fixed compatibility with the current NetBSD release.                  Removed spurious handler requirement checks in some async_read          overloads.                  Changed the ssl::context class to propagate non-EOF errors          from the add_certificate_authority          function.                  Fixed a Windows-specific thread_pool          destructor hang that occurred when the pool had an associated I/O object.                  Changed the select reactor to recreate the "self          pipe trick" sockets on error. This addresses an issue on some versions          of Windows, where these sockets are discconected after a system sleep.                  Fixed a compile error in the buffered streams due to the lack of reference          collapsing in C++98.                  Changed the priority_scheduler          example to demonstrate calls to shutdown() and destroy().                  Removed some unnecessary null pointer checks.                  Changed Windows platform detection to recognise TV titles as Windows apps.                  Added some emscripten compatibility patches.                  Fixed a compile error in the use_awaitable_t::as_default_on          function.                  Changed all uses of the boost.bind placeholders to use the boost::placeholders namespace.                  Fixed a potential compile error in the async_compose          implementation due to incorrect overload selection.                  Suppressed some non-virtual destructor warnings.                  Various documentation fixes and improvements.              Asio      1.16.0 / Boost 1.72              Changed the async_initiate          helper function to automatically deduce its return type. This is enabled          for C++11 or later.                  Changed all asynchronous operations to use automatically deduced return          types. This allows completion token implementations to incorporate the          asynchronous operation initiation into the initiating function's return          type, without type erasure. Note that C++14 or later is required to support          completion tokens that use per-operation return type deduction. For C++11          or earlier, a completion token's async_result specialisation must still          provide the nested typedef return_type.                  Introduced three new concepts to support async_initiate.                          completion_signature&lt;T&gt;: Checks if T                is a signature of the form R(Args...).                              completion_handler_for&lt;T, Signature&gt;: Checks if T                is usable as a completion handler with the specified signature.                              completion_token_for&lt;T, Signature&gt;: Checks if T                is a completion token that can be used with async_initiate and the                specified signature.                              For backward compatibility with pre-concepts C++, the macros BOOST_ASIO_COMPLETION_SIGNATURE,                BOOST_ASIO_COMPLETION_HANDLER_FOR,                and BOOST_ASIO_COMPLETION_TOKEN_FOR                are provided. These macros expand to typename                when concepts are unsupported.                                Added the nested template type rebind_executor          to all I/O object types, as a way to generically rebind them to use alternative          I/O executors. For example:        using my_socket_type = tcp::socket::rebind_executor&lt;my_executor_type&gt;::other;                            Changed the asynchronous operations' initiation function objects to report          their associated I/O executor via the nested type executor_type          and member function get_executor(). Note that the presence of executor_type and get_executor() should be treated as optional, and consequently          it may be preferable to access them via the associated_executor          trait and the get_associated_executor() helper function.                  Added the default_completion_token          trait, so that every I/O executor type now has an associated default completion          token type. This trait may be used in asynchronous operation declarations          as follows:        template &lt;    typename IoObject,    typename CompletionToken =      typename default_completion_token&lt;        typename IoObject::executor_type      &gt;::type  &gt;auto async_fyz(    IoObject&amp; io_object,    CompletionToken&amp;&amp; token =      typename default_completion_token&lt;        typename IoObject::executor_type      &gt;::type{}  );           If not specialised, this trait type is void,          meaning no default completion token type is available for the given I/O          executor.                  Specialised the default_completion_token          trait for the use_awaitable          completion token, so that it may be used as shown in the following example:        auto socket = use_awaitable.as_default_on(tcp::socket(my_context));// ...co_await socket.async_connect(my_endpoint); // Defaults to use_awaitable.           In this example, the type of the socket          object is transformed from tcp::socket          to have an I/O executor with the default completion token set to use_awaitable. Alternatively, the socket          type may be computed directly:        using tcp_socket = use_awaitable_t&lt;&gt;::as_default_on_t&lt;tcp::socket&gt;;tcp_socket socket(my_context);// ...co_await socket.async_connect(my_endpoint); // Defaults to use_awaitable.                            Added missing async_initiate          to the Windows-specific I/O objects' asynchronous operations.                  Ensured that the executor type is propagated to newly accepted sockets.          When synchronously or asynchronously accepting a new connection, but without          specifying an executor or execution context, the accept operation will          now correctly propagate the executor type from the acceptor to the socket.          For example, if your acceptor type is:        basic_socket_acceptor&lt;ip::tcp, my_executor_type&gt;           then your accepted socket type will be:        basic_stream_socket&lt;ip::tcp, my_executor_type&gt;                            Changed to require that Protocol          copy and move operations never throw.                  Changed to require that Endpoint          default constructor and move operations never throw.                  Added the noexcept qualifier          to protocol accessors.                  Added the noexcept qualifier          to socket move constructors.                  Fixed issues associated with opening serial ports on Windows:                          Use the correct constant to initialise the RTS control flag.                              Specify a default baud rate (9600).                                Fixed a lost "outstanding work count" that can occur when an          asynchronous accept operation is automatically restarted.              Asio      1.14.1 / Boost 1.71              Improved performance slightly by eliminating a redundant move construction          when completed handlers are dispatched.                  Eliminated a compiler warning by annotating a case          fall-through in the free function connect() implementation.                  Fixed the is_*_buffer_sequence detection traits for          user-defined sequence types.                  Fixed some Windows-specific warnings about an incompatible pointer cast          when obtaining the CancelIoEx          entry point.                  Changed to automatically set the defaults when opening a serial port on          Windows.                  Changed the serial port get_option() member function to be const.                  Fixed a name hiding issue with the WinRT stream-oriented socket backend's          shutdown function.                  Applied a minor fix to the documentation for is_dynamic_buffer.                  Added some support for Haiku OS.                  Added wolfSSL compatability.                  Changed to require C++17 or later for coroutines TS support with clang.                  Fixed a doxygen generation problem in the tutorial.                  Ensured example programs are correctly incorporated into the documentation.              Asio      1.14.0 / Boost 1.70              Added custom I/O executor support to I/O objects.                          All I/O objects now have an additional Executor                template parameter. This template parameter defaults to the asio::executor type (the polymorphic                executor wrapper) but can be used to specify a user-defined executor                type.                              I/O objects' constructors and functions that previously took an                asio::io_context&amp;                now accept either an Executor                or a reference to a concrete ExecutionContext                (such as asio::io_context or asio::thread_pool).                              Note: One potential source of breakage in existing user code is when                reusing an I/O object's io_context                for constructing another I/O object, as in:              asio::steady_timer my_timer(my_socket.get_executor().context());                 To fix this, either construct the second I/O object using                the first I/O object's executor:              asio::steady_timer my_timer(my_socket.get_executor());                 or otherwise explicitly pass the io_context:              asio::steady_timer my_timer(my_io_context);                                              The previously deprecated get_io_context                and get_io_service                member functions have now been removed.                              The previously deprecated service template parameters, and the corresponding                classes, have now been removed.                                Added a new async_result          form with an initiate static          member function.                          The async_result                template now supports a new form:              template &lt;typename CompletionToken, typename Signature&gt;struct async_result{  typedef /* ... */ return_type;  template &lt;typename Initiation,      typename RawCompletionToken,      typename... Args&gt;  static return_type initiate(      Initiation&amp;&amp; initiation,      RawCompletionToken&amp;&amp; token,      Args&amp;&amp;... args);};                                              The initiate member                function must: (a) transform the token into a completion handler                object handler; (b)                cause the invocation of the function object initiation                as if by calling std::forward&lt;Initiation&gt;(initiation)(std::move(handler), std::forward&lt;Args&gt;(args)...). Note that the invocation of                initiation may be                deferred (e.g. lazily evaluated), in which case initiation                and args must be                decay-copied and moved as required.                              A helper function template async_initiate                has also been added as a wrapper for the invocation of async_result&lt;&gt;::initiate. For backward compatibility,                this function supports both the old and new async_result                forms.                              The composed operations examples have been updated to use async_initiate.                              The previously deprecated handler_type                trait and single-argument form of async_result                have now been removed.                                Updated the Coroutines TS support and promoted it to the asio namespace.                          The awaitable&lt;&gt;,                co_spawn, this_coro, detached,                and redirect_error                facilities have been moved from the asio::experimental                namespace to namespace asio.                As part of this change, the this_coro::token() awaitable has been superseded by                the asio::use_awaitable completion token.                              Please note that the use_awaitable                and redirect_error                completion tokens work only with asynchronous operations that use                the new form of async_result                with member function initiate.                Furthermore, when using use_awaitable,                please be aware that the asynchronous operation is not initiated                until co_await is                applied to the awaitable&lt;&gt;.                                Added a new DynamicBuffer_v2          concept which is CopyConstructible.                          This change adds a new set of type requirements for dynamic buffers,                DynamicBuffer_v2,                which supports copy construction. These new type requirements enable                dynamic buffers to be used as arguments to user-defined composed                operations, where the same dynamic buffer object is used repeatedly                for multiple underlying operations. For example:              template &lt;typename DynamicBuffer&gt;void echo_line(tcp::socket&amp; sock, DynamicBuffer buf){  n = asio::read_until(sock, buf, '\n');  asio::write(sock, buf, asio::transfer_exactly(n));}                                              The original DynamicBuffer                type requirements have been renamed to DynamicBuffer_v1.                These requirements continue to be compatible with the Networking                TS.                              New type traits is_dynamic_buffer_v1                and is_dynamic_buffer_v2                have been added to test for conformance to DynamicBuffer_v1                and DynamicBuffer_v2                respectively. The existing is_dynamic_buffer                trait has been retained and delegates to is_dynamic_buffer_v1                (unless BOOST_ASIO_NO_DYNAMIC_BUFFER_V1                is explicitly defined, in which case it delegates to is_dynamic_buffer_v2).                              For convenience, the dynamic_string_buffer                and dynamic_vector_buffer                classes conform to both DynamicBuffer_v1                and DynamicBuffer_v2                requirements.                              When BOOST_ASIO_NO_DYNAMIC_BUFFER_V1                is defined, all support for DynamicBuffer_v1                types and functions is #ifdef-ed out. Support for using basic_streambuf with the read, async_read,                read_until, async_read_until, write, and async_write                functions is also disabled as a consequence.                              Note: This change should have no impact on existing source code that                simply uses dynamic buffers in conjunction with Asio's composed operations.                                Added a new async_compose          function that simplifies the implementation of user-defined asynchronous          operations.                  Added a make_strand function,          which creates a strand          with a deduced Executor          template argument.                  Relaxed the completion condition type requirements to only require move-constructibility          rather than copy-constructibility.                  Added a constructor for local::basic_endpoint          that takes a string_view.                  Added the noexcept qualifier to various member functions of the ip::address, ip::address_v4,          ip::address_v6, ip::basic_endpoint,          and executor_work_guard          classes.                  Added the noexcept qualifier to the buffer_sequence_begin          and buffer_sequence_end          functions.                  Added a new BOOST_ASIO_DISABLE_VISIBILITY          configuration #define          that allows visibility pragmas to be disabled. (Note: If symbols are hidden,          extra care must be taken to ensure that Asio types are not passed across          shared library API boundaries.)                  Enabled recycling of the memory used to type-erase a function object with          the polymorphic executor.                  Changed receive operations to return the correct number of bytes transferred          when truncation (error::message_size)          occurs on a datagram-oriented socket.                  Fixed multicast behaviour on QNX by automatically applying SO_REUSEPORT when the reuse_address          option is set.                  Added inclusion of unistd.h when          targeting Haiku OS, to fix feature detection.                  Added the network_v[46].hpp          headers to the top-level convenience header.                  Fixed calculation of absolute timeout when the backend uses pthread_cond_timedwait.                  Changed the range-based asynchronous connect operation to deduce the EndpointSequence iterator type rather          than assume the presence of a const_iterator          typedef.                  Fixed buffer_sequence_begin          and buffer_sequence_end          to prevent implicit conversion. This change addresses an issue where a          call to buffer_sequence_begin          or buffer_sequence_end          could trigger an implicit conversion to const_buffer          or mutable_buffer. Whenever          this implicit conversion occurred, the return value of buffer_sequence_begin          or buffer_sequence_end          would point to a temporary object.                  Ensured SSL handshake errors are propagated to the peer before the local          operation completes.                  Suppressed the eof error          on SSL shutdown as it actually indicates success.                  Added a fallback error code for when we OpenSSL produces an SSL_ERROR_SYSCALL result without an associated          error.                  Changed composed asynchronous read and write operations to move, rather          than copy, the buffer sequence objects when the composed operation implementation          is moved.                  Changed to use &lt;atomic&gt; when targeting apple/clang/libc++ with          recent Xcode versions, even for C++03. This fixes a warning about the deprecation          of OSMemoryBarrier.                  Fixed compile errors that occur when using the composed read and write          operations with MSVC 11.0, by disabling decltype          support for that compiler.                  Increased the default value of _WIN32_WINNT          to 0x0601 (Windows 7).                  Fixed dispatch documentation          to note that it may call the supplied function object in the current thread.                  Updated post and defer documentation to clarify the the          distinction between them.                  Fixed compilation errors in the read and write composed operations when          used with MSVC 11.0.                  Fixed a Windows-specific issue where the execution context associated with          system_executor was not          being correctly cleaned up on exit.              Asio      1.12.2 / Boost 1.69              Fixed a problem with the detection of std::future          availability with libstdc++.                  Fixed compile error in regex overload of read_until.                  Fixed a timer heap corruption issue that can occur when moving a cancelled          timer.                  Fixed detection of std::experimental::string_view          and std::string_view with newer clang/libc++.                  Fixed MSVC version detection for availability of std::invoke_result.                  Fixed the buffer sequence traits to test the new requirements, if decltype is available.                  Fixed an MSVC issue when building with exceptions disabled.                  Added SSL context options for TLS v1.3.                  Added a compile-time test for TLS v1 support.                  Fixed the macro used to test for TLS v1.2 support.                  Prevented global objects from being created once per thread on Windows.                  Fixed a crash when using size(), max_size() or empty() on default-constructed resolver results.                  Changed to move the return value in basic_resolver_results::begin() to          avoid copying.                  Enabled move support for the Intel Compiler.                  Fixed std::string_view detection issue when using          clang-cl.                  Fixed the handler tracking operation name for io_context::executor_type::dispatch.                  Fixed a buffer overflow that could occur when parsing an address string          with a 64-bit scope id.                  Added examples showing how to write composed operations.                  Added C++11 versions of the Timeouts, Timers, SOCKS4 and SSL examples.                  Fixed minor issues in documentation and examples.              Asio      1.12.1 / Boost 1.67              Added missing const qualifier to basic_socket_acceptor::get_option.                  Worked around a parsing error that occurs with some versions of gcc.                  Fixed broken code samples in tutorial.                  Added new experimental features. (Note that "experimental" features          may be changed without notice in subsequent releases.)                          Added experimental::detached                completion token.                              Added experimental::redirect_error                completion token.                              Added experimental::co_spawn                facility for integration with the coroutines technical specification.                                Updated timeout examples to use latest features.                          Used asio::steady_timer rather than asio::deadline_timer.                              Used asio::dynamic_buffer rather than asio::streambuf.                              Used timed asio::io_context::run_for()                function for blocking clients.                              Added example showing a custom completion token for blocking with                timeouts.                                Fixed unit tests to compile when BOOST_ASIO_NO_DEPRECATED          is defined.                  Changed socket iostreams to use chrono by default, to fix compatibility          with the Networking TS. Define BOOST_ASIO_USE_BOOST_DATE_TIME_FOR_SOCKET_IOSTREAM          to enable the old Boost.Date_Time interface in basic_socket_streambuf          and basic_socket_iostream.                  Updated examples to use chrono rather than Boost.Date_Time.                  Fixed an incorrect member function detector in the is_dynamic_buffer          trait.                  Fixed an async_result incompatibility          with deprecated handler_type.                  Added a missing move optimisation in the SSL stream implementation.                  Fixed incorrect basic_resolver_results::value_type          typedef.                  Fixed a compile error with some OpenSSL versions when SSL_OP_NO_COMPRESSION          is defined.                  Changed add_certificate_authority          to process multiple certificates in a bundle.                  Eliminated deprecation warning with MSVC by using std::invoke_result          rather than std::result_of.                  Changed to use std::string_view for C++17 or later, and          std::experimental::string_view for C++14. Define the preprocessor          macro BOOST_ASIO_DISABLE_STD_STRING_VIEW          to force the use of std::experimental::string_view (assuming it is available)          when compiling in C++17 mode.                  Ensured DynamicBuffer template          arguments are decayed before using in enable_if          tests.                  Changed documentation to distinguish legacy completion handlers (which          are still required to be CopyConstructible) from new MoveConstructible          handlers.                  Suppressed a discarded return value warning in the buffer debugging support.                  Fixed basic_yield_context          to work with completion signatures containing reference parameters.                  Ensured that stackful coroutines launched using spawn() correctly store decayed copies of their          function and handler arguments.                  Fixed some compatibility issues with Android.                  Added cross-compilation support to Jamfiles.                  Fixed some minor portability issues in examples.              Asio      1.12.0 / Boost 1.66              Implemented interface changes to reflect the Networking TS (N4656).                          See the list of new interfaces                and, where applicable, the corresponding old interfaces that have                been superseded.                              The service template parameters, and the corresponding classes, are                disabled by default. For example, instead of basic_socket&lt;Protocol, SocketService&gt; we now have simply basic_socket&lt;Protocol&gt;.                The old interface can be enabled by defining the BOOST_ASIO_ENABLE_OLD_SERVICES                macro.                                Removed previously deprecated functions.                  Added support for customised handler tracking.                  Added reactor-related (i.e. descriptor readiness) events to handler tracking.                  Added special concurrency          hint values that may be used to disable locking on a per io_context basis.                  Enabled perfect forwarding for the first ssl::stream&lt;&gt; constructor argument.                  Added ability to release ownership of the underlying native socket. (Requires          Windows 8.1 or later when using the I/O completion port backend.)              Asio      1.10.10 / Boost 1.65              Changed to require g++ versions &gt;= 4.7 to use standard          atomics, to fix a linker error when using g++ 4.6 (#13121).                  Enabled use of constexpr and          variadic templates with recent MSVC versions.                  Fixed a race condition in the Linux epoll backend, which may occur when          a socket or descriptor is closed while another thread is blocked on epoll.                  Eliminated use of deprecated auto_ptr.                  Fixed misplaced use of asio_handler_is_continuation          result in reactive async_accept          implementation.                  Changed to use poll.h rather than sys/poll.h on          some modern POSIX platforms (#12419).                  Fixed MSVC intellisense detection.                  Disabled use of the __thread          keyword extension for android/clang/x86 targets.              Asio      1.10.9 / Boost 1.64              Added limited support for using regular file descriptors (where I/O operations          should never fail with EAGAIN          or EWOULDBLOCK) with posix::stream_descriptor, when using the Linux          epoll backend.                  Changed to use allocator_traits          to rebind allocators in C++11 or later.                  Eliminated a double "construction" issue in the converting move          constructors.                  Added new ssl::context_base enumerations to enable support          for any TLS version, and improved consistency of SSL/TLS version handling          across OpenSSL releases.                  Applied more changes to address OpenSSL 1.1 compatibility.                  Fixed a compile error when OpenSSL compression is disabled at compile time.                  Suppressed some spurious unused variable warnings issued by gcc          (#12302).                  Worked around a new clang warning issued for usage of the comma operator.                  Fixed various header ordering problems.                  Changed to refer std::atomic_thread_fence, when available,          to eliminate a deprecated function warning on newest macOS SDK (#12482).                  Added a workaround for broken getaddrinfo          in Apple's NAT64 environment.                  Fixed an exception safety issue in the internal hash map implementation.              Asio      1.10.8 / Boost 1.62              Added compatibility with OpenSSL 1.1.0 (#12238).                  Fixed out-of-bounds iterator use in asio::connect() when the connect_condition          returns an end iterator (#12354).                  Added a workaround for a move detection problem on MSVC 2015 Update 2 (#12115).                  Changed a workaround that was previously added for broken Windows firewalls          to only bind to 127.0.0.1 if getsockname          reports 0.0.0.0 (#12406).                  Added call to SSL_COMP_free_compression_methods          to fix two memory leaks reported at shutdown, for OpenSSL versions &gt;=          1.0.2 and &lt; 1.1.0 (#10795).                  Fixed use_future compile          error encountered on some standard library implementations, by changing          std::allocator&lt;void&gt;          use to a non-void template parameter.                  Enabled use of native getaddrinfo          by default on Apple OSes, rather than emulation in terms of getipnodebyname.              Asio      1.10.7 / Boost 1.60              Added support for Windows 8.1 Store apps.                  Fixed macro multiple definition error on Microsoft Visual Studio 2015 (#11539).                  Changed Asio's SSL wrapper to respect OpenSSL's OPENSSL_NO_SSL3          feature test #define          (#11754).                  Changed Asio's SSL wrapper to use OpenSSL's new SSL_CTX_clear_chain_certs          function, if available.                  Suppressed a clang 3.6+ warning about unused typedefs (#11767).                  Regenerated certificates used by SSL examples.                  Fixed buffer sizes passed to strncat          in the getaddrinfo emulation          and in the SSL wrapper's password handling.                  Changed Windows backend to use non-macro CreateEventW          rather than CreateEvent          (#11732).              Asio      1.10.6 / Boost 1.58              Ensured errors generated by Windows' ConnectEx          function are mapped to their portable equivalents (#10744).                  Added new macro BOOST_ASIO_DISABLE_CONNECTEX          to allow use of ConnectEx          to be explicitly disabled.                  Fixed a race condition in windows::object_handle          when there are pending wait operations on destruction (#10624).                  Fixed IPv6 address parsing on FreeBSD, where a trailing scope ID would          cause conversion to fail with EINVAL.                  Worked around shared library visibility issues by ensuring Asio types use          default visibility (#9465, #11070).                  Changed the SSL wrapper to call the password callback when loading an in-memory          key (#10828).                  Fixed false SSL error reports by ensuring that the SSL error queue is cleared          prior to each operation.                  Fixed an ssl::stream&lt;&gt;          bug that may result in spurious 'short read' errors.                  Removed a redundant null pointer check in the SSL engine (#10088).                  Added options for disabling TLS v1.1 and v1.2 (#10690).                  Removed use of deprecated OpenSSL function ERR_remove_state.                  Fixed detection of various C++11 features with Clang (#8835, #10884).                  Fixed detection of C++11 std::addressof          with g++ (#10982).                  Changed multicast test to treat certain join_group          failures as non-fatal.                  Decoupled Asio unit tests from Boost.Test (#11116).                  Changed the tutorial to use std::endl          to ensure output is flushed.                  Fixed an unsigned integer overflow reported by Clang's integer sanitizer.                  Added support for move-only return types when using a yield_context          object with asynchronous operations.                  Changed yield_context to          allow reentrant calls to the completion handler from an initiating function.                  Updated detection of Windows Runtime to work with latest Windows SDK.              Asio      1.10.5 / Boost 1.57              Fixed the kqueue reactor so that it works on FreeBSD          (#10606).                  Fixed an issue in the kqueue reactor which resulted          in spinning when using serial ports on Mac OS (#10496).                  Fixed kqueue reactor support for read-only file descriptors          (#10367).                  Fixed a compile error when using the /dev/poll reactor          (#10350, #10572).                  Changed the Windows backend to use WSASocketW,          as WSASocketA has been          deprecated (#10534).                  Fixed some warnings reported by Visual C++ 2013 (#10376).                  Fixed integer type used in the WinRT version of the byte-order conversion          functions (#10539).                  Changed documentation to indicate that use_future          and spawn()          are not made available when including the asio.hpp          convenience header (#10567).                  Explicitly marked asio::strand          as deprecated. Use asio::io_service::strand          instead.              Asio      1.10.4 / Boost 1.56              Stopped using certain Winsock functions that are marked as deprecated in          the latest Visual C++ and Windows SDK.                  Fixed a shadow variable warning on Windows.                  Fixed a regression in the kqueue backend that was introduced          in Asio 1.10.2.                  Added a workaround for building the unit tests with gcc          on AIX.              Asio      1.10.3              Worked around a gcc problem to do with anonymous enums          (#10042).                  Reverted the Windows HANDLE          backend change to ignore ERROR_MORE_DATA.          Instead, the error will be propagated as with any other (i.e. in an error_code or thrown as a system_error), and the number of bytes          transferred will be returned. For code that needs to handle partial messages,          the error_code overload          should be used (#10034).                  Fixed an off-by-one error in the signal_set          implementation's signal number check (#9324).                  Changed the Windows IOCP backend to not assume that SO_UPDATE_CONNECT_CONTEXT          is defined (#10016).                  Fixed a Windows-specific issue, introduced in Asio 1.10.2, by using VerifyVersionInfo rather than GetVersionEx, as GetVersionEx          has been deprecated.                  Changed to use SSE2 intrinsics rather than inline assembly, to allow the          Cray compiler to work.              Asio      1.10.2              Fixed asio::spawn()          to work correctly with new Boost.Coroutine interface (#9442, #9928).                  Ensured that incomplete asio::spawn() coroutines are correctly unwound when          cleaned up by the io_service          destructor (#9731).                  Fixed delegation of continuation hook for handlers produced by io_service::wrap()          and strand::wrap()          (#9741).                  Changed the Windows I/O completion port backend to use ConnectEx,          if available, for connection-oriented IP sockets.                  Changed the io_service          backend for non-Windows (and non-IOCP Windows) platforms to use a single          condition variable per io_service          instance. This addresses a potential race condition when run_one()          is used from multiple threads.                  Prevented integer overflow when computing timeouts based on some boost::chrono and std::chrono          clocks (#9662, #9778).                  Made further changes to EV_CLEAR          handling in the kqueue backend, to address other cases where the close()          system call may hang on Mac OS X.                  Fixed infinite recursion in implementation of resolver_query_base::flags::operator~ (#9548).                  Made the select reactor          more efficient on Windows for large numbers of sockets (#9528).                  Fixed a Windows-specific type-aliasing issue reported by gcc          (#9550).                  Prevented execution of compile-time-only buffer test to avoid triggering          an address sanitiser warning (#8295).                  Disabled the GetQueuedCompletionStatus          timeout workaround on recent versions of Windows.                  Added support for string-based scope IDs when using link-local multicast          addresses.                  Changed IPv6 multicast group join to use the address's scope ID as the          interface, if an interface is not explicitly specified.                  Fixed multicast test failure on Mac OS X and the BSDs by using a link-local          multicast address.                  Various minor documentation improvements (#8295, #9605, #9771).              Asio      1.10.1 / Boost 1.55              Implemented a limited port to Windows Runtime. This support requires that          the language extensions be enabled. Due to the restricted facilities exposed          by the Windows Runtime API, the port also comes with the following caveats:                          The core facilities such as the io_service,                strand, buffers,                composed operations, timers, etc., should all work as normal.                              For sockets, only client-side TCP is supported.                              Explicit binding of a client-side TCP socket is not supported.                              The cancel()                function is not supported for sockets. Asynchronous operations may                only be cancelled by closing the socket.                              Operations that use null_buffers                are not supported.                              Only tcp::no_delay and socket_base::keep_alive                options are supported.                              Resolvers do not support service names, only numbers. I.e. you must                use "80" rather than "http".                              Most resolver query flags have no effect.                                Fixed a regression (introduced in Boost 1.54) where, on some platforms,          errors from async_connect          were not correctly propagated through to the completion handler (#8795).                  Fixed a Windows-specific regression (introduced in Boost 1.54) that occurs          when multiple threads are running an io_service.          When the bug occurs, the result of an asynchronous operation (error and          bytes tranferred) is incorrectly discarded and zero values used instead.          For TCP sockets this results in spurious end-of-file notifications (#8933).                  Fixed a bug in handler tracking, where it was not correctly printing out          some handler IDs (#8808).                  Fixed the comparison used to test for successful synchronous accept operations          so that it works correctly with unsigned socket descriptors (#8752).                  Ensured the signal number is correctly passed to the completion handler          when starting an async_wait          on a signal that is already raised (#8738).                  Suppressed a g++ 4.8+ warning about unused typedefs (#8980).                  Enabled the move optimisation for handlers that use the default invocation          hook (#8624).                  Clarified that programs must not issue overlapping async_write_at          operations (#8669).                  Changed the Windows HANDLE          backend to treat ERROR_MORE_DATA          as a non-fatal error when returned by GetOverlappedResult          for a synchronous read (#8722).                  Visual C++ language extensions use generic          as a keyword. Added a workaround that renames the namespace to cpp_generic when those language extensions          are in effect.                  Fixed some asynchronous operations that missed out on getting async_result support in Boost 1.54. In          particular, the buffered stream templates have been updated so that they          adhere to current handler patterns (#9000, #9001).                  Enabled move support for Microsoft Visual Studio 2012 (#8959).                  Added use_future support          for Microsoft Visual Studio 2012.                  Removed a use of std::min in the Windows IOCP backend to avoid          a dependency on the &lt;algorithm&gt; header (#8758).                  Eliminated some unnecessary handler copies.                  Fixed support for older versions of OpenSSL that do not provide the SSL_CTX_clear_options function (#9273).                  Fixed various minor and cosmetic issues in code and documentation (including          #8347, #8950, #8953, #8965, #8997, #9230).              Asio      1.10.0 / Boost 1.54              Added new traits classes, handler_type          and async_result, that          allow the customisation of the return type of an initiating function.                  Added the asio::spawn()          function, a high-level wrapper for running stackful coroutines, based on          the Boost.Coroutine library. The spawn() function enables programs to implement          asynchronous logic in a synchronous manner. For example: size_t n          = my_socket.async_read_some(my_buffer, yield);. For further information, see Stackful          Coroutines.                  Added the asio::use_future special value, which provides          first-class support for returning a C++11 std::future          from an asynchronous operation's initiating function. For example: future&lt;size_t&gt;          = my_socket.async_read_some(my_buffer, asio::use_future);. For further information, see Futures.                  Promoted the stackless coroutine class and macros to be part of Asio's          documented interface, rather than part of the HTTP server 4 example. For          further information, see Stackless          Coroutines.                  Added a new handler hook called asio_handler_is_continuation.          Asynchronous operations may represent a continuation of the asynchronous          control flow associated with the current executing handler. The asio_handler_is_continuation hook can          be customised to return true          if this is the case, and Asio's implementation can use this knowledge to          optimise scheduling of the new handler. To cover common cases, Asio customises          the hook for strands, spawn() and composed asynchronous operations.                  Added four new generic protocol classes, generic::datagram_protocol,          generic::raw_protocol, generic::seq_packet_protocol          and generic::stream_protocol, which implement the          Protocol type requirements,          but allow the user to specify the address family (e.g. AF_INET)          and protocol type (e.g. IPPROTO_TCP)          at runtime. For further information, see Support          for Other Protocols.                  Added C++11 move constructors that allow the conversion of a socket (or          acceptor) into a more generic type. For example, an ip::tcp::socket          can be converted into a generic::stream_protocol::socket          via move construction. For further information, see Support          for Other Protocols.                  Extended the basic_socket_acceptor&lt;&gt;'s accept() and async_accept() functions to allow a new connection to          be accepted directly into a socket of a more generic type. For example,          an ip::tcp::acceptor can be used to accept into a          generic::stream_protocol::socket object. For further information,          see Support          for Other Protocols.                  Moved existing examples into a C++03-specific directory, and added a new          directory for C++11-specific examples. A limited subset of the C++03 examples          have been converted to their C++11 equivalents.                  Various SSL enhancements. Thanks go to Nick Jones, on whose work these          changes are based.                          Added support for SSL handshakes with re-use of data already read                from the wire. New overloads of the ssl::stream&lt;&gt; class's handshake() and async_handshake() functions have been added. These                accept a ConstBufferSequence                to be used as initial input to the ssl engine for the handshake procedure.                              Added support for creation of TLSv1.1 and TLSv1.2 ssl::context                objects.                              Added a set_verify_depth() function to the ssl::context                and ssl::stream&lt;&gt;                classes.                              Added the ability to load SSL certificate and key data from memory                buffers. New functions, add_certificate_authority(), use_certificate(), use_certificate_chain(), use_private_key(), use_rsa_private_key() and use_tmp_dh(), have been added to the ssl::context class.                              Changed ssl::context to automatically disable                SSL compression by default. To enable, use the new ssl::context::clear_options()                function, as in my_context.clear_options(ssl::context::no_compression).                                Fixed a potential deadlock in signal_set          implementation.                  Fixed an error in acceptor example in documentation #8421.                  Fixed copy-paste errors in waitable timer documentation #8602.                  Added assertions to satisfy some code analysis tools #7739.                  Fixed a malformed #warning          directive #7939.                  Fixed a potential data race in the Linux epoll          implementation.                  Fixed a Windows-specific bug, where certain operations might generate an          error_code with an invalid          (i.e. NULL) error_category #8613.                  Fixed basic_waitable_timer's          underlying implementation so that it can handle any time_point          value without overflowing the intermediate duration objects.                  Fixed a problem with lost thread wakeups that can occur when making concurrent          calls to run()          and poll()          on the same io_service          object #8354.                  Fixed implementation of asynchronous connect operation so that it can cope          with spurious readiness notifications from the reactor #7961.                  Fixed a memory leak in the ssl::rfc2818_verification          class.                  Added a mechanism for disabling automatic Winsock initialisation #3605.          See the header file boost/asio/detail/winsock_init.hpp          for details.              Asio      1.8.3 / Boost 1.53              Fixed some 64-to-32-bit conversion warnings (#7459).                  Fixed some small errors in documentation and comments (#7761).                  Fixed an error in the example embedded in basic_socket::get_option's          documentation (#7562).                  Changed to use long rather          than int for SSL_CTX options,          to match OpenSSL (#7209).                  Changed to use _snwprintf          to address a compile error due to the changed swprintf          signature in recent versions of MinGW (#7373).                  Fixed a deadlock that can occur on Windows when shutting down a pool of          io_service threads due          to running out of work (#7552).                  Enabled the noexcept qualifier          for error categories (#7797).                  Changed UNIX domain socket example to treat errors from accept          as non-fatal (#7488).                  Added a small block recycling optimisation to improve default memory allocation          behaviour.              Asio      1.8.2 / Boost 1.51              Fixed an incompatibility between ip::tcp::iostream          and C++11 (#7162).                  Decorated GCC attribute names with underscores to prevent interaction with          user-defined macros (#6415).                  Added missing #include &lt;cctype&gt;, needed for some versions of MinGW.                  Changed to use gcc's atomic builtins on ARM CPUs, when          available (#7140).                  Changed strand destruction to be a no-op, to allow strand objects to be          destroyed after their associated io_service          has been destroyed.                  Added support for some newer versions of glibc which provide the epoll_create1()          function but always fail with ENOSYS          (#7012).                  Changed the SSL implementation to throw an exception if SSL engine initialisation          fails (#6303).                  Fixed another regression in buffered_write_stream          (#6310).                  Implemented various minor performance improvements, primarily targeted          at Linux x86 and x86-64 platforms.              Asio      1.8.1 / Boost 1.50              Changed the epoll_reactor          backend to do lazy registration for EPOLLOUT          events.                  Fixed the epoll_reactor          handling of out-of-band data, which was broken by an incomplete fix in          the last release.                  Changed Asio's SSL wrapper to respect OpenSSL's OPENSSL_NO_ENGINE          feature test #define          (#6432).                  Fixed windows::object_handle so that it works with Windows          compilers that support C++11 move semantics (such as g++).                  Improved the performance of strand rescheduling.                  Added support for g++ 4.7 when compiling in C++11 mode          (#6620).                  Fixed a problem where signal_set          handlers were not being delivered when the io_service          was constructed with a concurrency_hint          of 1 (#6657).              Asio      1.8.0 / Boost 1.49              Added a new class template basic_waitable_timer          based around the C++11 clock type requirements. It may be used with the          clocks from the C++11 &lt;chrono&gt;          library facility or, if those are not available, Boost.Chrono. The typedefs          high_resolution_timer,          steady_timer and system_timer may be used to create timer          objects for the standard clock types.                  Added a new windows::object_handle class for performing waits          on Windows kernel objects. Thanks go to Boris Schaeling for contributing          substantially to the development of this feature.                  On Linux, connect()          can return EAGAIN in certain circumstances. Remapped this to another error          so that it doesn't look like a non-blocking operation (#6048).                  Fixed a compile error on NetBSD (#6098).                  Fixed deadlock on Mac OS X (#6275).                  Fixed a regression in buffered_write_stream          (#6310).                  Fixed a non-paged pool "leak" on Windows when an io_service is repeatedly run without          anything to do (#6321).                  Reverted earlier change to allow some speculative operations to be performed          without holding the lock, as it introduced a race condition in some multithreaded          scenarios.                  Fixed a bug where the second buffer in an array of two buffers may be ignored          if the first buffer is empty.              Asio      1.6.1 / Boost 1.48              Implemented various performance improvements, including:                          Using thread-local operation queues in single-threaded use cases                (i.e. when concurrency_hint                is 1) to eliminate a lock/unlock pair.                              Allowing some epoll_reactor                speculative operations to be performed without holding the lock.                              Improving locality of reference by performing an epoll_reactor's                I/O operation immediately before the corresponding handler is called.                This also improves scalability across CPUs when multiple threads                are running the io_service.                              Specialising asynchronous read and write operations for buffer sequences                that are arrays (boost::array                or std::array) of exactly two buffers.                                Fixed a compile error in the regex overload of async_read_until          (#5688).                  Fixed a Windows-specific compile error by explicitly specifying the signal()          function from the global namespace (#5722).                  Changed the deadline_timer          implementation so that it does not read the clock unless the timer heap          is non-empty.                  Changed the SSL stream's buffers' sizes so that they are large enough to          hold a complete TLS record (#5854).                  Fixed the behaviour of the synchronous null_buffers          operations so that they obey the user's non-blocking setting (#5756).                  Changed to set the size of the select fd_set          at runtime when using Windows.                  Disabled an MSVC warning due to const qualifier being applied to function          type.                  Fixed a crash that occurs when using the Intel C++ compiler (#5763).                  Changed the initialisation of the OpenSSL library so that it supports all          available algorithms.                  Fixed the SSL error mapping used when the session is gracefully shut down.                  Added some latency test programs.                  Clarified that a read operation ends when the buffer is full (#5999).                  Fixed an exception safety issue in epoll_reactor          initialisation (#6006).                  Made the number of strand implementations configurable by defining BOOST_ASIO_STRAND_IMPLEMENTATIONS to          the desired number.                  Added support for a new BOOST_ASIO_ENABLE_SEQUENTIAL_STRAND_ALLOCATION          flag which switches the allocation of strand implementations to use a round-robin          approach rather than hashing.                  Fixed potential strand starvation issue that can occur when strand.post()          is used.              Asio      1.6.0 / Boost 1.47              Added support for signal handling, using a new class called signal_set. Programs may add one or more          signals to the set, and then perform an async_wait() operation. The specified handler will          be called when one of the signals occurs. The same signal number may be          registered with multiple signal_set          objects, however the signal number must be used only with Asio. Addresses          #2879.                  Added handler tracking, a new debugging aid. When enabled by defining          BOOST_ASIO_ENABLE_HANDLER_TRACKING,          Asio writes debugging output to the standard error stream. The output records          asynchronous operations and the relationships between their handlers. It          may be post-processed using the included handlerviz.pl          tool to create a visual representation of the handlers (requires GraphViz).                  Added support for timeouts on socket iostreams, such as ip::tcp::iostream.          A timeout is set by calling expires_at() or expires_from_now() to establish a deadline. Any socket operations          which occur past the deadline will put the iostream into a bad state.                  Added a new error()          member function to socket iostreams, for retrieving the error code from          the most recent system call.                  Added a new basic_deadline_timer::cancel_one() function. This function lets you cancel          a single waiting handler on a timer. Handlers are cancelled in FIFO order.                  Added a new transfer_exactly() completion condition. This can be used          to send or receive a specified number of bytes even if the total size of          the buffer (or buffer sequence) is larger.                  Added new free functions connect() and async_connect(). These operations try each endpoint in          a list until the socket is successfully connected, and are useful for creating          TCP clients that work with both IPv4 and IPv6.                  Extended the buffer_size() function so that it works for buffer          sequences in addition to individual buffers.                  Added a new buffer_copy() function that can be used to copy the          raw bytes between individual buffers and buffer sequences.                  Added new non-throwing overloads of read(), read_at(), write() and write_at() that do not require a completion condition.                  Added friendlier compiler errors for when a completion handler does not          meet the necessary type requirements. When C++0x is available (currently          supported for g++ 4.5 or later, and MSVC 10), static_assert is also used to generate an          informative error message. This checking may be disabled by defining BOOST_ASIO_DISABLE_HANDLER_TYPE_REQUIREMENTS.                  Added a new, completely rewritten SSL implementation. The new implementation          compiles faster, shows substantially improved performance, and supports          custom memory allocation and handler invocation. It includes new API features          such as certificate verification callbacks and has improved error reporting.          The new implementation is source-compatible with the old for most uses.          However, if necessary, the old implementation may still be used by defining          BOOST_ASIO_ENABLE_OLD_SSL.          Addresses #3702,          #3958.                  Changed the separate compilation support such that, to use Asio's SSL capabilities,          you should also include boost/asio/ssl/impl/src.hpp          in one source file in your program.                  Changed the SSL implementation to support build environments where SSL          v2 is explicitly disabled (#5453).                  Made the is_loopback(),          is_unspecified()          and is_multicast()          functions consistently available across the ip::address,          ip::address_v4 and ip::address_v6          classes (#3939).                  Added new non_blocking() functions for managing the non-blocking          behaviour of a socket or descriptor. The io_control() commands named non_blocking_io          are now deprecated in favour of these new functions.                  Added new native_non_blocking() functions for managing the non-blocking          mode of the underlying socket or descriptor. These functions are intended          to allow the encapsulation of arbitrary non-blocking system calls as asynchronous          operations, in a way that is transparent to the user of the socket object.          The functions have no effect on the behaviour of the synchronous operations          of the socket or descriptor.                  Added the io_control()          member function for socket acceptors (#3297).                  Added a release()          member function to posix descriptors. This function releases ownership          of the underlying native descriptor to the caller. Addresses #3900.                  Added support for sequenced packet sockets (SOCK_SEQPACKET).                  Added a new io_service::stopped() function that can be used to determine          whether the io_service          has stopped (i.e. a reset() call is needed prior to any further calls          to run(),          run_one(),          poll()          or poll_one()).                  For consistency with the C++0x standard library, deprecated the native_type typedefs in favour of native_handle_type, and the native()          member functions in favour of native_handle().                  Added support for C++0x move construction and assignment to sockets, serial          ports, POSIX descriptors and Windows handles.                  Reduced the copying of handler function objects.                  Added support for C++0x move construction to further reduce (and in some          cases eliminate) copying of handler objects.                  Added support for the fork() system call. Programs that use fork()          must call io_service.notify_fork()          at the appropriate times. Two new examples have been added showing how          to use this feature. Addresses #3238,          #4162.                  Cleaned up the handling of errors reported by the close() system call. In particular, assume that          most operating systems won't have close() fail with EWOULDBLOCK,          but if it does then set the blocking mode and restart the call. If any          other error occurs, assume the descriptor is closed. Addresses #3307.                  Added new asio::buffer()          overloads for std::array, when available.                  Changed the implementation to use the C++0x standard library templates          array, shared_ptr,          weak_ptr and atomic when they are available, rather          than the Boost equivalents.                  Use C++0x variadic templates when available, rather than generating function          overloads using Boost.Preprocessor.                  Changed exception reporting to include the function name in exception          what()          messages.                  Fixed insufficient initialisers warning with MinGW.                  Changed the shutdown_service() member functions to be private.                  Added archetypes for testing socket option functions.                  Changed the Boost.Asio examples so that they don't use Boost.Thread's convenience          header. Use the header file that is specifically for the boost::thread          class instead.                  Removed the dependency on OS-provided macros for the well-known IPv4 and          IPv6 addresses. This should eliminate annoying "missing braces around          initializer" warnings (#3741).                  Reduced the size of ip::basic_endpoint&lt;&gt; objects (such as ip::tcp::endpoint and ip::udp::endpoint).                  Changed the reactor backends to assume that any descriptors or sockets          added using assign()          may have been dup()-ed,          and so require explicit deregistration from the reactor (#4971).                  Removed the deprecated member functions named io_service(). The get_io_service() member functions should be used instead.                  Removed the deprecated typedefs resolver_query          and resolver_iterator from          the ip::tcp, ip::udp          and ip::icmp classes.                  Modified the buffers_iterator&lt;&gt; and ip::basic_resolver_iterator          classes so that the value_type typedefs are non-const byte types.                  Fixed warnings reported by g++'s -Wshadow compiler option          (#3905).                  Added an explicit cast to convert the FIONBIO          constant to int, to suppress a compiler warning on some platforms (#5128).                  Changed most examples to treat a failure by an accept operation as non-fatal          (#5124).                  Fixed an error in the tick_count_timer example by making          the duration type signed. Previously, a wait on an already-passed deadline          would not return for a very long time (#5418).              Asio      1.4.9 / Boost 1.46.1              EV_ONESHOT seems to cause          problems on some versions of Mac OS X, with the io_service          destructor getting stuck inside the close() system call. Changed the kqueue backend          to use EV_CLEAR instead          (#5021).                  Fixed compile failures with some versions of g++ due          to the use of anonymous enums (#4883).                  Fixed a bug on kqueue-based platforms, where some system calls that repeatedly          fail with EWOULDBLOCK are          not correctly re-registered with kqueue.                  Changed asio::streambuf to ensure that its internal          pointers are updated correctly after the data has been modified using          std::streambuf member functions.                  Fixed a bug that prevented the linger socket option from working on platforms          other than Windows.              Asio      1.4.8 / Boost 1.46              Fixed an integer overflow problem that occurs when ip::address_v4::broadcast() is used on 64-bit platforms.                  Fixed a problem on older Linux kernels (where epoll is used without timerfd          support) that prevents timely delivery of deadline_timer handlers, after          the program has been running for some time (#5045).              Asio      1.4.7 / Boost 1.45              Fixed a problem on kqueue-based platforms where a deadline_timer          may never fire if the io_service          is running in a background thread (#4568).                  Fixed a const-correctness issue that prevented valid uses of has_service&lt;&gt;          from compiling (#4638).                  Fixed MinGW cross-compilation (#4491).                  Removed dependency on deprecated Boost.System functions (#4672).                  Ensured close()/closesocket()          failures are correctly propagated (#4573).                  Added a check for errors returned by InitializeCriticalSectionAndSpinCount          (#4574).                  Added support for hardware flow control on QNX (#4625).                  Always use pselect()          on HP-UX, if it is available (#4578).                  Ensured handler arguments are passed as lvalues (#4744).                  Fixed Windows build when thread support is disabled (#4680).                  Fixed a Windows-specific problem where deadline_timer          objects with expiry times set more than 5 minutes in the future may never          expire (#4745).                  Fixed the resolver backend          on BSD platforms so that an empty service name resolves to port number          0, as per the documentation          (#4690).                  Fixed read operations so that they do not accept buffer sequences of type          const_buffers_1 (#4746).                  Redefined Protocol and          id to avoid clashing with          Objective-C++ keywords (#4191).                  Fixed a vector reallocation          performance issue that can occur when there are many active deadline_timer objects (#4780).                  Fixed the kqueue backend so that it compiles on NetBSD (#4662).                  Fixed the socket io_control() implementation on 64-bit Mac OS X and          BSD platforms (#4782).                  Fixed a Windows-specific problem where failures from accept() are incorrectly treated as successes          (#4859).                  Deprecated the separate compilation header &lt;boost/asio/impl/src.cpp&gt;          in favour of &lt;boost/asio/impl/src.hpp&gt; (#4560).              Asio      1.4.6 / Boost 1.44              Reduced compile times. (Note that some programs may need to add additional          #includes, e.g. if the          program uses boost::array but does not explicitly include          &lt;boost/array.hpp&gt;.)                  Reduced the size of generated code.                  Refactored deadline_timer          implementation to improve performance.                  Improved multiprocessor scalability on Windows by using a dedicated hidden          thread to wait for timers.                  Improved performance of asio::streambuf          with async_read()          and async_read_until().          These read operations now use the existing capacity of the streambuf when reading, rather than limiting          the read to 512 bytes.                  Added optional separate compilation. To enable, add #include          &lt;boost/asio/impl/src.cpp&gt; to one source file in a program, then          build the program with BOOST_ASIO_SEPARATE_COMPILATION          defined in the project/compiler settings. Alternatively, BOOST_ASIO_DYN_LINK may be defined to          build a separately-compiled Asio as part of a shared library.                  Added new macro BOOST_ASIO_DISABLE_FENCED_BLOCK          to permit the disabling of memory fences around completion handlers, even          if thread support is enabled.                  Reworked timeout examples to better illustrate typical use cases.                  Ensured that handler arguments are passed as const          types.                  Fixed incorrect parameter order in null_buffers          variant of async_send_to          (#4170).                  Ensured unsigned char          is used with isdigit in          getaddrinfo emulation (#4201).                  Fixed handling of very small but non-zero timeouts (#4205).                  Fixed crash that occurred when an empty buffer sequence was passed to a          composed read or write operation.                  Added missing operator+          overload in buffers_iterator          (#4382).                  Implemented cancellation of null_buffers          operations on Windows.              Asio      1.4.5 / Boost 1.43              Improved performance.                  Reduced compile times.                  Reduced the size of generated code.                  Extended the guarantee that background threads don't call user code to          all asynchronous operations (#3923).                  Changed to use edge-triggered epoll on Linux.                  Changed to use timerfd          for dispatching timers on Linux, when available.                  Changed to use one-shot notifications with kqueue on Mac OS X and BSD platforms.                  Added a bitmask type ip::resolver_query_base::flags          as per the TR2 proposal. This type prevents implicit conversion from int to flags,          allowing the compiler to catch cases where users incorrectly pass a numeric          port number as the service name.                  Added #define NOMINMAX          for all Windows compilers. Users can define BOOST_ASIO_NO_NOMINMAX          to suppress this definition (#3901).                  Fixed a bug where 0-byte asynchronous reads were incorrectly passing an          error::eof result to the completion handler          (#4023).                  Changed the io_control() member functions to always call ioctl on the underlying descriptor when          modifying blocking mode (#3307).                  Changed the resolver implementation to longer require the typedefs InternetProtocol::resolver_query and InternetProtocol::resolver_iterator,          as neither typedef is part of the documented InternetProtocol          requirements. The corresponding typedefs in the ip::tcp,          ip::udp and ip::icmp          classes have been deprecated.                  Fixed out-of-band handling for reactors not based on select().                  Added new BOOST_ASIO_DISABLE_THREADS          macro that allows Asio's threading support to be independently disabled.                  Minor documentation improvements.              Asio      1.4.4 / Boost 1.42              Added a new HTTP Server 4 example illustrating the use of stackless coroutines          with Asio.                  Changed handler allocation and invocation to use boost::addressof          to get the address of handler objects, rather than applying operator&amp;          directly (#2977).                  Restricted MSVC buffer debugging workaround to 2008, as it causes a crash          with 2010 beta 2 (#3796,          #3822).                  Fixed a problem with the lifetime of handler memory, where Windows needs          the OVERLAPPED structure          to be valid until both the initiating function call has returned and the          completion packet has been delivered.                  Don't block signals while performing system calls, but instead restart          the calls if they are interrupted.                  Documented the guarantee made by strand objects with respect to order of          handler invocation.                  Changed strands to use a pool of implementations, to make copying of strands          cheaper.                  Ensured that kqueue support is enabled for BSD platforms (#3626).                  Added a boost_ prefix to          the extern "C"          thread entry point function (#3809).                  In getaddrinfo emulation,          only check the socket type (SOCK_STREAM          or SOCK_DGRAM) if a service          name has been specified. This should allow the emulation to work with raw          sockets.                  Added a workaround for some broken Windows firewalls that make a socket          appear bound to 0.0.0.0 when it is in fact bound to 127.0.0.1.                  Applied a fix for reported excessive CPU usage under Solaris (#3670).                  Added some support for platforms that use older compilers such as g++ 2.95          (#3743).              Asio      1.4.3 / Boost 1.40              Added a new ping example to illustrate the use of ICMP sockets.                  Changed the buffered*_stream&lt;&gt;          templates to treat 0-byte reads and writes as no-ops, to comply with the          documented type requirements for SyncReadStream,          AsyncReadStream, SyncWriteStream and AsyncWriteStream.                  Changed some instances of the throw          keyword to boost::throw_exception()          to allow Asio to be used when exception support is disabled. Note that          the SSL wrappers still require exception support (#2754).                  Made Asio compatible with the OpenSSL 1.0 beta (#3256).                  Eliminated a redundant system call in the Solaris /dev/poll          backend.                  Fixed a bug in resizing of the bucket array in the internal hash maps (#3095).                  Ensured correct propagation of the error code when a synchronous accept          fails (#3216).                  Ensured correct propagation of the error code when a synchronous read or          write on a Windows HANDLE fails.                  Fixed failures reported when _GLIBCXX_DEBUG          is defined (#3098).                  Fixed custom memory allocation support for timers (#3107).                  Tidied up various warnings reported by g++ (#1341,          #2618).                  Various documentation improvements, including more obvious hyperlinks to          function overloads, header file information, examples for the handler type          requirements, and adding enum values to the index (#3157,          #2620).              Asio      1.4.2 / Boost 1.39              Implement automatic resizing of the bucket array in the internal hash maps.          This is to improve performance for very large numbers of asynchronous operations          and also to reduce memory usage for very small numbers. A new macro BOOST_ASIO_HASH_MAP_BUCKETS may be used          to tweak the sizes used for the bucket arrays. (N.B. this feature introduced          a bug which was fixed in Asio 1.4.3 / Boost 1.40.)                  Add performance optimisation for the Windows IOCP backend for when no timers          are used.                  Prevent locale settings from affecting formatting of TCP and UDP endpoints          (#2682).                  Fix a memory leak that occurred when an asynchronous SSL operation's completion          handler threw an exception (#2910).                  Fix the implementation of io_control() so that it adheres to the documented          type requirements for IoControlCommand (#2820).                  Fix incompatibility between Asio and ncurses.h (#2156).                  On Windows, specifically handle the case when an overlapped ReadFile call fails with ERROR_MORE_DATA. This enables a hack          where a windows::stream_handle can be used with a message-oriented          named pipe (#2936).                  Fix system call wrappers to always clear the error on success, as POSIX          allows successful system calls to modify errno (#2953).                  Don't include termios.h if BOOST_ASIO_DISABLE_SERIAL_PORT          is defined (#2917).                  Cleaned up some more MSVC level 4 warnings (#2828).                  Various documentation fixes (#2871).              Asio      1.4.1 / Boost 1.38              Improved compatibility with some Windows firewall software.                  Ensured arguments to windows::overlapped_ptr::complete() are correctly passed to the completion          handler (#2614).                  Fixed a link problem and multicast failure on QNX (#2504,          #2530).                  Fixed a compile error in SSL support on MinGW / g++ 3.4.5.                  Drop back to using a pipe for notification if eventfd is not available          at runtime on Linux (#2683).                  Various minor bug and documentation fixes (#2534,          #2541,          #2607,          #2617,          #2619).              Asio      1.4.0 / Boost 1.37              Enhanced CompletionCondition concept with the signature size_t          CompletionCondition(error_code ec, size_t total),          where the return value indicates the maximum number of bytes to be transferred          on the next read or write operation. (The old CompletionCondition signature          is still supported for backwards compatibility).                  New windows::overlapped_ptr class to allow arbitrary overlapped I/O functions          (such as TransmitFile) to be used with Asio.                  On recent versions of Linux, an eventfd descriptor is now used (rather          than a pipe) to interrupt a blocked select/epoll reactor.                  Added const overloads of lowest_layer().                  Synchronous read, write, accept and connect operations are now thread safe          (meaning that it is now permitted to perform concurrent synchronous operations          on an individual socket, if supported by the OS).                  Reactor-based io_service implementations now use lazy initialisation to          reduce the memory usage of an io_service object used only as a message          queue.              Asio      1.2.0 / Boost 1.36              Added support for serial ports.                  Added support for UNIX domain sockets.                  Added support for raw sockets and ICMP.                  Added wrappers for POSIX stream-oriented file descriptors (excluding regular          files).                  Added wrappers for Windows stream-oriented HANDLEs          such as named pipes (requires HANDLEs          that work with I/O completion ports).                  Added wrappers for Windows random-access HANDLEs          such as files (requires HANDLEs          that work with I/O completion ports).                  Added support for reactor-style operations (i.e. they report readiness          but perform no I/O) using a new null_buffers          type.                  Added an iterator type for bytewise traversal of buffer sequences.                  Added new read_until()          and async_read_until()          overloads that take a user-defined function object for locating message          boundaries.                  Added an experimental two-lock queue (enabled by defining BOOST_ASIO_ENABLE_TWO_LOCK_QUEUE) that          may provide better io_service          scalability across many processors.                  Various fixes, performance improvements, and more complete coverage of          the custom memory allocation support.              Asio      1.0.0 / Boost 1.35          First release of Asio as part of Boost.    Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/history.html
windows::overlapped_handlewindows::overlapped_handleHomeLibrariesPeopleFAQMorewindows::overlapped_handle                      Typedef for the typical usage of an overlapped handle.      typedef basic_overlapped_handle overlapped_handle;        Types                                        Name                                                                Description                                                                rebind_executor                                                                Rebinds the handle type to another executor.                                                                executor_type                                                                The type of the executor associated with the object.                                                                lowest_layer_type                                                                An overlapped_handle is always the lowest layer.                                                                native_handle_type                                                                The native representation of a handle.                                      Member        Functions                                        Name                                                                Description                                                                assign                                                                Assign an existing native handle to the handle.                                                                basic_overlapped_handle [constructor]                                                                Construct an overlapped handle without opening it.   â                  Construct an overlapped handle on an existing native handle.                    â Move-construct an overlapped handle from another.                    â Move-construct an overlapped handle from a handle of another                  executor type.                                                                cancel                                                                Cancel all asynchronous operations associated with the handle.                                                                close                                                                Close the handle.                                                                get_executor                                                                Get the executor associated with the object.                                                                is_open                                                                Determine whether the handle is open.                                                                lowest_layer                                                                Get a reference to the lowest layer.   â Get a const                  reference to the lowest layer.                                                                native_handle                                                                Get the native handle representation.                                                                operator=                                                                Move-assign an overlapped handle from another.   â Move-assign                  an overlapped handle from a handle of another executor type.                                                                release                                                                Release ownership of the underlying native handle.                                      Protected        Member Functions                                        Name                                                                Description                                                                ~basic_overlapped_handle [destructor]                                                                Protected destructor to prevent deletion through this type.                                      The windows::overlapped_handle class provides        the ability to wrap a Windows handle. The underlying object referred to by        the handle must support overlapped I/O.              Thread        Safety              Distinct objects: Safe.              Shared objects: Unsafe.              Requirements              Header: boost/asio/windows/overlapped_handle.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/windows__overlapped_handle.html
execution::context_as_t::is_applicable_property_vexecution::context_as_t::is_applicable_property_vHomeLibrariesPeopleFAQMoreexecution::context_as_t::is_applicable_property_v           The          execution::context_as_t property applies          to executors, senders, and schedulers.        template &lt;typename T&gt;static constexpr bool is_applicable_property_v =  is_executor_v&lt;T&gt; || is_sender_v&lt;T&gt; || is_scheduler_v&lt;T&gt;;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/execution__context_as_t/is_applicable_property_v.html
execution::context_as_t::is_preferableexecution::context_as_t::is_preferableHomeLibrariesPeopleFAQMoreexecution::context_as_t::is_preferable           The          execution::context_t property cannot be preferred.        static constexpr bool is_preferable = false;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/execution__context_as_t/is_preferable.html
execution::context_as_t::is_requirableexecution::context_as_t::is_requirableHomeLibrariesPeopleFAQMoreexecution::context_as_t::is_requirable           The          execution::context_t property cannot be required.        static constexpr bool is_requirable = false;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/execution__context_as_t/is_requirable.html
execution::context_as_t::polymorphic_query_result_typeexecution::context_as_t::polymorphic_query_result_typeHomeLibrariesPeopleFAQMoreexecution::context_as_t::polymorphic_query_result_type           The          type returned by queries against an any_executor.        typedef T polymorphic_query_result_type;          Requirements                  Header: boost/asio/execution/context_as.hpp                  Convenience header: boost/asio/execution.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/execution__context_as_t/polymorphic_query_result_type.html
const_registered_bufferconst_registered_bufferHomeLibrariesPeopleFAQMoreconst_registered_buffer                      Holds a registered buffer over non-modifiable data.      class const_registered_buffer        Member        Functions                                        Name                                                                Description                                                                buffer                                                                Get the underlying constant buffer.                                                                const_registered_buffer [constructor]                                                                Default constructor creates an invalid registered buffer.                    â Construct a non-modifiable buffer from a modifiable one.                                                                data                                                                Get a pointer to the beginning of the memory range.                                                                id                                                                Get the registered buffer identifier.                                                                operator+=                                                                Move the start of the buffer by the specified number of bytes.                                                                size                                                                Get the size of the memory range.                                      Related        Functions                                        Name                                                                Description                                                                operator+                                                                Create a new non-modifiable registered buffer that is offset from                  the start of another.                                                  Create a new non-modifiable buffer that is offset from the start                  of another.                                      Satisfies the ConstBufferSequence        type requirements.              Requirements              Header: boost/asio/registered_buffer.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/const_registered_buffer.html
windows::basic_object_handlewindows::basic_object_handleHomeLibrariesPeopleFAQMorewindows::basic_object_handle                      Provides object-oriented handle functionality.      template&lt;    typename Executor = any_io_executor&gt;class basic_object_handle        Types                                        Name                                                                Description                                                                rebind_executor                                                                Rebinds the handle type to another executor.                                                                executor_type                                                                The type of the executor associated with the object.                                                                lowest_layer_type                                                                An object handle is always the lowest layer.                                                                native_handle_type                                                                The native representation of a handle.                                      Member        Functions                                        Name                                                                Description                                                                assign                                                                Assign an existing native handle to the handle.                                                                async_wait                                                                Start an asynchronous wait on the object handle.                                                                basic_object_handle [constructor]                                                                Construct an object handle without opening it.   â Construct                  an object handle on an existing native handle.   â Move-construct                  an object handle from another.   â Move-construct an                  object handle from a handle of another executor type.                                                                cancel                                                                Cancel all asynchronous operations associated with the handle.                                                                close                                                                Close the handle.                                                                get_executor                                                                Get the executor associated with the object.                                                                is_open                                                                Determine whether the handle is open.                                                                lowest_layer                                                                Get a reference to the lowest layer.   â Get a const                  reference to the lowest layer.                                                                native_handle                                                                Get the native handle representation.                                                                operator=                                                                Move-assign an object handle from another.   â Move-assign                  an object handle from a handle of another executor type.                                                                wait                                                                Perform a blocking wait on the object handle.                                      The windows::basic_object_handle class provides        asynchronous and blocking object-oriented handle functionality.              Thread        Safety              Distinct objects: Safe.              Shared objects: Unsafe.              Requirements              Header: boost/asio/windows/basic_object_handle.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/windows__basic_object_handle.html
this_coro::executor_tthis_coro::executor_tHomeLibrariesPeopleFAQMorethis_coro::executor_t                      Awaitable type that returns the executor of the current coroutine.      struct executor_t        Member        Functions                                        Name                                                                Description                                                                executor_t [constructor]                                                    Requirements              Header: boost/asio/this_coro.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/this_coro__executor_t.html
defer (2 of 3 overloads)defer (2 of 3 overloads)HomeLibrariesPeopleFAQMoredefer (2 of 3        overloads)          Submits a completion token or function object for execution.        template&lt;    typename Executor,    typename NullaryToken = DEFAULT&gt;DEDUCED defer(    const Executor &amp; ex,    NullaryToken &amp;&amp; token = DEFAULT,    typename constraint&lt; execution::is_executor&lt; Executor &gt;::value||is_executor&lt; Executor &gt;::value &gt;::type  = 0);          This function submits an object for execution using the specified executor.          The function object is queued for execution, and is never called from the          current thread prior to returning from defer().                  The use of defer(),          rather than post,          indicates the caller's preference that the executor defer the queueing          of the function object. This may allow the executor to optimise queueing          for cases when the function object represents a continuation of the current          call context.                  Parameters        ex                The target executor.              token                The completion                token that will be used to produce a completion handler. The                function signature of the completion handler must be:              void handler();          Return          Value                  This function returns async_initiate&lt;NullaryToken, void()&gt;(Init{ex}, token),          where Init is a function          object type defined as:        class Init{public:  using executor_type = Executor;  explicit Init(const Executor&amp; ex) : ex_(ex) {}  executor_type get_executor() const noexcept { return ex_; }  template &lt;typename CompletionHandler&gt;    void operator()(CompletionHandler&amp;&amp; completion_handler) const;private:  Executor ex_; // exposition only};          The function call operator of Init:                      Obtains the handler's associated executor object ex1              of type Ex1 by performing            auto ex1 = get_associated_executor(handler, ex);              Obtains the handler's associated allocator object alloc              by performing            auto alloc = get_associated_allocator(handler);              If execution::is_executor&lt;Ex1&gt;::value is true, constructs a function              object f with a member              executor_ that is initialised              with prefer(ex1, execution::outstanding_work.tracked),              a member handler_ that              is a decay-copy of completion_handler,              and a function call operator that performs:            auto a = get_associated_allocator(handler_);prefer(executor_, execution::allocator(a)).execute(std::move(handler_));              If execution::is_executor&lt;Ex1&gt;::value is false, constructs a function              object f with a member              work_ that is initialised              with make_work_guard(ex1), a member handler_              that is a decay-copy of completion_handler,              and a function call operator that performs:            auto a = get_associated_allocator(handler_);work_.get_executor().dispatch(std::move(handler_), a);work_.reset();              If execution::is_executor&lt;Ex&gt;::value is true, performs            prefer(    require(ex, execution::blocking.never),    execution::relationship.continuation,    execution::allocator(alloc)  ).execute(std::move(f));              If execution::is_executor&lt;Ex&gt;::value is false, performs            ex.defer(std::move(f), alloc);          Completion          Signature        void()Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/defer/overload2.html
defer (3 of 3 overloads)defer (3 of 3 overloads)HomeLibrariesPeopleFAQMoredefer (3 of 3        overloads)          Submits a completion token or function object for execution.        template&lt;    typename ExecutionContext,    typename NullaryToken = DEFAULT&gt;DEDUCED defer(    ExecutionContext &amp; ctx,    NullaryToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);          Parameters        ctx                An execution context, from which the target executor is obtained.              token                The completion                token that will be used to produce a completion handler. The                function signature of the completion handler must be:              void handler();          Return          Value                  defer(ctx.get_executor(),          forward&lt;NullaryToken&gt;(token)).                  Completion          Signature        void()Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/defer/overload3.html
defer (1 of 3 overloads)defer (1 of 3 overloads)HomeLibrariesPeopleFAQMoredefer (1 of 3        overloads)          Submits a completion token or function object for execution.        template&lt;    typename NullaryToken&gt;DEDUCED defer(    NullaryToken &amp;&amp; token);          This function submits an object for execution using the object's associated          executor. The function object is queued for execution, and is never called          from the current thread prior to returning from defer().                  The use of defer(),          rather than post,          indicates the caller's preference that the executor defer the queueing          of the function object. This may allow the executor to optimise queueing          for cases when the function object represents a continuation of the current          call context.                  Parameters        token                The completion                token that will be used to produce a completion handler. The                function signature of the completion handler must be:              void handler();          Return          Value                  This function returns async_initiate&lt;NullaryToken, void()&gt;(Init{}, token),          where Init is a function          object type defined as:        class Init{public:  template &lt;typename CompletionHandler&gt;    void operator()(CompletionHandler&amp;&amp; completion_handler) const;};          The function call operator of Init:                      Obtains the handler's associated executor object ex              of type Ex by performing            auto ex = get_associated_executor(handler);              Obtains the handler's associated allocator object alloc              by performing            auto alloc = get_associated_allocator(handler);              If execution::is_executor&lt;Ex&gt;::value is true, performs            prefer(    require(ex, execution::blocking.never),    execution::relationship.continuation,    execution::allocator(alloc)  ).execute(std::forward&lt;CompletionHandler&gt;(completion_handler));              If execution::is_executor&lt;Ex&gt;::value is false, performs            ex.defer(    std::forward&lt;CompletionHandler&gt;(completion_handler),    alloc);          Completion          Signature        void()Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/defer/overload1.html
execution::mapping_t::new_thread_texecution::mapping_t::new_thread_tHomeLibrariesPeopleFAQMoreexecution::mapping_t::new_thread_t                      A sub-property that indicates that execution agents are mapped on to new        threads of execution.      struct new_thread_t        Types                                        Name                                                                Description                                                                polymorphic_query_result_type                                                                The type returned by queries against an any_executor.                                      Member        Functions                                        Name                                                                Description                                                                new_thread_t [constructor]                                                                Default constructor.                                                                value [static]                                                                Get the value associated with a property object.                                      Data        Members                                        Name                                                                Description                                                                is_applicable_property_v [static]                                                                The mapping_t::new_thread_t property applies to executors, senders,                  and schedulers.                                                                is_preferable [static]                                                                The mapping_t::new_thread_t property can be preferred.                                                                is_requirable [static]                                                                The mapping_t::new_thread_t property can be required.                                      Requirements              Header: boost/asio/execution/mapping.hpp              Convenience header: boost/asio/execution.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/execution__mapping_t__new_thread_t.html
this_coro::cancellation_state_tthis_coro::cancellation_state_tHomeLibrariesPeopleFAQMorethis_coro::cancellation_state_t                      Awaitable type that returns the cancellation state of the current coroutine.      struct cancellation_state_t        Member        Functions                                        Name                                                                Description                                                                cancellation_state_t [constructor]                                                    Requirements              Header: boost/asio/this_coro.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/this_coro__cancellation_state_t.html
as_tuple_t::default_constructor_tagas_tuple_t::default_constructor_tagHomeLibrariesPeopleFAQMoreas_tuple_t::default_constructor_tag                      Tag type used to prevent the "default" constructor from being used        for conversions.      struct default_constructor_tag        Requirements              Header: boost/asio/as_tuple.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/as_tuple_t__default_constructor_tag.html
ssl::stream_base::~stream_basessl::stream_base::~stream_baseHomeLibrariesPeopleFAQMoressl::stream_base::~stream_base           Protected          destructor to prevent deletion through this type.        ~stream_base();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/ssl__stream_base/_stream_base.html
ssl::stream_base::handshake_typessl::stream_base::handshake_typeHomeLibrariesPeopleFAQMoressl::stream_base::handshake_type           Different          handshake types.        enum handshake_type                             Values        client                Perform handshaking as a client.              server                Perform handshaking as a server.              Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/ssl__stream_base/handshake_type.html
execution::can_set_valueexecution::can_set_valueHomeLibrariesPeopleFAQMoreexecution::can_set_value                      A type trait that determines whether a set_value        expression is well-formed.      template&lt;    typename R,    typename... Vs&gt;struct can_set_value        Class template can_set_value        is a trait that is derived from true_type        if the expression execution::set_value(std::declval&lt;R&gt;(), std::declval&lt;Vs&gt;()...) is well formed; otherwise false_type.              Requirements              Header: boost/asio/execution/set_value.hpp              Convenience header: boost/asio/execution.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/execution__can_set_value.html
error::netdb_categoryerror::netdb_categoryHomeLibrariesPeopleFAQMoreerror::netdb_category              static const boost::system::error_category &amp; netdb_category = boost::asio::error::get_netdb_category();        Requirements              Header: boost/asio/error.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/error__netdb_category.html
local::connect_pairlocal::connect_pairHomeLibrariesPeopleFAQMorelocal::connect_pair                      Create a pair of connected sockets.      template&lt;    typename Protocol,    typename Executor1,    typename Executor2&gt;void connect_pair(    basic_socket&lt; Protocol, Executor1 &gt; &amp; socket1,    basic_socket&lt; Protocol, Executor2 &gt; &amp; socket2);  Â» more...template&lt;    typename Protocol,    typename Executor1,    typename Executor2&gt;void connect_pair(    basic_socket&lt; Protocol, Executor1 &gt; &amp; socket1,    basic_socket&lt; Protocol, Executor2 &gt; &amp; socket2,    boost::system::error_code &amp; ec);  Â» more...        Requirements              Header: boost/asio/local/connect_pair.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/local__connect_pair.html
awaitableawaitableHomeLibrariesPeopleFAQMoreawaitable                      The return type of a coroutine or asynchronous operation.      template&lt;    typename T,    typename Executor = any_io_executor&gt;class awaitable        Types                                        Name                                                                Description                                                                executor_type                                                                The executor type that will be used for the coroutine.                                                                value_type                                                                The type of the awaited value.                                      Member        Functions                                        Name                                                                Description                                                                awaitable [constructor]                                                                Default constructor.   â Move constructor.                                                                operator=                                                                Move assignment.                                                                valid                                                                Checks if the awaitable refers to a future result.                                                                ~awaitable [destructor]                                                                Destructor.                                      Requirements              Header: boost/asio/awaitable.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/awaitable.html
experimental::as_single_t::executor_with_default::executor_with_default (2 of 2 overloads)experimental::as_single_t::executor_with_default::executor_with_default (2 of 2 overloads)HomeLibrariesPeopleFAQMoreexperimental::as_single_t::executor_with_default::executor_with_default          (2 of 2 overloads)            Convert the specified executor to the inner executor type, then use that            to construct the adapted executor.          template&lt;    typename OtherExecutor&gt;executor_with_default(    const OtherExecutor &amp; ex,    typename constraint&lt; is_convertible&lt; OtherExecutor, InnerExecutor &gt;::value &gt;::type  = 0);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/experimental__as_single_t__executor_with_default/executor_with_default/overload2.html
experimental::as_single_t::executor_with_default::executor_with_default (1 of 2 overloads)experimental::as_single_t::executor_with_default::executor_with_default (1 of 2 overloads)HomeLibrariesPeopleFAQMoreexperimental::as_single_t::executor_with_default::executor_with_default          (1 of 2 overloads)            Construct the adapted executor from the inner executor type.          executor_with_default(    const InnerExecutor &amp; ex);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/experimental__as_single_t__executor_with_default/executor_with_default/overload1.html
experimental::as_single_t::executor_with_default::executor_with_defaultexperimental::as_single_t::executor_with_default::executor_with_defaultHomeLibrariesPeopleFAQMoreexperimental::as_single_t::executor_with_default::executor_with_default           Construct          the adapted executor from the inner executor type.        executor_with_default(    const InnerExecutor &amp; ex);  Â» more...          Convert the specified executor to the inner executor type, then use that          to construct the adapted executor.        template&lt;    typename OtherExecutor&gt;executor_with_default(    const OtherExecutor &amp; ex,    typename constraint&lt; is_convertible&lt; OtherExecutor, InnerExecutor &gt;::value &gt;::type  = 0);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/experimental__as_single_t__executor_with_default/executor_with_default.html
experimental::as_single_t::executor_with_default::default_completion_token_typeexperimental::as_single_t::executor_with_default::default_completion_token_typeHomeLibrariesPeopleFAQMoreexperimental::as_single_t::executor_with_default::default_completion_token_type           Specify          as_single_t as the default          completion token type.        typedef as_single_t default_completion_token_type;          Types                                              Name                                                                        Description                                                                        default_constructor_tag                                                                        Tag type used to prevent the "default" constructor                    from being used for conversions.                                                                        executor_with_default                                                                        Adapts an executor to add the as_single_t completion token as                    the default.                                            Member          Functions                                              Name                                                                        Description                                                                        as_default_on [static]                                                                        Function helper to adapt an I/O object to use as_single_t as                    its default completion token type.                                                                        as_single_t [constructor]                                                                        Default constructor.   â Constructor.                                            Data          Members                                              Name                                                                        Description                                                                        token_                                                            The experimental::as_single_t class is used to indicate          that any arguments to the completion handler should be combined and passed          as a single argument. If there is already one argument, that argument is          passed as-is. If there is more than argument, the arguments are first moved          into a std::tuple and that tuple is then passed to          the completion handler.                  Requirements                  Header: boost/asio/experimental/as_single.hpp                  Convenience header: None        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/experimental__as_single_t__executor_with_default/default_completion_token_type.html
register_buffersregister_buffersHomeLibrariesPeopleFAQMoreregister_buffers                      Register buffers with an execution context.      template&lt;    typename Executor,    typename MutableBufferSequence&gt;buffer_registration&lt; MutableBufferSequence &gt; register_buffers(    const Executor &amp; ex,    const MutableBufferSequence &amp; buffer_sequence,    typename constraint&lt; is_executor&lt; Executor &gt;::value||execution::is_executor&lt; Executor &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename Executor,    typename MutableBufferSequence,    typename Allocator&gt;buffer_registration&lt; MutableBufferSequence, Allocator &gt; register_buffers(    const Executor &amp; ex,    const MutableBufferSequence &amp; buffer_sequence,    const Allocator &amp; alloc,    typename constraint&lt; is_executor&lt; Executor &gt;::value||execution::is_executor&lt; Executor &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename ExecutionContext,    typename MutableBufferSequence&gt;buffer_registration&lt; MutableBufferSequence &gt; register_buffers(    ExecutionContext &amp; ctx,    const MutableBufferSequence &amp; buffer_sequence,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename ExecutionContext,    typename MutableBufferSequence,    typename Allocator&gt;buffer_registration&lt; MutableBufferSequence, Allocator &gt; register_buffers(    ExecutionContext &amp; ctx,    const MutableBufferSequence &amp; buffer_sequence,    const Allocator &amp; alloc,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  Â» more...        Requirements              Header: boost/asio/buffer_registration.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/register_buffers.html
execution::invocable_archetype::operator()execution::invocable_archetype::operator()HomeLibrariesPeopleFAQMoreexecution::invocable_archetype::operator()           Function          call operator.        template&lt;    typename... Args&gt;void operator()(    Args &amp;&amp; ...);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/execution__invocable_archetype/operator_lp__rp_.html
basic_signal_set::rebind_executor::otherbasic_signal_set::rebind_executor::otherHomeLibrariesPeopleFAQMorebasic_signal_set::rebind_executor::other           The          signal set type when rebound to the specified executor.        typedef basic_signal_set&lt; Executor1 &gt; other;          Types                                              Name                                                                        Description                                                                        rebind_executor                                                                        Rebinds the signal set type to another executor.                                                                        executor_type                                                                        The type of the executor associated with the object.                                            Member          Functions                                              Name                                                                        Description                                                                        add                                                                        Add a signal to a signal_set.                                                                        async_wait                                                                        Start an asynchronous operation to wait for a signal to be delivered.                                                                        basic_signal_set [constructor]                                                                        Construct a signal set without adding any signals.   â                    Construct a signal set and add one signal.   â Construct                    a signal set and add two signals.   â Construct a signal                    set and add three signals.                                                                        cancel                                                                        Cancel all operations associated with the signal set.                                                                        clear                                                                        Remove all signals from a signal_set.                                                                        get_executor                                                                        Get the executor associated with the object.                                                                        remove                                                                        Remove a signal from a signal_set.                                                                        ~basic_signal_set [destructor]                                                                        Destroys the signal set.                                            The basic_signal_set class provides          the ability to perform an asynchronous wait for one or more signals to          occur.                  Thread          Safety                  Distinct objects: Safe.                  Shared objects: Unsafe.                  Example                  Performing an asynchronous wait:        void handler(    const boost::system::error_code&amp; error,    int signal_number){  if (!error)  {    // A signal occurred.  }}...// Construct a signal set registered for process termination.boost::asio::signal_set signals(my_context, SIGINT, SIGTERM);// Start an asynchronous wait for one of the signals to occur.signals.async_wait(handler);          Queueing          of signal notifications                  If a signal is registered with a signal_set, and the signal occurs when          there are no waiting handlers, then the signal notification is queued.          The next async_wait operation on that signal_set will dequeue the notification.          If multiple notifications are queued, subsequent async_wait operations          dequeue them one at a time. Signal notifications are dequeued in order          of ascending signal number.                  If a signal number is removed from a signal_set (using the remove or erase          member functions) then any queued notifications for that signal are discarded.                  Multiple          registration of signals                  The same signal number may be registered with different signal_set objects.          When the signal occurs, one handler is called for each signal_set object.                  Note that multiple registration only works for signals that are registered          using Asio. The application must not also register a signal handler using          functions such as signal() or sigaction().                  Signal          masking on POSIX platforms                  POSIX allows signals to be blocked using functions such as sigprocmask()          and pthread_sigmask().          For signals to be delivered, programs must ensure that any signals registered          using signal_set objects are unblocked in at least one thread.                  Requirements                  Header: boost/asio/basic_signal_set.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_signal_set__rebind_executor/other.html
ssl::verify_contextssl::verify_contextHomeLibrariesPeopleFAQMoressl::verify_context                      A simple wrapper around the X509_STORE_CTX type, used during verification        of a peer certificate.      class verify_context :  noncopyable        Types                                        Name                                                                Description                                                                native_handle_type                                                                The native handle type of the verification context.                                      Member        Functions                                        Name                                                                Description                                                                native_handle                                                                Get the underlying implementation in the native type.                                                                verify_context [constructor]                                                                Constructor.                                      Remarks              The ssl::verify_context        does not own the underlying X509_STORE_CTX object.              Requirements              Header: boost/asio/ssl/verify_context.hpp              Convenience header: boost/asio/ssl.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/ssl__verify_context.html
basic_socket::remote_endpoint (2 of 2 overloads)basic_socket::remote_endpoint (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::remote_endpoint          (2 of 2 overloads)            Get the remote endpoint of the socket.          endpoint_type remote_endpoint(    boost::system::error_code &amp; ec) const;            This function is used to obtain the remote endpoint of the socket.                      Parameters          ec                  Set to indicate what error occurred, if any.                            Return            Value                      An object that represents the remote endpoint of the socket. Returns            a default-constructed endpoint object if an error occurred.                      Example          boost::asio::ip::tcp::socket socket(my_context);...boost::system::error_code ec;boost::asio::ip::tcp::endpoint endpoint = socket.remote_endpoint(ec);if (ec){  // An error occurred.}Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/remote_endpoint/overload2.html
basic_socket::remote_endpoint (1 of 2 overloads)basic_socket::remote_endpoint (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::remote_endpoint          (1 of 2 overloads)            Get the remote endpoint of the socket.          endpoint_type remote_endpoint() const;            This function is used to obtain the remote endpoint of the socket.                      Return            Value                      An object that represents the remote endpoint of the socket.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::socket socket(my_context);...boost::asio::ip::tcp::endpoint endpoint = socket.remote_endpoint();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/remote_endpoint/overload1.html
basic_socket::basic_socket (4 of 10 overloads)basic_socket::basic_socket (4 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket::basic_socket          (4 of 10 overloads)            Construct and open a basic_socket.          template&lt;    typename ExecutionContext&gt;basic_socket(    ExecutionContext &amp; context,    const protocol_type &amp; protocol,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());            This constructor creates and opens a socket.                      Parameters          context                  An execution context which provides the I/O executor that the socket                  will use, by default, to dispatch handlers for any asynchronous                  operations performed on the socket.                protocol                  An object specifying protocol parameters to be used.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/basic_socket/overload4.html
basic_socket::basic_socket (10 of 10 overloads)basic_socket::basic_socket (10 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket::basic_socket          (10 of 10 overloads)            Move-construct a basic_socket from a socket of            another protocol type.          template&lt;    typename Protocol1,    typename Executor1&gt;basic_socket(    basic_socket&lt; Protocol1, Executor1 &gt; &amp;&amp; other,    typename constraint&lt; is_convertible&lt; Protocol1, Protocol &gt;::value &amp;&amp;is_convertible&lt; Executor1, Executor &gt;::value &gt;::type  = 0);            This constructor moves a socket from one object to another.                      Parameters          other                  The other basic_socket object from                  which the move will occur.                            Remarks                      Following the move, the moved-from object is in the same state as if            constructed using the basic_socket(const executor_type&amp;)            constructor.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/basic_socket/overload10.html
basic_socket::basic_socket (7 of 10 overloads)basic_socket::basic_socket (7 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket::basic_socket          (7 of 10 overloads)            Construct a basic_socket on an existing            native socket.          basic_socket(    const executor_type &amp; ex,    const protocol_type &amp; protocol,    const native_handle_type &amp; native_socket);            This constructor creates a socket object to hold an existing native socket.                      Parameters          ex                  The I/O executor that the socket will use, by default, to dispatch                  handlers for any asynchronous operations performed on the socket.                protocol                  An object specifying protocol parameters to be used.                native_socket                  A native socket.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/basic_socket/overload7.html
basic_socket::basic_socket (2 of 10 overloads)basic_socket::basic_socket (2 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket::basic_socket          (2 of 10 overloads)            Construct a basic_socket without opening            it.          template&lt;    typename ExecutionContext&gt;basic_socket(    ExecutionContext &amp; context,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);            This constructor creates a socket without opening it.                      Parameters          context                  An execution context which provides the I/O executor that the socket                  will use, by default, to dispatch handlers for any asynchronous                  operations performed on the socket.                Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/basic_socket/overload2.html
basic_socket::basic_socket (3 of 10 overloads)basic_socket::basic_socket (3 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket::basic_socket          (3 of 10 overloads)            Construct and open a basic_socket.          basic_socket(    const executor_type &amp; ex,    const protocol_type &amp; protocol);            This constructor creates and opens a socket.                      Parameters          ex                  The I/O executor that the socket will use, by default, to dispatch                  handlers for any asynchronous operations performed on the socket.                protocol                  An object specifying protocol parameters to be used.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/basic_socket/overload3.html
basic_socket::basic_socket (8 of 10 overloads)basic_socket::basic_socket (8 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket::basic_socket          (8 of 10 overloads)            Construct a basic_socket on an existing            native socket.          template&lt;    typename ExecutionContext&gt;basic_socket(    ExecutionContext &amp; context,    const protocol_type &amp; protocol,    const native_handle_type &amp; native_socket,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);            This constructor creates a socket object to hold an existing native socket.                      Parameters          context                  An execution context which provides the I/O executor that the socket                  will use, by default, to dispatch handlers for any asynchronous                  operations performed on the socket.                protocol                  An object specifying protocol parameters to be used.                native_socket                  A native socket.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/basic_socket/overload8.html
basic_socket::basic_socket (6 of 10 overloads)basic_socket::basic_socket (6 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket::basic_socket          (6 of 10 overloads)            Construct a basic_socket, opening it and            binding it to the given local endpoint.          template&lt;    typename ExecutionContext&gt;basic_socket(    ExecutionContext &amp; context,    const endpoint_type &amp; endpoint,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);            This constructor creates a socket and automatically opens it bound to            the specified endpoint on the local machine. The protocol used is the            protocol associated with the given endpoint.                      Parameters          context                  An execution context which provides the I/O executor that the socket                  will use, by default, to dispatch handlers for any asynchronous                  operations performed on the socket.                endpoint                  An endpoint on the local machine to which the socket will be bound.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/basic_socket/overload6.html
basic_socket::basic_socket (9 of 10 overloads)basic_socket::basic_socket (9 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket::basic_socket          (9 of 10 overloads)            Move-construct a basic_socket from another.          basic_socket(    basic_socket &amp;&amp; other);            This constructor moves a socket from one object to another.                      Parameters          other                  The other basic_socket object from                  which the move will occur.                            Remarks                      Following the move, the moved-from object is in the same state as if            constructed using the basic_socket(const executor_type&amp;)            constructor.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/basic_socket/overload9.html
basic_socket::basic_socket (1 of 10 overloads)basic_socket::basic_socket (1 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket::basic_socket          (1 of 10 overloads)            Construct a basic_socket without opening            it.          basic_socket(    const executor_type &amp; ex);            This constructor creates a socket without opening it.                      Parameters          ex                  The I/O executor that the socket will use, by default, to dispatch                  handlers for any asynchronous operations performed on the socket.                Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/basic_socket/overload1.html
basic_socket::basic_socket (5 of 10 overloads)basic_socket::basic_socket (5 of 10 overloads)HomeLibrariesPeopleFAQMorebasic_socket::basic_socket          (5 of 10 overloads)            Construct a basic_socket, opening it and            binding it to the given local endpoint.          basic_socket(    const executor_type &amp; ex,    const endpoint_type &amp; endpoint);            This constructor creates a socket and automatically opens it bound to            the specified endpoint on the local machine. The protocol used is the            protocol associated with the given endpoint.                      Parameters          ex                  The I/O executor that the socket will use, by default, to dispatch                  handlers for any asynchronous operations performed on the socket.                endpoint                  An endpoint on the local machine to which the socket will be bound.                            Exceptions          boost::system::system_error                  Thrown on failure.                Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/basic_socket/overload5.html
basic_socket::async_connectbasic_socket::async_connectHomeLibrariesPeopleFAQMorebasic_socket::async_connect           Start          an asynchronous connect.        template&lt;    typename ConnectToken = DEFAULT&gt;DEDUCED async_connect(    const endpoint_type &amp; peer_endpoint,    ConnectToken &amp;&amp; token = DEFAULT);          This function is used to asynchronously connect a socket to the specified          remote endpoint. It is an initiating function for an asynchronous          operation, and always returns immediately.                  The socket is automatically opened if it is not already open. If the connect          fails, and the socket was automatically opened, the socket is not returned          to the closed state.                  Parameters        peer_endpoint                The remote endpoint to which the socket will be connected. Copies                will be made of the endpoint object as required.              token                The completion                token that will be used to produce a completion handler, which                will be called when the connect completes. Potential completion tokens                include use_future, use_awaitable, yield_context, or a function                object with the correct completion signature. The function signature                of the completion handler must be:              void handler(  const boost::system::error_code&amp; error // Result of operation.);                Regardless of whether the asynchronous operation completes immediately                or not, the completion handler will not be invoked from within this                function. On immediate completion, invocation of the handler will                be performed in a manner equivalent to using post.                        Completion          Signature        void(boost::system::error_code)          Example        void connect_handler(const boost::system::error_code&amp; error){  if (!error)  {    // Connect succeeded.  }}...boost::asio::ip::tcp::socket socket(my_context);boost::asio::ip::tcp::endpoint endpoint(    boost::asio::ip::address::from_string("1.2.3.4"), 12345);socket.async_connect(endpoint, connect_handler);          Per-Operation          Cancellation                  On POSIX or Windows operating systems, this asynchronous operation supports          cancellation for the following cancellation_type values:                      cancellation_type::terminal                          cancellation_type::partial                          cancellation_type::total            Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/async_connect.html
basic_socket::native_handle_typebasic_socket::native_handle_typeHomeLibrariesPeopleFAQMorebasic_socket::native_handle_type           The          native representation of a socket.        typedef implementation_defined native_handle_type;          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/native_handle_type.html
basic_socket::at_mark (2 of 2 overloads)basic_socket::at_mark (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::at_mark          (2 of 2 overloads)            Determine whether the socket is at the out-of-band data mark.          bool at_mark(    boost::system::error_code &amp; ec) const;            This function is used to check whether the socket input is currently            positioned at the out-of-band data mark.                      Parameters          ec                  Set to indicate what error occurred, if any.                            Return            Value                      A bool indicating whether the socket is at the out-of-band data mark.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/at_mark/overload2.html
basic_socket::at_mark (1 of 2 overloads)basic_socket::at_mark (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::at_mark          (1 of 2 overloads)            Determine whether the socket is at the out-of-band data mark.          bool at_mark() const;            This function is used to check whether the socket input is currently            positioned at the out-of-band data mark.                      Return            Value                      A bool indicating whether the socket is at the out-of-band data mark.                      Exceptions          boost::system::system_error                  Thrown on failure.                Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/at_mark/overload1.html
basic_socket::executor_typebasic_socket::executor_typeHomeLibrariesPeopleFAQMorebasic_socket::executor_type           The          type of the executor associated with the object.        typedef Executor executor_type;          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/executor_type.html
basic_socket::~basic_socketbasic_socket::~basic_socketHomeLibrariesPeopleFAQMorebasic_socket::~basic_socket           Protected          destructor to prevent deletion through this type.        ~basic_socket();          This function destroys the socket, cancelling any outstanding asynchronous          operations associated with the socket as if by calling cancel.        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/_basic_socket.html
basic_socket::basic_socketbasic_socket::basic_socketHomeLibrariesPeopleFAQMorebasic_socket::basic_socket           Construct          a basic_socket          without opening it.        explicit basic_socket(    const executor_type &amp; ex);  Â» more...template&lt;    typename ExecutionContext&gt;explicit basic_socket(    ExecutionContext &amp; context,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  Â» more...          Construct and open a basic_socket.        basic_socket(    const executor_type &amp; ex,    const protocol_type &amp; protocol);  Â» more...template&lt;    typename ExecutionContext&gt;basic_socket(    ExecutionContext &amp; context,    const protocol_type &amp; protocol,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value, defaulted_constraint &gt;::type  = defaulted_constraint());  Â» more...          Construct a basic_socket, opening it and binding          it to the given local endpoint.        basic_socket(    const executor_type &amp; ex,    const endpoint_type &amp; endpoint);  Â» more...template&lt;    typename ExecutionContext&gt;basic_socket(    ExecutionContext &amp; context,    const endpoint_type &amp; endpoint,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  Â» more...          Construct a basic_socket on an existing native          socket.        basic_socket(    const executor_type &amp; ex,    const protocol_type &amp; protocol,    const native_handle_type &amp; native_socket);  Â» more...template&lt;    typename ExecutionContext&gt;basic_socket(    ExecutionContext &amp; context,    const protocol_type &amp; protocol,    const native_handle_type &amp; native_socket,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  Â» more...          Move-construct a basic_socket from another.        basic_socket(    basic_socket &amp;&amp; other);  Â» more...          Move-construct a basic_socket from a socket of          another protocol type.        template&lt;    typename Protocol1,    typename Executor1&gt;basic_socket(    basic_socket&lt; Protocol1, Executor1 &gt; &amp;&amp; other,    typename constraint&lt; is_convertible&lt; Protocol1, Protocol &gt;::value &amp;&amp;is_convertible&lt; Executor1, Executor &gt;::value &gt;::type  = 0);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/basic_socket.html
basic_socket::get_option (2 of 2 overloads)basic_socket::get_option (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::get_option          (2 of 2 overloads)            Get an option from the socket.          template&lt;    typename GettableSocketOption&gt;void get_option(    GettableSocketOption &amp; option,    boost::system::error_code &amp; ec) const;            This function is used to get the current value of an option on the socket.                      Parameters          option                  The option value to be obtained from the socket.                ec                  Set to indicate what error occurred, if any.                            Example                      Getting the value of the SOL_SOCKET/SO_KEEPALIVE option:          boost::asio::ip::tcp::socket socket(my_context);...boost::asio::ip::tcp::socket::keep_alive option;boost::system::error_code ec;socket.get_option(option, ec);if (ec){  // An error occurred.}bool is_set = option.value();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/get_option/overload2.html
basic_socket::get_option (1 of 2 overloads)basic_socket::get_option (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::get_option          (1 of 2 overloads)            Get an option from the socket.          template&lt;    typename GettableSocketOption&gt;void get_option(    GettableSocketOption &amp; option) const;            This function is used to get the current value of an option on the socket.                      Parameters          option                  The option value to be obtained from the socket.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example                      Getting the value of the SOL_SOCKET/SO_KEEPALIVE option:          boost::asio::ip::tcp::socket socket(my_context);...boost::asio::ip::tcp::socket::keep_alive option;socket.get_option(option);bool is_set = option.value();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/get_option/overload1.html
basic_socket::shutdown (2 of 2 overloads)basic_socket::shutdown (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::shutdown          (2 of 2 overloads)            Disable sends or receives on the socket.          void shutdown(    shutdown_type what,    boost::system::error_code &amp; ec);            This function is used to disable send operations, receive operations,            or both.                      Parameters          what                  Determines what types of operation will no longer be allowed.                ec                  Set to indicate what error occurred, if any.                            Example                      Shutting down the send side of the socket:          boost::asio::ip::tcp::socket socket(my_context);...boost::system::error_code ec;socket.shutdown(boost::asio::ip::tcp::socket::shutdown_send, ec);if (ec){  // An error occurred.}Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/shutdown/overload2.html
basic_socket::shutdown (1 of 2 overloads)basic_socket::shutdown (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::shutdown          (1 of 2 overloads)            Disable sends or receives on the socket.          void shutdown(    shutdown_type what);            This function is used to disable send operations, receive operations,            or both.                      Parameters          what                  Determines what types of operation will no longer be allowed.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example                      Shutting down the send side of the socket:          boost::asio::ip::tcp::socket socket(my_context);...socket.shutdown(boost::asio::ip::tcp::socket::shutdown_send);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/shutdown/overload1.html
basic_socket::release (2 of 2 overloads)basic_socket::release (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::release          (2 of 2 overloads)            Release ownership of the underlying native socket.          native_handle_type release(    boost::system::error_code &amp; ec);            This function causes all outstanding asynchronous connect, send and receive            operations to finish immediately, and the handlers for cancelled operations            will be passed the boost::asio::error::operation_aborted            error. Ownership of the native socket is then transferred to the caller.                      Parameters          ec                  Set to indicate what error occurred, if any.                            Remarks                      This function is unsupported on Windows versions prior to Windows 8.1,            and will fail with boost::asio::error::operation_not_supported            on these platforms.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/release/overload2.html
basic_socket::release (1 of 2 overloads)basic_socket::release (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::release          (1 of 2 overloads)            Release ownership of the underlying native socket.          native_handle_type release();            This function causes all outstanding asynchronous connect, send and receive            operations to finish immediately, and the handlers for cancelled operations            will be passed the boost::asio::error::operation_aborted            error. Ownership of the native socket is then transferred to the caller.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Remarks                      This function is unsupported on Windows versions prior to Windows 8.1,            and will fail with boost::asio::error::operation_not_supported            on these platforms.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/release/overload1.html
basic_socket::native_handlebasic_socket::native_handleHomeLibrariesPeopleFAQMorebasic_socket::native_handle           Get          the native socket representation.        native_handle_type native_handle();          This function may be used to obtain the underlying representation of the          socket. This is intended to allow access to native socket functionality          that is not otherwise provided.        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/native_handle.html
basic_socket::lowest_layerbasic_socket::lowest_layerHomeLibrariesPeopleFAQMorebasic_socket::lowest_layer           Get          a reference to the lowest layer.        lowest_layer_type &amp; lowest_layer();  Â» more...          Get a const reference to the lowest layer.        const lowest_layer_type &amp; lowest_layer() const;  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/lowest_layer.html
basic_socket::message_out_of_bandbasic_socket::message_out_of_bandHomeLibrariesPeopleFAQMorebasic_socket::message_out_of_band          Inherited from socket_base.                   Process          out-of-band data.        static const int message_out_of_band = implementation_defined;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/message_out_of_band.html
basic_socket::bytes_readablebasic_socket::bytes_readableHomeLibrariesPeopleFAQMorebasic_socket::bytes_readable          Inherited from socket_base.                   IO          control command to get the amount of data that can be read without blocking.        typedef implementation_defined bytes_readable;          Implements the FIONREAD IO control command.                  Example        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::bytes_readable command(true);socket.io_control(command);std::size_t bytes_readable = command.get();          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/bytes_readable.html
basic_socket::closebasic_socket::closeHomeLibrariesPeopleFAQMorebasic_socket::close           Close the socket.        void close();  Â» more...void close(    boost::system::error_code &amp; ec);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/close.html
basic_socket::io_controlbasic_socket::io_controlHomeLibrariesPeopleFAQMorebasic_socket::io_control           Perform          an IO control command on the socket.        template&lt;    typename IoControlCommand&gt;void io_control(    IoControlCommand &amp; command);  Â» more...template&lt;    typename IoControlCommand&gt;void io_control(    IoControlCommand &amp; command,    boost::system::error_code &amp; ec);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/io_control.html
basic_socket::native_non_blocking (2 of 3 overloads)basic_socket::native_non_blocking (2 of 3 overloads)HomeLibrariesPeopleFAQMorebasic_socket::native_non_blocking          (2 of 3 overloads)            Sets the non-blocking mode of the native socket implementation.          void native_non_blocking(    bool mode);            This function is used to modify the non-blocking mode of the underlying            native socket. It has no effect on the behaviour of the socket object's            synchronous operations.                      Parameters          mode                  If true, the underlying                  socket is put into non-blocking mode and direct system calls may                  fail with boost::asio::error::would_block                  (or the equivalent system error).                            Exceptions          boost::system::system_error                  Thrown on failure. If the mode                  is false, but the                  current value of non_blocking() is true,                  this function fails with boost::asio::error::invalid_argument,                  as the combination does not make sense.                            Example                      This function is intended to allow the encapsulation of arbitrary non-blocking            system calls as asynchronous operations, in a way that is transparent            to the user of the socket object. The following example illustrates how            Linux's sendfile system            call might be encapsulated:          template &lt;typename Handler&gt;struct sendfile_op{  tcp::socket&amp; sock_;  int fd_;  Handler handler_;  off_t offset_;  std::size_t total_bytes_transferred_;  // Function call operator meeting WriteHandler requirements.  // Used as the handler for the async_write_some operation.  void operator()(boost::system::error_code ec, std::size_t)  {    // Put the underlying socket into non-blocking mode.    if (!ec)      if (!sock_.native_non_blocking())        sock_.native_non_blocking(true, ec);    if (!ec)    {      for (;;)      {        // Try the system call.        errno = 0;        int n = ::sendfile(sock_.native_handle(), fd_, &amp;offset_, 65536);        ec = boost::system::error_code(n &lt; 0 ? errno : 0,            boost::asio::error::get_system_category());        total_bytes_transferred_ += ec ? 0 : n;        // Retry operation immediately if interrupted by signal.        if (ec == boost::asio::error::interrupted)          continue;        // Check if we need to run the operation again.        if (ec == boost::asio::error::would_block            || ec == boost::asio::error::try_again)        {          // We have to wait for the socket to become ready again.          sock_.async_wait(tcp::socket::wait_write, *this);          return;        }        if (ec || n == 0)        {          // An error occurred, or we have reached the end of the file.          // Either way we must exit the loop so we can call the handler.          break;        }        // Loop around to try calling sendfile again.      }    }    // Pass result back to user's handler.    handler_(ec, total_bytes_transferred_);  }};template &lt;typename Handler&gt;void async_sendfile(tcp::socket&amp; sock, int fd, Handler h){  sendfile_op&lt;Handler&gt; op = { sock, fd, h, 0, 0 };  sock.async_wait(tcp::socket::wait_write, op);}Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/native_non_blocking/overload2.html
basic_socket::native_non_blocking (3 of 3 overloads)basic_socket::native_non_blocking (3 of 3 overloads)HomeLibrariesPeopleFAQMorebasic_socket::native_non_blocking          (3 of 3 overloads)            Sets the non-blocking mode of the native socket implementation.          void native_non_blocking(    bool mode,    boost::system::error_code &amp; ec);            This function is used to modify the non-blocking mode of the underlying            native socket. It has no effect on the behaviour of the socket object's            synchronous operations.                      Parameters          mode                  If true, the underlying                  socket is put into non-blocking mode and direct system calls may                  fail with boost::asio::error::would_block                  (or the equivalent system error).                ec                  Set to indicate what error occurred, if any. If the mode is false,                  but the current value of non_blocking() is true,                  this function fails with boost::asio::error::invalid_argument,                  as the combination does not make sense.                            Example                      This function is intended to allow the encapsulation of arbitrary non-blocking            system calls as asynchronous operations, in a way that is transparent            to the user of the socket object. The following example illustrates how            Linux's sendfile system            call might be encapsulated:          template &lt;typename Handler&gt;struct sendfile_op{  tcp::socket&amp; sock_;  int fd_;  Handler handler_;  off_t offset_;  std::size_t total_bytes_transferred_;  // Function call operator meeting WriteHandler requirements.  // Used as the handler for the async_write_some operation.  void operator()(boost::system::error_code ec, std::size_t)  {    // Put the underlying socket into non-blocking mode.    if (!ec)      if (!sock_.native_non_blocking())        sock_.native_non_blocking(true, ec);    if (!ec)    {      for (;;)      {        // Try the system call.        errno = 0;        int n = ::sendfile(sock_.native_handle(), fd_, &amp;offset_, 65536);        ec = boost::system::error_code(n &lt; 0 ? errno : 0,            boost::asio::error::get_system_category());        total_bytes_transferred_ += ec ? 0 : n;        // Retry operation immediately if interrupted by signal.        if (ec == boost::asio::error::interrupted)          continue;        // Check if we need to run the operation again.        if (ec == boost::asio::error::would_block            || ec == boost::asio::error::try_again)        {          // We have to wait for the socket to become ready again.          sock_.async_wait(tcp::socket::wait_write, *this);          return;        }        if (ec || n == 0)        {          // An error occurred, or we have reached the end of the file.          // Either way we must exit the loop so we can call the handler.          break;        }        // Loop around to try calling sendfile again.      }    }    // Pass result back to user's handler.    handler_(ec, total_bytes_transferred_);  }};template &lt;typename Handler&gt;void async_sendfile(tcp::socket&amp; sock, int fd, Handler h){  sendfile_op&lt;Handler&gt; op = { sock, fd, h, 0, 0 };  sock.async_wait(tcp::socket::wait_write, op);}Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/native_non_blocking/overload3.html
basic_socket::native_non_blocking (1 of 3 overloads)basic_socket::native_non_blocking (1 of 3 overloads)HomeLibrariesPeopleFAQMorebasic_socket::native_non_blocking          (1 of 3 overloads)            Gets the non-blocking mode of the native socket implementation.          bool native_non_blocking() const;            This function is used to retrieve the non-blocking mode of the underlying            native socket. This mode has no effect on the behaviour of the socket            object's synchronous operations.                      Return            Value                      true if the underlying socket            is in non-blocking mode and direct system calls may fail with boost::asio::error::would_block (or the equivalent system            error).                      Remarks                      The current non-blocking mode is cached by the socket object. Consequently,            the return value may be incorrect if the non-blocking mode was set directly            on the native socket.                      Example                      This function is intended to allow the encapsulation of arbitrary non-blocking            system calls as asynchronous operations, in a way that is transparent            to the user of the socket object. The following example illustrates how            Linux's sendfile system            call might be encapsulated:          template &lt;typename Handler&gt;struct sendfile_op{  tcp::socket&amp; sock_;  int fd_;  Handler handler_;  off_t offset_;  std::size_t total_bytes_transferred_;  // Function call operator meeting WriteHandler requirements.  // Used as the handler for the async_write_some operation.  void operator()(boost::system::error_code ec, std::size_t)  {    // Put the underlying socket into non-blocking mode.    if (!ec)      if (!sock_.native_non_blocking())        sock_.native_non_blocking(true, ec);    if (!ec)    {      for (;;)      {        // Try the system call.        errno = 0;        int n = ::sendfile(sock_.native_handle(), fd_, &amp;offset_, 65536);        ec = boost::system::error_code(n &lt; 0 ? errno : 0,            boost::asio::error::get_system_category());        total_bytes_transferred_ += ec ? 0 : n;        // Retry operation immediately if interrupted by signal.        if (ec == boost::asio::error::interrupted)          continue;        // Check if we need to run the operation again.        if (ec == boost::asio::error::would_block            || ec == boost::asio::error::try_again)        {          // We have to wait for the socket to become ready again.          sock_.async_wait(tcp::socket::wait_write, *this);          return;        }        if (ec || n == 0)        {          // An error occurred, or we have reached the end of the file.          // Either way we must exit the loop so we can call the handler.          break;        }        // Loop around to try calling sendfile again.      }    }    // Pass result back to user's handler.    handler_(ec, total_bytes_transferred_);  }};template &lt;typename Handler&gt;void async_sendfile(tcp::socket&amp; sock, int fd, Handler h){  sendfile_op&lt;Handler&gt; op = { sock, fd, h, 0, 0 };  sock.async_wait(tcp::socket::wait_write, op);}Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/native_non_blocking/overload1.html
basic_socket::message_end_of_recordbasic_socket::message_end_of_recordHomeLibrariesPeopleFAQMorebasic_socket::message_end_of_record          Inherited from socket_base.                   Specifies          that the data marks the end of a record.        static const int message_end_of_record = implementation_defined;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/message_end_of_record.html
basic_socket::bind (2 of 2 overloads)basic_socket::bind (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::bind          (2 of 2 overloads)            Bind the socket to the given local endpoint.          void bind(    const endpoint_type &amp; endpoint,    boost::system::error_code &amp; ec);            This function binds the socket to the specified endpoint on the local            machine.                      Parameters          endpoint                  An endpoint on the local machine to which the socket will be bound.                ec                  Set to indicate what error occurred, if any.                            Example          boost::asio::ip::tcp::socket socket(my_context);socket.open(boost::asio::ip::tcp::v4());boost::system::error_code ec;socket.bind(boost::asio::ip::tcp::endpoint(      boost::asio::ip::tcp::v4(), 12345), ec);if (ec){  // An error occurred.}Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/bind/overload2.html
basic_socket::bind (1 of 2 overloads)basic_socket::bind (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::bind          (1 of 2 overloads)            Bind the socket to the given local endpoint.          void bind(    const endpoint_type &amp; endpoint);            This function binds the socket to the specified endpoint on the local            machine.                      Parameters          endpoint                  An endpoint on the local machine to which the socket will be bound.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::socket socket(my_context);socket.open(boost::asio::ip::tcp::v4());socket.bind(boost::asio::ip::tcp::endpoint(      boost::asio::ip::tcp::v4(), 12345));Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/bind/overload1.html
basic_socket::operator= (2 of 2 overloads)basic_socket::operator= (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::operator=          (2 of 2 overloads)            Move-assign a basic_socket from a socket of            another protocol type.          template&lt;    typename Protocol1,    typename Executor1&gt;constraint&lt; is_convertible&lt; Protocol1, Protocol &gt;::value &amp;&amp;is_convertible&lt; Executor1, Executor &gt;::value, basic_socket &amp; &gt;::type operator=(    basic_socket&lt; Protocol1, Executor1 &gt; &amp;&amp; other);            This assignment operator moves a socket from one object to another.                      Parameters          other                  The other basic_socket object from                  which the move will occur.                            Remarks                      Following the move, the moved-from object is in the same state as if            constructed using the basic_socket(const executor_type&amp;)            constructor.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/operator_eq_/overload2.html
basic_socket::operator= (1 of 2 overloads)basic_socket::operator= (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::operator=          (1 of 2 overloads)            Move-assign a basic_socket from another.          basic_socket &amp; operator=(    basic_socket &amp;&amp; other);            This assignment operator moves a socket from one object to another.                      Parameters          other                  The other basic_socket object from                  which the move will occur.                            Remarks                      Following the move, the moved-from object is in the same state as if            constructed using the basic_socket(const executor_type&amp;)            constructor.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/operator_eq_/overload1.html
basic_socket::connect (2 of 2 overloads)basic_socket::connect (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::connect          (2 of 2 overloads)            Connect the socket to the specified endpoint.          void connect(    const endpoint_type &amp; peer_endpoint,    boost::system::error_code &amp; ec);            This function is used to connect a socket to the specified remote endpoint.            The function call will block until the connection is successfully made            or an error occurs.                      The socket is automatically opened if it is not already open. If the            connect fails, and the socket was automatically opened, the socket is            not returned to the closed state.                      Parameters          peer_endpoint                  The remote endpoint to which the socket will be connected.                ec                  Set to indicate what error occurred, if any.                            Example          boost::asio::ip::tcp::socket socket(my_context);boost::asio::ip::tcp::endpoint endpoint(    boost::asio::ip::address::from_string("1.2.3.4"), 12345);boost::system::error_code ec;socket.connect(endpoint, ec);if (ec){  // An error occurred.}Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/connect/overload2.html
basic_socket::connect (1 of 2 overloads)basic_socket::connect (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::connect          (1 of 2 overloads)            Connect the socket to the specified endpoint.          void connect(    const endpoint_type &amp; peer_endpoint);            This function is used to connect a socket to the specified remote endpoint.            The function call will block until the connection is successfully made            or an error occurs.                      The socket is automatically opened if it is not already open. If the            connect fails, and the socket was automatically opened, the socket is            not returned to the closed state.                      Parameters          peer_endpoint                  The remote endpoint to which the socket will be connected.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::socket socket(my_context);boost::asio::ip::tcp::endpoint endpoint(    boost::asio::ip::address::from_string("1.2.3.4"), 12345);socket.connect(endpoint);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/connect/overload1.html
basic_socket::max_listen_connectionsbasic_socket::max_listen_connectionsHomeLibrariesPeopleFAQMorebasic_socket::max_listen_connections          Inherited from socket_base.                   The          maximum length of the queue of pending incoming connections.        static const int max_listen_connections = implementation_defined;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/max_listen_connections.html
basic_socket::bindbasic_socket::bindHomeLibrariesPeopleFAQMorebasic_socket::bind           Bind the socket to          the given local endpoint.        void bind(    const endpoint_type &amp; endpoint);  Â» more...void bind(    const endpoint_type &amp; endpoint,    boost::system::error_code &amp; ec);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/bind.html
basic_socket::close (2 of 2 overloads)basic_socket::close (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::close          (2 of 2 overloads)            Close the socket.          void close(    boost::system::error_code &amp; ec);            This function is used to close the socket. Any asynchronous send, receive            or connect operations will be cancelled immediately, and will complete            with the boost::asio::error::operation_aborted error.                      Parameters          ec                  Set to indicate what error occurred, if any. Note that, even if                  the function indicates an error, the underlying descriptor is closed.                            Example          boost::asio::ip::tcp::socket socket(my_context);...boost::system::error_code ec;socket.close(ec);if (ec){  // An error occurred.}            Remarks                      For portable behaviour with respect to graceful closure of a connected            socket, call shutdown() before closing the socket.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/close/overload2.html
basic_socket::close (1 of 2 overloads)basic_socket::close (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::close          (1 of 2 overloads)            Close the socket.          void close();            This function is used to close the socket. Any asynchronous send, receive            or connect operations will be cancelled immediately, and will complete            with the boost::asio::error::operation_aborted error.                      Exceptions          boost::system::system_error                  Thrown on failure. Note that, even if the function indicates an                  error, the underlying descriptor is closed.                            Remarks                      For portable behaviour with respect to graceful closure of a connected            socket, call shutdown() before closing the socket.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/close/overload1.html
basic_socket::native_non_blockingbasic_socket::native_non_blockingHomeLibrariesPeopleFAQMorebasic_socket::native_non_blocking           Gets          the non-blocking mode of the native socket implementation.        bool native_non_blocking() const;  Â» more...          Sets the non-blocking mode of the native socket implementation.        void native_non_blocking(    bool mode);  Â» more...void native_non_blocking(    bool mode,    boost::system::error_code &amp; ec);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/native_non_blocking.html
basic_socket::debugbasic_socket::debugHomeLibrariesPeopleFAQMorebasic_socket::debug          Inherited from socket_base.                   Socket option to          enable socket-level debugging.        typedef implementation_defined debug;          Implements the SOL_SOCKET/SO_DEBUG socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::debug option(true);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::debug option;socket.get_option(option);bool is_set = option.value();          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/debug.html
basic_socket::get_executorbasic_socket::get_executorHomeLibrariesPeopleFAQMorebasic_socket::get_executor           Get          the executor associated with the object.        const executor_type &amp; get_executor();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/get_executor.html
basic_socket::async_waitbasic_socket::async_waitHomeLibrariesPeopleFAQMorebasic_socket::async_wait           Asynchronously          wait for the socket to become ready to read, ready to write, or to have          pending error conditions.        template&lt;    typename WaitToken = DEFAULT&gt;DEDUCED async_wait(    wait_type w,    WaitToken &amp;&amp; token = DEFAULT);          This function is used to perform an asynchronous wait for a socket to enter          a ready to read, write or error condition state. It is an initiating function          for an asynchronous          operation, and always returns immediately.                  Parameters        w                Specifies the desired socket state.              token                The completion                token that will be used to produce a completion handler, which                will be called when the wait completes. Potential completion tokens                include use_future, use_awaitable, yield_context, or a function                object with the correct completion signature. The function signature                of the completion handler must be:              void handler(  const boost::system::error_code&amp; error // Result of operation.);                Regardless of whether the asynchronous operation completes immediately                or not, the completion handler will not be invoked from within this                function. On immediate completion, invocation of the handler will                be performed in a manner equivalent to using post.                        Completion          Signature        void(boost::system::error_code)          Example        void wait_handler(const boost::system::error_code&amp; error){  if (!error)  {    // Wait succeeded.  }}...boost::asio::ip::tcp::socket socket(my_context);...socket.async_wait(boost::asio::ip::tcp::socket::wait_read, wait_handler);          Per-Operation          Cancellation                  On POSIX or Windows operating systems, this asynchronous operation supports          cancellation for the following cancellation_type values:                      cancellation_type::terminal                          cancellation_type::partial                          cancellation_type::total            Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/async_wait.html
basic_socket::assignbasic_socket::assignHomeLibrariesPeopleFAQMorebasic_socket::assign           Assign an existing          native socket to the socket.        void assign(    const protocol_type &amp; protocol,    const native_handle_type &amp; native_socket);  Â» more...void assign(    const protocol_type &amp; protocol,    const native_handle_type &amp; native_socket,    boost::system::error_code &amp; ec);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/assign.html
basic_socket::non_blocking (2 of 3 overloads)basic_socket::non_blocking (2 of 3 overloads)HomeLibrariesPeopleFAQMorebasic_socket::non_blocking          (2 of 3 overloads)            Sets the non-blocking mode of the socket.          void non_blocking(    bool mode);            Parameters          mode                  If true, the socket's                  synchronous operations will fail with boost::asio::error::would_block                  if they are unable to perform the requested operation immediately.                  If false, synchronous                  operations will block until complete.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Remarks                      The non-blocking mode has no effect on the behaviour of asynchronous            operations. Asynchronous operations will never fail with the error boost::asio::error::would_block.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/non_blocking/overload2.html
basic_socket::non_blocking (3 of 3 overloads)basic_socket::non_blocking (3 of 3 overloads)HomeLibrariesPeopleFAQMorebasic_socket::non_blocking          (3 of 3 overloads)            Sets the non-blocking mode of the socket.          void non_blocking(    bool mode,    boost::system::error_code &amp; ec);            Parameters          mode                  If true, the socket's                  synchronous operations will fail with boost::asio::error::would_block                  if they are unable to perform the requested operation immediately.                  If false, synchronous                  operations will block until complete.                ec                  Set to indicate what error occurred, if any.                            Remarks                      The non-blocking mode has no effect on the behaviour of asynchronous            operations. Asynchronous operations will never fail with the error boost::asio::error::would_block.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/non_blocking/overload3.html
basic_socket::non_blocking (1 of 3 overloads)basic_socket::non_blocking (1 of 3 overloads)HomeLibrariesPeopleFAQMorebasic_socket::non_blocking          (1 of 3 overloads)            Gets the non-blocking mode of the socket.          bool non_blocking() const;            Return            Value                      true if the socket's synchronous            operations will fail with boost::asio::error::would_block            if they are unable to perform the requested operation immediately. If            false, synchronous operations            will block until complete.                      Remarks                      The non-blocking mode has no effect on the behaviour of asynchronous            operations. Asynchronous operations will never fail with the error boost::asio::error::would_block.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/non_blocking/overload1.html
basic_socket::get_optionbasic_socket::get_optionHomeLibrariesPeopleFAQMorebasic_socket::get_option           Get an          option from the socket.        template&lt;    typename GettableSocketOption&gt;void get_option(    GettableSocketOption &amp; option) const;  Â» more...template&lt;    typename GettableSocketOption&gt;void get_option(    GettableSocketOption &amp; option,    boost::system::error_code &amp; ec) const;  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/get_option.html
basic_socket::available (2 of 2 overloads)basic_socket::available (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::available          (2 of 2 overloads)            Determine the number of bytes available for reading.          std::size_t available(    boost::system::error_code &amp; ec) const;            This function is used to determine the number of bytes that may be read            without blocking.                      Parameters          ec                  Set to indicate what error occurred, if any.                            Return            Value                      The number of bytes that may be read without blocking, or 0 if an error            occurs.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/available/overload2.html
basic_socket::available (1 of 2 overloads)basic_socket::available (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::available          (1 of 2 overloads)            Determine the number of bytes available for reading.          std::size_t available() const;            This function is used to determine the number of bytes that may be read            without blocking.                      Return            Value                      The number of bytes that may be read without blocking, or 0 if an error            occurs.                      Exceptions          boost::system::system_error                  Thrown on failure.                Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/available/overload1.html
basic_socket::message_peekbasic_socket::message_peekHomeLibrariesPeopleFAQMorebasic_socket::message_peek          Inherited from socket_base.                   Peek          at incoming data without removing it from the input queue.        static const int message_peek = implementation_defined;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/message_peek.html
basic_socket::is_openbasic_socket::is_openHomeLibrariesPeopleFAQMorebasic_socket::is_open           Determine whether          the socket is open.        bool is_open() const;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/is_open.html
basic_socket::receive_low_watermarkbasic_socket::receive_low_watermarkHomeLibrariesPeopleFAQMorebasic_socket::receive_low_watermark          Inherited from socket_base.                   Socket          option for the receive low watermark.        typedef implementation_defined receive_low_watermark;          Implements the SOL_SOCKET/SO_RCVLOWAT socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::receive_low_watermark option(1024);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::receive_low_watermark option;socket.get_option(option);int size = option.value();          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/receive_low_watermark.html
basic_socket::releasebasic_socket::releaseHomeLibrariesPeopleFAQMorebasic_socket::release           Release ownership          of the underlying native socket.        native_handle_type release();  Â» more...native_handle_type release(    boost::system::error_code &amp; ec);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/release.html
basic_socket::message_do_not_routebasic_socket::message_do_not_routeHomeLibrariesPeopleFAQMorebasic_socket::message_do_not_route          Inherited from socket_base.                   Specify          that the data should not be subject to routing.        static const int message_do_not_route = implementation_defined;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/message_do_not_route.html
basic_socket::max_connectionsbasic_socket::max_connectionsHomeLibrariesPeopleFAQMorebasic_socket::max_connections          Inherited from socket_base.                   (Deprecated:          Use max_listen_connections.) The maximum length of the queue of pending          incoming connections.        static const int max_connections = implementation_defined;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/max_connections.html
basic_socket::local_endpoint (2 of 2 overloads)basic_socket::local_endpoint (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::local_endpoint          (2 of 2 overloads)            Get the local endpoint of the socket.          endpoint_type local_endpoint(    boost::system::error_code &amp; ec) const;            This function is used to obtain the locally bound endpoint of the socket.                      Parameters          ec                  Set to indicate what error occurred, if any.                            Return            Value                      An object that represents the local endpoint of the socket. Returns a            default-constructed endpoint object if an error occurred.                      Example          boost::asio::ip::tcp::socket socket(my_context);...boost::system::error_code ec;boost::asio::ip::tcp::endpoint endpoint = socket.local_endpoint(ec);if (ec){  // An error occurred.}Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/local_endpoint/overload2.html
basic_socket::local_endpoint (1 of 2 overloads)basic_socket::local_endpoint (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::local_endpoint          (1 of 2 overloads)            Get the local endpoint of the socket.          endpoint_type local_endpoint() const;            This function is used to obtain the locally bound endpoint of the socket.                      Return            Value                      An object that represents the local endpoint of the socket.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::socket socket(my_context);...boost::asio::ip::tcp::endpoint endpoint = socket.local_endpoint();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/local_endpoint/overload1.html
basic_socket::set_optionbasic_socket::set_optionHomeLibrariesPeopleFAQMorebasic_socket::set_option           Set an          option on the socket.        template&lt;    typename SettableSocketOption&gt;void set_option(    const SettableSocketOption &amp; option);  Â» more...template&lt;    typename SettableSocketOption&gt;void set_option(    const SettableSocketOption &amp; option,    boost::system::error_code &amp; ec);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/set_option.html
basic_socket::local_endpointbasic_socket::local_endpointHomeLibrariesPeopleFAQMorebasic_socket::local_endpoint           Get          the local endpoint of the socket.        endpoint_type local_endpoint() const;  Â» more...endpoint_type local_endpoint(    boost::system::error_code &amp; ec) const;  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/local_endpoint.html
basic_socket::broadcastbasic_socket::broadcastHomeLibrariesPeopleFAQMorebasic_socket::broadcast          Inherited from socket_base.                   Socket          option to permit sending of broadcast messages.        typedef implementation_defined broadcast;          Implements the SOL_SOCKET/SO_BROADCAST socket option.                  Examples                  Setting the option:        boost::asio::ip::udp::socket socket(my_context);...boost::asio::socket_base::broadcast option(true);socket.set_option(option);          Getting the current option value:        boost::asio::ip::udp::socket socket(my_context);...boost::asio::socket_base::broadcast option;socket.get_option(option);bool is_set = option.value();          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/broadcast.html
basic_socket::waitbasic_socket::waitHomeLibrariesPeopleFAQMorebasic_socket::wait           Wait for the socket          to become ready to read, ready to write, or to have pending error conditions.        void wait(    wait_type w);  Â» more...void wait(    wait_type w,    boost::system::error_code &amp; ec);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/wait.html
basic_socket::availablebasic_socket::availableHomeLibrariesPeopleFAQMorebasic_socket::available           Determine          the number of bytes available for reading.        std::size_t available() const;  Â» more...std::size_t available(    boost::system::error_code &amp; ec) const;  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/available.html
basic_socket::reuse_addressbasic_socket::reuse_addressHomeLibrariesPeopleFAQMorebasic_socket::reuse_address          Inherited from socket_base.                   Socket          option to allow the socket to be bound to an address that is already in          use.        typedef implementation_defined reuse_address;          Implements the SOL_SOCKET/SO_REUSEADDR socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::socket_base::reuse_address option(true);acceptor.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::socket_base::reuse_address option;acceptor.get_option(option);bool is_set = option.value();          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/reuse_address.html
basic_socket::io_control (2 of 2 overloads)basic_socket::io_control (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::io_control          (2 of 2 overloads)            Perform an IO control command on the socket.          template&lt;    typename IoControlCommand&gt;void io_control(    IoControlCommand &amp; command,    boost::system::error_code &amp; ec);            This function is used to execute an IO control command on the socket.                      Parameters          command                  The IO control command to be performed on the socket.                ec                  Set to indicate what error occurred, if any.                            Example                      Getting the number of bytes ready to read:          boost::asio::ip::tcp::socket socket(my_context);...boost::asio::ip::tcp::socket::bytes_readable command;boost::system::error_code ec;socket.io_control(command, ec);if (ec){  // An error occurred.}std::size_t bytes_readable = command.get();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/io_control/overload2.html
basic_socket::io_control (1 of 2 overloads)basic_socket::io_control (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::io_control          (1 of 2 overloads)            Perform an IO control command on the socket.          template&lt;    typename IoControlCommand&gt;void io_control(    IoControlCommand &amp; command);            This function is used to execute an IO control command on the socket.                      Parameters          command                  The IO control command to be performed on the socket.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example                      Getting the number of bytes ready to read:          boost::asio::ip::tcp::socket socket(my_context);...boost::asio::ip::tcp::socket::bytes_readable command;socket.io_control(command);std::size_t bytes_readable = command.get();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/io_control/overload1.html
basic_socket::send_low_watermarkbasic_socket::send_low_watermarkHomeLibrariesPeopleFAQMorebasic_socket::send_low_watermark          Inherited from socket_base.                   Socket          option for the send low watermark.        typedef implementation_defined send_low_watermark;          Implements the SOL_SOCKET/SO_SNDLOWAT socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::send_low_watermark option(1024);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::send_low_watermark option;socket.get_option(option);int size = option.value();          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/send_low_watermark.html
basic_socket::at_markbasic_socket::at_markHomeLibrariesPeopleFAQMorebasic_socket::at_mark           Determine whether          the socket is at the out-of-band data mark.        bool at_mark() const;  Â» more...bool at_mark(    boost::system::error_code &amp; ec) const;  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/at_mark.html
basic_socket::shutdown_typebasic_socket::shutdown_typeHomeLibrariesPeopleFAQMorebasic_socket::shutdown_type          Inherited from socket_base.                   Different          ways a socket may be shutdown.        enum shutdown_type                              Values        shutdown_receive                Shutdown the receive side of the socket.              shutdown_send                Shutdown the send side of the socket.              shutdown_both                Shutdown both send and receive on the socket.              Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/shutdown_type.html
basic_socket::openbasic_socket::openHomeLibrariesPeopleFAQMorebasic_socket::open           Open the socket using          the specified protocol.        void open(    const protocol_type &amp; protocol = protocol_type());  Â» more...void open(    const protocol_type &amp; protocol,    boost::system::error_code &amp; ec);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/open.html
basic_socket::send_buffer_sizebasic_socket::send_buffer_sizeHomeLibrariesPeopleFAQMorebasic_socket::send_buffer_size          Inherited from socket_base.                   Socket          option for the send buffer size of a socket.        typedef implementation_defined send_buffer_size;          Implements the SOL_SOCKET/SO_SNDBUF socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::send_buffer_size option(8192);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::send_buffer_size option;socket.get_option(option);int size = option.value();          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/send_buffer_size.html
basic_socket::assign (2 of 2 overloads)basic_socket::assign (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::assign          (2 of 2 overloads)            Assign an existing native socket to the socket.          void assign(    const protocol_type &amp; protocol,    const native_handle_type &amp; native_socket,    boost::system::error_code &amp; ec);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/assign/overload2.html
basic_socket::assign (1 of 2 overloads)basic_socket::assign (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::assign          (1 of 2 overloads)            Assign an existing native socket to the socket.          void assign(    const protocol_type &amp; protocol,    const native_handle_type &amp; native_socket);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/assign/overload1.html
basic_socket::lowest_layer (2 of 2 overloads)basic_socket::lowest_layer (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::lowest_layer          (2 of 2 overloads)            Get a const reference to the lowest layer.          const lowest_layer_type &amp; lowest_layer() const;            This function returns a const reference to the lowest layer in a stack            of layers. Since a basic_socket cannot contain            any further layers, it simply returns a reference to itself.                      Return            Value                      A const reference to the lowest layer in the stack of layers. Ownership            is not transferred to the caller.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/lowest_layer/overload2.html
basic_socket::lowest_layer (1 of 2 overloads)basic_socket::lowest_layer (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::lowest_layer          (1 of 2 overloads)            Get a reference to the lowest layer.          lowest_layer_type &amp; lowest_layer();            This function returns a reference to the lowest layer in a stack of layers.            Since a basic_socket cannot contain            any further layers, it simply returns a reference to itself.                      Return            Value                      A reference to the lowest layer in the stack of layers. Ownership is            not transferred to the caller.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/lowest_layer/overload1.html
basic_socket::set_option (2 of 2 overloads)basic_socket::set_option (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::set_option          (2 of 2 overloads)            Set an option on the socket.          template&lt;    typename SettableSocketOption&gt;void set_option(    const SettableSocketOption &amp; option,    boost::system::error_code &amp; ec);            This function is used to set an option on the socket.                      Parameters          option                  The new option value to be set on the socket.                ec                  Set to indicate what error occurred, if any.                            Example                      Setting the IPPROTO_TCP/TCP_NODELAY option:          boost::asio::ip::tcp::socket socket(my_context);...boost::asio::ip::tcp::no_delay option(true);boost::system::error_code ec;socket.set_option(option, ec);if (ec){  // An error occurred.}Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/set_option/overload2.html
basic_socket::set_option (1 of 2 overloads)basic_socket::set_option (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::set_option          (1 of 2 overloads)            Set an option on the socket.          template&lt;    typename SettableSocketOption&gt;void set_option(    const SettableSocketOption &amp; option);            This function is used to set an option on the socket.                      Parameters          option                  The new option value to be set on the socket.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example                      Setting the IPPROTO_TCP/TCP_NODELAY option:          boost::asio::ip::tcp::socket socket(my_context);...boost::asio::ip::tcp::no_delay option(true);socket.set_option(option);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/set_option/overload1.html
basic_socket::lowest_layer_typebasic_socket::lowest_layer_typeHomeLibrariesPeopleFAQMorebasic_socket::lowest_layer_type           A          basic_socket          is always the lowest layer.        typedef basic_socket&lt; Protocol, Executor &gt; lowest_layer_type;          Types                                              Name                                                                        Description                                                                        rebind_executor                                                                        Rebinds the socket type to another executor.                                                                        broadcast                                                                        Socket option to permit sending of broadcast messages.                                                                        bytes_readable                                                                        IO control command to get the amount of data that can be read                    without blocking.                                                                        debug                                                                        Socket option to enable socket-level debugging.                                                                        do_not_route                                                                        Socket option to prevent routing, use local interfaces only.                                                                        enable_connection_aborted                                                                        Socket option to report aborted connections on accept.                                                                        endpoint_type                                                                        The endpoint type.                                                                        executor_type                                                                        The type of the executor associated with the object.                                                                        keep_alive                                                                        Socket option to send keep-alives.                                                                        linger                                                                        Socket option to specify whether the socket lingers on close                    if unsent data is present.                                                                        lowest_layer_type                                                                        A basic_socket is always the lowest layer.                                                                        message_flags                                                                        Bitmask type for flags that can be passed to send and receive                    operations.                                                                        native_handle_type                                                                        The native representation of a socket.                                                                        out_of_band_inline                                                                        Socket option for putting received out-of-band data inline.                                                                        protocol_type                                                                        The protocol type.                                                                        receive_buffer_size                                                                        Socket option for the receive buffer size of a socket.                                                                        receive_low_watermark                                                                        Socket option for the receive low watermark.                                                                        reuse_address                                                                        Socket option to allow the socket to be bound to an address that                    is already in use.                                                                        send_buffer_size                                                                        Socket option for the send buffer size of a socket.                                                                        send_low_watermark                                                                        Socket option for the send low watermark.                                                                        shutdown_type                                                                        Different ways a socket may be shutdown.                                                                        wait_type                                                                        Wait types.                                            Member          Functions                                              Name                                                                        Description                                                                        assign                                                                        Assign an existing native socket to the socket.                                                                        async_connect                                                                        Start an asynchronous connect.                                                                        async_wait                                                                        Asynchronously wait for the socket to become ready to read, ready                    to write, or to have pending error conditions.                                                                        at_mark                                                                        Determine whether the socket is at the out-of-band data mark.                                                                        available                                                                        Determine the number of bytes available for reading.                                                                        basic_socket [constructor]                                                                        Construct a basic_socket without opening it.   â Construct                    and open a basic_socket.   â Construct a basic_socket,                    opening it and binding it to the given local endpoint.                      â Construct a basic_socket on an existing native socket.                      â Move-construct a basic_socket from another.                      â Move-construct a basic_socket from a socket of another                    protocol type.                                                                        bind                                                                        Bind the socket to the given local endpoint.                                                                        cancel                                                                        Cancel all asynchronous operations associated with the socket.                                                                        close                                                                        Close the socket.                                                                        connect                                                                        Connect the socket to the specified endpoint.                                                                        get_executor                                                                        Get the executor associated with the object.                                                                        get_option                                                                        Get an option from the socket.                                                                        io_control                                                                        Perform an IO control command on the socket.                                                                        is_open                                                                        Determine whether the socket is open.                                                                        local_endpoint                                                                        Get the local endpoint of the socket.                                                                        lowest_layer                                                                        Get a reference to the lowest layer.   â Get a const                    reference to the lowest layer.                                                                        native_handle                                                                        Get the native socket representation.                                                                        native_non_blocking                                                                        Gets the non-blocking mode of the native socket implementation.                      â Sets the non-blocking mode of the native socket                    implementation.                                                                        non_blocking                                                                        Gets the non-blocking mode of the socket.   â Sets                    the non-blocking mode of the socket.                                                                        open                                                                        Open the socket using the specified protocol.                                                                        operator=                                                                        Move-assign a basic_socket from another.   â Move-assign                    a basic_socket from a socket of another protocol type.                                                                        release                                                                        Release ownership of the underlying native socket.                                                                        remote_endpoint                                                                        Get the remote endpoint of the socket.                                                                        set_option                                                                        Set an option on the socket.                                                                        shutdown                                                                        Disable sends or receives on the socket.                                                                        wait                                                                        Wait for the socket to become ready to read, ready to write,                    or to have pending error conditions.                                            Protected          Member Functions                                              Name                                                                        Description                                                                        ~basic_socket [destructor]                                                                        Protected destructor to prevent deletion through this type.                                            Data          Members                                              Name                                                                        Description                                                                        max_connections [static]                                                                        (Deprecated: Use max_listen_connections.) The maximum length                    of the queue of pending incoming connections.                                                                        max_listen_connections [static]                                                                        The maximum length of the queue of pending incoming connections.                                                                        message_do_not_route [static]                                                                        Specify that the data should not be subject to routing.                                                                        message_end_of_record [static]                                                                        Specifies that the data marks the end of a record.                                                                        message_out_of_band [static]                                                                        Process out-of-band data.                                                                        message_peek [static]                                                                        Peek at incoming data without removing it from the input queue.                                            The basic_socket          class template provides functionality that is common to both stream-oriented          and datagram-oriented sockets.                  Thread          Safety                  Distinct objects: Safe.                  Shared objects: Unsafe.                  Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/lowest_layer_type.html
basic_socket::lingerbasic_socket::lingerHomeLibrariesPeopleFAQMorebasic_socket::linger          Inherited from socket_base.                   Socket option          to specify whether the socket lingers on close if unsent data is present.        typedef implementation_defined linger;          Implements the SOL_SOCKET/SO_LINGER socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::linger option(true, 30);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::linger option;socket.get_option(option);bool is_set = option.enabled();unsigned short timeout = option.timeout();          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/linger.html
basic_socket::out_of_band_inlinebasic_socket::out_of_band_inlineHomeLibrariesPeopleFAQMorebasic_socket::out_of_band_inline          Inherited from socket_base.                   Socket          option for putting received out-of-band data inline.        typedef implementation_defined out_of_band_inline;          Implements the SOL_SOCKET/SO_OOBINLINE socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::out_of_band_inline option(true);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::out_of_band_inline option;socket.get_option(option);bool value = option.value();          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/out_of_band_inline.html
basic_socket::operator=basic_socket::operator=HomeLibrariesPeopleFAQMorebasic_socket::operator=           Move-assign          a basic_socket          from another.        basic_socket &amp; operator=(    basic_socket &amp;&amp; other);  Â» more...          Move-assign a basic_socket from a socket of          another protocol type.        template&lt;    typename Protocol1,    typename Executor1&gt;constraint&lt; is_convertible&lt; Protocol1, Protocol &gt;::value &amp;&amp;is_convertible&lt; Executor1, Executor &gt;::value, basic_socket &amp; &gt;::type operator=(    basic_socket&lt; Protocol1, Executor1 &gt; &amp;&amp; other);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/operator_eq_.html
basic_socket::keep_alivebasic_socket::keep_aliveHomeLibrariesPeopleFAQMorebasic_socket::keep_alive          Inherited from socket_base.                   Socket          option to send keep-alives.        typedef implementation_defined keep_alive;          Implements the SOL_SOCKET/SO_KEEPALIVE socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::keep_alive option(true);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::keep_alive option;socket.get_option(option);bool is_set = option.value();          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/keep_alive.html
basic_socket::non_blockingbasic_socket::non_blockingHomeLibrariesPeopleFAQMorebasic_socket::non_blocking           Gets          the non-blocking mode of the socket.        bool non_blocking() const;  Â» more...          Sets the non-blocking mode of the socket.        void non_blocking(    bool mode);  Â» more...void non_blocking(    bool mode,    boost::system::error_code &amp; ec);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/non_blocking.html
basic_socket::remote_endpointbasic_socket::remote_endpointHomeLibrariesPeopleFAQMorebasic_socket::remote_endpoint           Get          the remote endpoint of the socket.        endpoint_type remote_endpoint() const;  Â» more...endpoint_type remote_endpoint(    boost::system::error_code &amp; ec) const;  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/remote_endpoint.html
basic_socket::receive_buffer_sizebasic_socket::receive_buffer_sizeHomeLibrariesPeopleFAQMorebasic_socket::receive_buffer_size          Inherited from socket_base.                   Socket          option for the receive buffer size of a socket.        typedef implementation_defined receive_buffer_size;          Implements the SOL_SOCKET/SO_RCVBUF socket option.                  Examples                  Setting the option:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::receive_buffer_size option(8192);socket.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::socket socket(my_context);...boost::asio::socket_base::receive_buffer_size option;socket.get_option(option);int size = option.value();          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/receive_buffer_size.html
basic_socket::open (2 of 2 overloads)basic_socket::open (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::open          (2 of 2 overloads)            Open the socket using the specified protocol.          void open(    const protocol_type &amp; protocol,    boost::system::error_code &amp; ec);            This function opens the socket so that it will use the specified protocol.                      Parameters          protocol                  An object specifying which protocol is to be used.                ec                  Set to indicate what error occurred, if any.                            Example          boost::asio::ip::tcp::socket socket(my_context);boost::system::error_code ec;socket.open(boost::asio::ip::tcp::v4(), ec);if (ec){  // An error occurred.}Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/open/overload2.html
basic_socket::open (1 of 2 overloads)basic_socket::open (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::open          (1 of 2 overloads)            Open the socket using the specified protocol.          void open(    const protocol_type &amp; protocol = protocol_type());            This function opens the socket so that it will use the specified protocol.                      Parameters          protocol                  An object specifying protocol parameters to be used.                            Exceptions          boost::system::system_error                  Thrown on failure.                            Example          boost::asio::ip::tcp::socket socket(my_context);socket.open(boost::asio::ip::tcp::v4());Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/open/overload1.html
basic_socket::connectbasic_socket::connectHomeLibrariesPeopleFAQMorebasic_socket::connect           Connect the          socket to the specified endpoint.        void connect(    const endpoint_type &amp; peer_endpoint);  Â» more...void connect(    const endpoint_type &amp; peer_endpoint,    boost::system::error_code &amp; ec);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/connect.html
basic_socket::cancelbasic_socket::cancelHomeLibrariesPeopleFAQMorebasic_socket::cancel           Cancel all asynchronous          operations associated with the socket.        void cancel();  Â» more...void cancel(    boost::system::error_code &amp; ec);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/cancel.html
basic_socket::protocol_typebasic_socket::protocol_typeHomeLibrariesPeopleFAQMorebasic_socket::protocol_type           The          protocol type.        typedef Protocol protocol_type;          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/protocol_type.html
basic_socket::endpoint_typebasic_socket::endpoint_typeHomeLibrariesPeopleFAQMorebasic_socket::endpoint_type           The          endpoint type.        typedef Protocol::endpoint endpoint_type;          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/endpoint_type.html
basic_socket::wait_typebasic_socket::wait_typeHomeLibrariesPeopleFAQMorebasic_socket::wait_type          Inherited from socket_base.                   Wait types.        enum wait_type                              Values        wait_read                Wait for a socket to become ready to read.              wait_write                Wait for a socket to become ready to write.              wait_error                Wait for a socket to have error conditions pending.                        For use with basic_socket::wait() and basic_socket::async_wait().        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/wait_type.html
basic_socket::message_flagsbasic_socket::message_flagsHomeLibrariesPeopleFAQMorebasic_socket::message_flags          Inherited from socket_base.                   Bitmask          type for flags that can be passed to send and receive operations.        typedef int message_flags;          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/message_flags.html
basic_socket::do_not_routebasic_socket::do_not_routeHomeLibrariesPeopleFAQMorebasic_socket::do_not_route          Inherited from socket_base.                   Socket          option to prevent routing, use local interfaces only.        typedef implementation_defined do_not_route;          Implements the SOL_SOCKET/SO_DONTROUTE socket option.                  Examples                  Setting the option:        boost::asio::ip::udp::socket socket(my_context);...boost::asio::socket_base::do_not_route option(true);socket.set_option(option);          Getting the current option value:        boost::asio::ip::udp::socket socket(my_context);...boost::asio::socket_base::do_not_route option;socket.get_option(option);bool is_set = option.value();          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/do_not_route.html
basic_socket::wait (2 of 2 overloads)basic_socket::wait (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::wait          (2 of 2 overloads)            Wait for the socket to become ready to read, ready to write, or to have            pending error conditions.          void wait(    wait_type w,    boost::system::error_code &amp; ec);            This function is used to perform a blocking wait for a socket to enter            a ready to read, write or error condition state.                      Parameters          w                  Specifies the desired socket state.                ec                  Set to indicate what error occurred, if any.                            Example                      Waiting for a socket to become readable.          boost::asio::ip::tcp::socket socket(my_context);...boost::system::error_code ec;socket.wait(boost::asio::ip::tcp::socket::wait_read, ec);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/wait/overload2.html
basic_socket::wait (1 of 2 overloads)basic_socket::wait (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::wait          (1 of 2 overloads)            Wait for the socket to become ready to read, ready to write, or to have            pending error conditions.          void wait(    wait_type w);            This function is used to perform a blocking wait for a socket to enter            a ready to read, write or error condition state.                      Parameters          w                  Specifies the desired socket state.                            Example                      Waiting for a socket to become readable.          boost::asio::ip::tcp::socket socket(my_context);...socket.wait(boost::asio::ip::tcp::socket::wait_read);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/wait/overload1.html
basic_socket::enable_connection_abortedbasic_socket::enable_connection_abortedHomeLibrariesPeopleFAQMorebasic_socket::enable_connection_aborted          Inherited from socket_base.                   Socket          option to report aborted connections on accept.        typedef implementation_defined enable_connection_aborted;          Implements a custom socket option that determines whether or not an accept          operation is permitted to fail with boost::asio::error::connection_aborted.          By default the option is false.                  Examples                  Setting the option:        boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::socket_base::enable_connection_aborted option(true);acceptor.set_option(option);          Getting the current option value:        boost::asio::ip::tcp::acceptor acceptor(my_context);...boost::asio::socket_base::enable_connection_aborted option;acceptor.get_option(option);bool is_set = option.value();          Requirements                  Header: boost/asio/basic_socket.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/enable_connection_aborted.html
basic_socket::cancel (2 of 2 overloads)basic_socket::cancel (2 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::cancel          (2 of 2 overloads)            Cancel all asynchronous operations associated with the socket.          void cancel(    boost::system::error_code &amp; ec);            This function causes all outstanding asynchronous connect, send and receive            operations to finish immediately, and the handlers for cancelled operations            will be passed the boost::asio::error::operation_aborted            error.                      Parameters          ec                  Set to indicate what error occurred, if any.                            Remarks                      Calls to cancel()            will always fail with boost::asio::error::operation_not_supported            when run on Windows XP, Windows Server 2003, and earlier versions of            Windows, unless BOOST_ASIO_ENABLE_CANCELIO is defined. However, the CancelIo            function has two issues that should be considered before enabling its            use:                          It will only cancel asynchronous operations that were initiated in                the current thread.                              It can appear to complete without error, but the request to cancel                the unfinished operations may be silently ignored by the operating                system. Whether it works or not seems to depend on the drivers that                are installed.                          For portable cancellation, consider using one of the following alternatives:                          Disable asio's I/O completion port backend by defining BOOST_ASIO_DISABLE_IOCP.                              Use the close()                function to simultaneously cancel the outstanding operations and                close the socket.                          When running on Windows Vista, Windows Server 2008, and later, the CancelIoEx            function is always used. This function does not have the problems described            above.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/cancel/overload2.html
basic_socket::cancel (1 of 2 overloads)basic_socket::cancel (1 of 2 overloads)HomeLibrariesPeopleFAQMorebasic_socket::cancel          (1 of 2 overloads)            Cancel all asynchronous operations associated with the socket.          void cancel();            This function causes all outstanding asynchronous connect, send and receive            operations to finish immediately, and the handlers for cancelled operations            will be passed the boost::asio::error::operation_aborted            error.                      Exceptions          boost::system::system_error                  Thrown on failure.                            Remarks                      Calls to cancel()            will always fail with boost::asio::error::operation_not_supported            when run on Windows XP, Windows Server 2003, and earlier versions of            Windows, unless BOOST_ASIO_ENABLE_CANCELIO is defined. However, the CancelIo            function has two issues that should be considered before enabling its            use:                          It will only cancel asynchronous operations that were initiated in                the current thread.                              It can appear to complete without error, but the request to cancel                the unfinished operations may be silently ignored by the operating                system. Whether it works or not seems to depend on the drivers that                are installed.                          For portable cancellation, consider using one of the following alternatives:                          Disable asio's I/O completion port backend by defining BOOST_ASIO_DISABLE_IOCP.                              Use the close()                function to simultaneously cancel the outstanding operations and                close the socket.                          When running on Windows Vista, Windows Server 2008, and later, the CancelIoEx            function is always used. This function does not have the problems described            above.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/cancel/overload1.html
basic_socket::shutdownbasic_socket::shutdownHomeLibrariesPeopleFAQMorebasic_socket::shutdown           Disable sends          or receives on the socket.        void shutdown(    shutdown_type what);  Â» more...void shutdown(    shutdown_type what,    boost::system::error_code &amp; ec);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_socket/shutdown.html
executor_arg_t::executor_arg_texecutor_arg_t::executor_arg_tHomeLibrariesPeopleFAQMoreexecutor_arg_t::executor_arg_t           Constructor.        constexpr executor_arg_t();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/executor_arg_t/executor_arg_t.html
execution::relationship_t::fork_texecution::relationship_t::fork_tHomeLibrariesPeopleFAQMoreexecution::relationship_t::fork_t                      A sub-property that indicates that the executor does not represent a continuation        of the calling context.      struct fork_t        Types                                        Name                                                                Description                                                                polymorphic_query_result_type                                                                The type returned by queries against an any_executor.                                      Member        Functions                                        Name                                                                Description                                                                fork_t [constructor]                                                                Default constructor.                                                                value [static]                                                                Get the value associated with a property object.                                      Data        Members                                        Name                                                                Description                                                                is_applicable_property_v [static]                                                                The relationship_t::fork_t property applies to executors, senders,                  and schedulers.                                                                is_preferable [static]                                                                The relationship_t::fork_t property can be preferred.                                                                is_requirable [static]                                                                The relationship_t::fork_t property can be required.                                      Requirements              Header: boost/asio/execution/relationship.hpp              Convenience header: boost/asio/execution.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/execution__relationship_t__fork_t.html
any_completion_executor::operator!= (2 of 3 overloads)any_completion_executor::operator!= (2 of 3 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::operator!=          (2 of 3 overloads)            Inherited from execution::any_executor.                      Inequality operator.          bool operator!=(    const any_executor&lt; SupportableProperties...&gt; &amp; a,    nullptr_t );Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/operator_not__eq_/overload2.html
any_completion_executor::operator!= (3 of 3 overloads)any_completion_executor::operator!= (3 of 3 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::operator!=          (3 of 3 overloads)            Inherited from execution::any_executor.                      Inequality operator.          bool operator!=(    nullptr_t ,    const any_executor&lt; SupportableProperties...&gt; &amp; b);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/operator_not__eq_/overload3.html
any_completion_executor::operator!= (1 of 3 overloads)any_completion_executor::operator!= (1 of 3 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::operator!=          (1 of 3 overloads)            Inherited from execution::any_executor.                      Inequality operator.          bool operator!=(    const any_executor&lt; SupportableProperties...&gt; &amp; a,    const any_executor&lt; SupportableProperties...&gt; &amp; b);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/operator_not__eq_/overload1.html
any_completion_executor::any_completion_executor (4 of 10 overloads)any_completion_executor::any_completion_executor (4 of 10 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::any_completion_executor          (4 of 10 overloads)            Move constructor.          any_completion_executor(    any_completion_executor &amp;&amp; e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/any_completion_executor/overload4.html
any_completion_executor::any_completion_executor (10 of 10 overloads)any_completion_executor::any_completion_executor (10 of 10 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::any_completion_executor          (10 of 10 overloads)            Construct a polymorphic wrapper for the specified executor.          template&lt;    typename Executor&gt;any_completion_executor(    std::nothrow_t ,    Executor e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/any_completion_executor/overload10.html
any_completion_executor::any_completion_executor (7 of 10 overloads)any_completion_executor::any_completion_executor (7 of 10 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::any_completion_executor          (7 of 10 overloads)            Construct to point to the same target as another any_executor.          any_completion_executor(    std::nothrow_t ,    const any_completion_executor &amp; e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/any_completion_executor/overload7.html
any_completion_executor::any_completion_executor (2 of 10 overloads)any_completion_executor::any_completion_executor (2 of 10 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::any_completion_executor          (2 of 10 overloads)            Construct in an empty state. Equivalent effects to default constructor.          any_completion_executor(    nullptr_t );Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/any_completion_executor/overload2.html
any_completion_executor::any_completion_executor (3 of 10 overloads)any_completion_executor::any_completion_executor (3 of 10 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::any_completion_executor          (3 of 10 overloads)            Copy constructor.          any_completion_executor(    const any_completion_executor &amp; e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/any_completion_executor/overload3.html
any_completion_executor::any_completion_executor (8 of 10 overloads)any_completion_executor::any_completion_executor (8 of 10 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::any_completion_executor          (8 of 10 overloads)            Construct to point to the same target as another any_executor.          any_completion_executor(    std::nothrow_t ,    any_completion_executor &amp;&amp; e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/any_completion_executor/overload8.html
any_completion_executor::any_completion_executor (6 of 10 overloads)any_completion_executor::any_completion_executor (6 of 10 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::any_completion_executor          (6 of 10 overloads)            Construct to point to the same target as another any_executor.          template&lt;    class... OtherSupportableProperties&gt;any_completion_executor(    std::nothrow_t ,    execution::any_executor&lt; OtherSupportableProperties...&gt; e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/any_completion_executor/overload6.html
any_completion_executor::any_completion_executor (9 of 10 overloads)any_completion_executor::any_completion_executor (9 of 10 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::any_completion_executor          (9 of 10 overloads)            Construct a polymorphic wrapper for the specified executor.          template&lt;    typename Executor&gt;any_completion_executor(    Executor e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/any_completion_executor/overload9.html
any_completion_executor::any_completion_executor (1 of 10 overloads)any_completion_executor::any_completion_executor (1 of 10 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::any_completion_executor          (1 of 10 overloads)            Default constructor.          any_completion_executor();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/any_completion_executor/overload1.html
any_completion_executor::any_completion_executor (5 of 10 overloads)any_completion_executor::any_completion_executor (5 of 10 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::any_completion_executor          (5 of 10 overloads)            Construct to point to the same target as another any_executor.          template&lt;    class... OtherSupportableProperties&gt;any_completion_executor(    execution::any_executor&lt; OtherSupportableProperties...&gt; e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/any_completion_executor/overload5.html
any_completion_executor::contextany_completion_executor::contextHomeLibrariesPeopleFAQMoreany_completion_executor::context          Inherited from execution::any_executor.                   Obtain          the underlying execution context.        automatically_determined context() const;          This function is provided for backward compatibility. It is automatically          defined when the SupportableProperties...          list includes a property of type execution::context_as&lt;U&gt;, for some type U.        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/context.html
any_completion_executor::executeany_completion_executor::executeHomeLibrariesPeopleFAQMoreany_completion_executor::execute          Inherited from execution::any_executor.                   Execute          the function on the target executor.        template&lt;    typename Function&gt;void execute(    Function &amp;&amp; f) const;          Throws bad_executor if the polymorphic          wrapper has no target.        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/execute.html
any_completion_executor::swap (2 of 2 overloads)any_completion_executor::swap (2 of 2 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::swap          (2 of 2 overloads)            Inherited from execution::any_executor.                      Swap targets with another polymorphic wrapper.          void swap(    any_executor &amp; other);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/swap/overload2.html
any_completion_executor::swap (1 of 2 overloads)any_completion_executor::swap (1 of 2 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::swap          (1 of 2 overloads)            Swap targets with another polymorphic wrapper.          void swap(    any_completion_executor &amp; other);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/swap/overload1.html
any_completion_executor::requireany_completion_executor::requireHomeLibrariesPeopleFAQMoreany_completion_executor::require           Obtain          a polymorphic wrapper with the specified property.        template&lt;    typename Property&gt;any_completion_executor require(    const Property &amp; p,    typename constraint&lt; traits::require_member&lt; const base_type &amp;, const Property &amp; &gt;::is_valid &gt;::type  = 0) const;  Â» more...template&lt;    typename Property&gt;any_executor require(    Property ) const;  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/require.html
any_completion_executor::operator==any_completion_executor::operator==HomeLibrariesPeopleFAQMoreany_completion_executor::operator==           Equality          operator.        bool operator==(    const any_executor&lt; SupportableProperties...&gt; &amp; a,    const any_executor&lt; SupportableProperties...&gt; &amp; b);  Â» more...bool operator==(    const any_executor&lt; SupportableProperties...&gt; &amp; a,    nullptr_t );  Â» more...bool operator==(    nullptr_t ,    const any_executor&lt; SupportableProperties...&gt; &amp; b);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/operator_eq__eq_.html
any_completion_executor::any_completion_executorany_completion_executor::any_completion_executorHomeLibrariesPeopleFAQMoreany_completion_executor::any_completion_executor           Default          constructor.        any_completion_executor();  Â» more...          Construct in an empty state. Equivalent effects to default constructor.        any_completion_executor(    nullptr_t );  Â» more...          Copy constructor.        any_completion_executor(    const any_completion_executor &amp; e);  Â» more...          Move constructor.        any_completion_executor(    any_completion_executor &amp;&amp; e);  Â» more...          Construct to point to the same target as another any_executor.        template&lt;    class... OtherSupportableProperties&gt;any_completion_executor(    execution::any_executor&lt; OtherSupportableProperties...&gt; e);  Â» more...template&lt;    class... OtherSupportableProperties&gt;any_completion_executor(    std::nothrow_t ,    execution::any_executor&lt; OtherSupportableProperties...&gt; e);  Â» more...any_completion_executor(    std::nothrow_t ,    const any_completion_executor &amp; e);  Â» more...any_completion_executor(    std::nothrow_t ,    any_completion_executor &amp;&amp; e);  Â» more...          Construct a polymorphic wrapper for the specified executor.        template&lt;    typename Executor&gt;any_completion_executor(    Executor e);  Â» more...template&lt;    typename Executor&gt;any_completion_executor(    std::nothrow_t ,    Executor e);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/any_completion_executor.html
any_completion_executor::target (2 of 2 overloads)any_completion_executor::target (2 of 2 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::target          (2 of 2 overloads)            Inherited from execution::any_executor.                      Get a pointer to the target executor.          template&lt;    typename Executor&gt;const Executor * target() const;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/target/overload2.html
any_completion_executor::target (1 of 2 overloads)any_completion_executor::target (1 of 2 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::target          (1 of 2 overloads)            Inherited from execution::any_executor.                      Get a pointer to the target executor.          template&lt;    typename Executor&gt;Executor * target();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/target/overload1.html
any_completion_executor::operator= (2 of 3 overloads)any_completion_executor::operator= (2 of 3 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::operator=          (2 of 3 overloads)            Move assignment operator.          any_completion_executor &amp; operator=(    any_completion_executor &amp;&amp; e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/operator_eq_/overload2.html
any_completion_executor::operator= (3 of 3 overloads)any_completion_executor::operator= (3 of 3 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::operator=          (3 of 3 overloads)            Assignment operator that sets the polymorphic wrapper to the empty state.          any_completion_executor &amp; operator=(    nullptr_t );Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/operator_eq_/overload3.html
any_completion_executor::operator= (1 of 3 overloads)any_completion_executor::operator= (1 of 3 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::operator=          (1 of 3 overloads)            Assignment operator.          any_completion_executor &amp; operator=(    const any_completion_executor &amp; e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/operator_eq_/overload1.html
any_completion_executor::targetany_completion_executor::targetHomeLibrariesPeopleFAQMoreany_completion_executor::target           Get          a pointer to the target executor.        template&lt;    typename Executor&gt;Executor * target();  Â» more...template&lt;    typename Executor&gt;const Executor * target() const;  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/target.html
any_completion_executor::target_typeany_completion_executor::target_typeHomeLibrariesPeopleFAQMoreany_completion_executor::target_type          Inherited from execution::any_executor.                   Get          the type of the target executor.        const type_info &amp; target_type() const;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/target_type.html
any_completion_executor::swapany_completion_executor::swapHomeLibrariesPeopleFAQMoreany_completion_executor::swap           Swap          targets with another polymorphic wrapper.        void swap(    any_completion_executor &amp; other);  Â» more...void swap(    any_executor &amp; other);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/swap.html
any_completion_executor::prefer (4 of 6 overloads)any_completion_executor::prefer (4 of 6 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::prefer          (4 of 6 overloads)template&lt;&gt;any_completion_executor prefer(    const execution::relationship_t::fork_t &amp; p,    int ) const;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/prefer/overload4.html
any_completion_executor::prefer (2 of 6 overloads)any_completion_executor::prefer (2 of 6 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::prefer          (2 of 6 overloads)template&lt;&gt;any_completion_executor prefer(    const execution::outstanding_work_t::tracked_t &amp; p,    int ) const;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/prefer/overload2.html
any_completion_executor::prefer (3 of 6 overloads)any_completion_executor::prefer (3 of 6 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::prefer          (3 of 6 overloads)template&lt;&gt;any_completion_executor prefer(    const execution::outstanding_work_t::untracked_t &amp; p,    int ) const;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/prefer/overload3.html
any_completion_executor::prefer (6 of 6 overloads)any_completion_executor::prefer (6 of 6 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::prefer          (6 of 6 overloads)            Inherited from execution::any_executor.                      Obtain a polymorphic wrapper with the specified property.          template&lt;    typename Property&gt;any_executor prefer(    Property ) const;            Do not call this function directly. It is intended for use with the            prefer            customisation point.                      For example:          execution::any_executor&lt;execution::blocking_t::possibly_t&gt; ex = ...;auto ex2 = boost::asio::prefer(ex, execution::blocking.possibly);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/prefer/overload6.html
any_completion_executor::prefer (1 of 6 overloads)any_completion_executor::prefer (1 of 6 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::prefer          (1 of 6 overloads)            Obtain a polymorphic wrapper with the specified property.          template&lt;    typename Property&gt;any_completion_executor prefer(    const Property &amp; p,    typename constraint&lt; traits::prefer_member&lt; const base_type &amp;, const Property &amp; &gt;::is_valid &gt;::type  = 0) const;            Do not call this function directly. It is intended for use with the            prefer            customisation point.                      For example:          any_completion_executor ex = ...;auto ex2 = boost::asio::prefer(ex, execution::relationship.fork);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/prefer/overload1.html
any_completion_executor::prefer (5 of 6 overloads)any_completion_executor::prefer (5 of 6 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::prefer          (5 of 6 overloads)template&lt;&gt;any_completion_executor prefer(    const execution::relationship_t::continuation_t &amp; p,    int ) const;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/prefer/overload5.html
any_completion_executor::operator boolany_completion_executor::operator boolHomeLibrariesPeopleFAQMoreany_completion_executor::operator        bool          Inherited from execution::any_executor.                   Determine          whether the wrapper has a target executor.        operator bool() const;          Return          Value                  true if the polymorphic wrapper          has a target executor, otherwise false.        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/operator_bool.html
any_completion_executor::require (2 of 2 overloads)any_completion_executor::require (2 of 2 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::require          (2 of 2 overloads)            Inherited from execution::any_executor.                      Obtain a polymorphic wrapper with the specified property.          template&lt;    typename Property&gt;any_executor require(    Property ) const;            Do not call this function directly. It is intended for use with the            require            and prefer            customisation points.                      For example:          execution::any_executor&lt;execution::blocking_t::possibly_t&gt; ex = ...;auto ex2 = boost::asio::requre(ex, execution::blocking.possibly);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/require/overload2.html
any_completion_executor::require (1 of 2 overloads)any_completion_executor::require (1 of 2 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::require          (1 of 2 overloads)            Obtain a polymorphic wrapper with the specified property.          template&lt;    typename Property&gt;any_completion_executor require(    const Property &amp; p,    typename constraint&lt; traits::require_member&lt; const base_type &amp;, const Property &amp; &gt;::is_valid &gt;::type  = 0) const;            Do not call this function directly. It is intended for use with the            require            and prefer            customisation points.                      For example:          any_completion_executor ex = ...;auto ex2 = boost::asio::require(ex, execution::relationship.fork);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/require/overload1.html
any_completion_executor::~any_completion_executorany_completion_executor::~any_completion_executorHomeLibrariesPeopleFAQMoreany_completion_executor::~any_completion_executor           Destructor.        ~any_completion_executor();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/_any_completion_executor.html
any_completion_executor::operator!=any_completion_executor::operator!=HomeLibrariesPeopleFAQMoreany_completion_executor::operator!=           Inequality          operator.        bool operator!=(    const any_executor&lt; SupportableProperties...&gt; &amp; a,    const any_executor&lt; SupportableProperties...&gt; &amp; b);  Â» more...bool operator!=(    const any_executor&lt; SupportableProperties...&gt; &amp; a,    nullptr_t );  Â» more...bool operator!=(    nullptr_t ,    const any_executor&lt; SupportableProperties...&gt; &amp; b);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/operator_not__eq_.html
any_completion_executor::operator=any_completion_executor::operator=HomeLibrariesPeopleFAQMoreany_completion_executor::operator=           Assignment          operator.        any_completion_executor &amp; operator=(    const any_completion_executor &amp; e);  Â» more...          Move assignment operator.        any_completion_executor &amp; operator=(    any_completion_executor &amp;&amp; e);  Â» more...          Assignment operator that sets the polymorphic wrapper to the empty state.        any_completion_executor &amp; operator=(    nullptr_t );  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/operator_eq_.html
any_completion_executor::queryany_completion_executor::queryHomeLibrariesPeopleFAQMoreany_completion_executor::query          Inherited from execution::any_executor.                   Obtain          the value associated with the specified property.        template&lt;    typename Property&gt;Property::polymorphic_query_result_type query(    Property ) const;          Do not call this function directly. It is intended for use with the query          customisation point.                  For example:        execution::any_executor&lt;execution::occupancy_t&gt; ex = ...;size_t n = boost::asio::query(ex, execution::occupancy);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/query.html
any_completion_executor::operator== (2 of 3 overloads)any_completion_executor::operator== (2 of 3 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::operator==          (2 of 3 overloads)            Inherited from execution::any_executor.                      Equality operator.          bool operator==(    const any_executor&lt; SupportableProperties...&gt; &amp; a,    nullptr_t );Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/operator_eq__eq_/overload2.html
any_completion_executor::operator== (3 of 3 overloads)any_completion_executor::operator== (3 of 3 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::operator==          (3 of 3 overloads)            Inherited from execution::any_executor.                      Equality operator.          bool operator==(    nullptr_t ,    const any_executor&lt; SupportableProperties...&gt; &amp; b);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/operator_eq__eq_/overload3.html
any_completion_executor::operator== (1 of 3 overloads)any_completion_executor::operator== (1 of 3 overloads)HomeLibrariesPeopleFAQMoreany_completion_executor::operator==          (1 of 3 overloads)            Inherited from execution::any_executor.                      Equality operator.          bool operator==(    const any_executor&lt; SupportableProperties...&gt; &amp; a,    const any_executor&lt; SupportableProperties...&gt; &amp; b);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/operator_eq__eq_/overload1.html
any_completion_executor::preferany_completion_executor::preferHomeLibrariesPeopleFAQMoreany_completion_executor::prefer           Obtain          a polymorphic wrapper with the specified property.        template&lt;    typename Property&gt;any_completion_executor prefer(    const Property &amp; p,    typename constraint&lt; traits::prefer_member&lt; const base_type &amp;, const Property &amp; &gt;::is_valid &gt;::type  = 0) const;  Â» more...template&lt;&gt;any_completion_executor prefer(    const execution::outstanding_work_t::tracked_t &amp; p,    int ) const;  Â» more...template&lt;&gt;any_completion_executor prefer(    const execution::outstanding_work_t::untracked_t &amp; p,    int ) const;  Â» more...template&lt;&gt;any_completion_executor prefer(    const execution::relationship_t::fork_t &amp; p,    int ) const;  Â» more...template&lt;&gt;any_completion_executor prefer(    const execution::relationship_t::continuation_t &amp; p,    int ) const;  Â» more...template&lt;    typename Property&gt;any_executor prefer(    Property ) const;  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/any_completion_executor/prefer.html
co_spawnco_spawnHomeLibrariesPeopleFAQMoreco_spawn                      Spawn a new coroutined-based thread of execution.      template&lt;    typename Executor,    typename T,    typename AwaitableExecutor,    typename CompletionToken = DEFAULT&gt;DEDUCED co_spawn(    const Executor &amp; ex,    awaitable&lt; T, AwaitableExecutor &gt; a,    CompletionToken &amp;&amp; token = DEFAULT,    typename constraint&lt; (is_executor&lt; Executor &gt;::value||execution::is_executor&lt; Executor &gt;::value)&amp;&amp;is_convertible&lt; Executor, AwaitableExecutor &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename Executor,    typename AwaitableExecutor,    typename CompletionToken = DEFAULT&gt;DEDUCED co_spawn(    const Executor &amp; ex,    awaitable&lt; void, AwaitableExecutor &gt; a,    CompletionToken &amp;&amp; token = DEFAULT,    typename constraint&lt; (is_executor&lt; Executor &gt;::value||execution::is_executor&lt; Executor &gt;::value)&amp;&amp;is_convertible&lt; Executor, AwaitableExecutor &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename ExecutionContext,    typename T,    typename AwaitableExecutor,    typename CompletionToken = DEFAULT&gt;DEDUCED co_spawn(    ExecutionContext &amp; ctx,    awaitable&lt; T, AwaitableExecutor &gt; a,    CompletionToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &amp;&amp;is_convertible&lt; typename ExecutionContext::executor_type, AwaitableExecutor &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename ExecutionContext,    typename AwaitableExecutor,    typename CompletionToken = DEFAULT&gt;DEDUCED co_spawn(    ExecutionContext &amp; ctx,    awaitable&lt; void, AwaitableExecutor &gt; a,    CompletionToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &amp;&amp;is_convertible&lt; typename ExecutionContext::executor_type, AwaitableExecutor &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename Executor,    typename F,    typename CompletionToken = DEFAULT&gt;DEDUCED co_spawn(    const Executor &amp; ex,    F &amp;&amp; f,    CompletionToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_executor&lt; Executor &gt;::value||execution::is_executor&lt; Executor &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename ExecutionContext,    typename F,    typename CompletionToken = DEFAULT&gt;DEDUCED co_spawn(    ExecutionContext &amp; ctx,    F &amp;&amp; f,    CompletionToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);  Â» more...        Requirements              Header: boost/asio/co_spawn.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/co_spawn.html
async_connectasync_connectHomeLibrariesPeopleFAQMoreasync_connect                      The async_connect function        is a composed asynchronous operation that establishes a socket connection        by trying each endpoint in a sequence.              Asynchronously establishes a socket connection by trying each endpoint in        a sequence.      template&lt;    typename Protocol,    typename Executor,    typename EndpointSequence,    typename RangeConnectToken = DEFAULT&gt;DEDUCED async_connect(    basic_socket&lt; Protocol, Executor &gt; &amp; s,    const EndpointSequence &amp; endpoints,    RangeConnectToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_endpoint_sequence&lt; EndpointSequence &gt;::value &gt;::type  = 0);  Â» more...        (Deprecated: Use range overload.) Asynchronously establishes a socket connection        by trying each endpoint in a sequence.      template&lt;    typename Protocol,    typename Executor,    typename Iterator,    typename IteratorConnectToken = DEFAULT&gt;DEDUCED async_connect(    basic_socket&lt; Protocol, Executor &gt; &amp; s,    Iterator begin,    IteratorConnectToken &amp;&amp; token = DEFAULT,    typename constraint&lt;!is_endpoint_sequence&lt; Iterator &gt;::value &gt;::type  = 0);  Â» more...        Asynchronously establishes a socket connection by trying each endpoint in        a sequence.      template&lt;    typename Protocol,    typename Executor,    typename Iterator,    typename IteratorConnectToken = DEFAULT&gt;DEDUCED async_connect(    basic_socket&lt; Protocol, Executor &gt; &amp; s,    Iterator begin,    Iterator end,    IteratorConnectToken &amp;&amp; token = DEFAULT);  Â» more...template&lt;    typename Protocol,    typename Executor,    typename EndpointSequence,    typename ConnectCondition,    typename RangeConnectToken = DEFAULT&gt;DEDUCED async_connect(    basic_socket&lt; Protocol, Executor &gt; &amp; s,    const EndpointSequence &amp; endpoints,    ConnectCondition connect_condition,    RangeConnectToken &amp;&amp; token = DEFAULT,    typename constraint&lt; is_endpoint_sequence&lt; EndpointSequence &gt;::value &gt;::type  = 0);  Â» more...        (Deprecated: Use range overload.) Asynchronously establishes a socket connection        by trying each endpoint in a sequence.      template&lt;    typename Protocol,    typename Executor,    typename Iterator,    typename ConnectCondition,    typename IteratorConnectToken = DEFAULT&gt;DEDUCED async_connect(    basic_socket&lt; Protocol, Executor &gt; &amp; s,    Iterator begin,    ConnectCondition connect_condition,    IteratorConnectToken &amp;&amp; token = DEFAULT,    typename constraint&lt;!is_endpoint_sequence&lt; Iterator &gt;::value &gt;::type  = 0);  Â» more...        Asynchronously establishes a socket connection by trying each endpoint in        a sequence.      template&lt;    typename Protocol,    typename Executor,    typename Iterator,    typename ConnectCondition,    typename IteratorConnectToken = DEFAULT&gt;DEDUCED async_connect(    basic_socket&lt; Protocol, Executor &gt; &amp; s,    Iterator begin,    Iterator end,    ConnectCondition connect_condition,    IteratorConnectToken &amp;&amp; token = DEFAULT);  Â» more...        Requirements              Header: boost/asio/connect.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/async_connect.html
boost::system::is_error_code_enum&lt; boost::asio::error::basic_errors &gt;::valueboost::system::is_error_code_enum&lt; boost::asio::error::basic_errors &gt;::valueHomeLibrariesPeopleFAQMoreboost::system::is_error_code_enum&lt;        boost::asio::error::basic_errors &gt;::value                  static const bool value = true;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/is_error_code_enum_lt__basic_errors__gt_/value.html
Buffer-oriented asynchronous read stream requirementsBuffer-oriented asynchronous read stream requirementsHomeLibrariesPeopleFAQMoreBuffer-oriented      asynchronous read stream requirements        A type X meets the AsyncReadStream requirements if it satisfies        the requirements listed below.              In the table below, a denotes        a value of type X, mb denotes a (possibly const) value satisfying        the MutableBufferSequence requirements,        and t is a completion token.      TableÂ 6.Â AsyncReadStream requirements                                  operation                                                                type                                                                semantics, pre/post-conditions                                                                a.get_executor()                                                                A type satisfying the Executor                  requirements.                                                                Returns the associated I/O executor.                                                                a.async_read_some(mb,t)                                                                The return type is determined according to the requirements for                  an asynchronous                  operation.                                                                Meets the requirements for a read                  operation and an asynchronous                  operation with completion signature void(error_code                  ec,                  size_t n).  If buffer_size(mb)                  &gt; 0,                  initiates an asynchronous operation to read one or more bytes of                  data from the stream a                  into the buffer sequence mb.                  If successful, ec                  is set such that !ec is true,                  and n is the number                  of bytes read. If an error occurred, ec                  is set such that !!ec is true,                  and n is 0. If                  all data has been read from the stream, and the stream performed                  an orderly shutdown, ec                  is stream_errc::eof                  and n is 0.                   If buffer_size(mb) == 0, the operation completes immediately.                  ec is set such                  that !ec                  is true, and n is 0.                              Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/AsyncReadStream.html
posix::descriptor_baseposix::descriptor_baseHomeLibrariesPeopleFAQMoreposix::descriptor_base                      The posix::descriptor_base class is used as        a base for the descriptor class as a place to define the associated IO control        commands.      class descriptor_base        Types                                        Name                                                                Description                                                                bytes_readable                                                                IO control command to get the amount of data that can be read without                  blocking.                                                                wait_type                                                                Wait types.                                      Protected        Member Functions                                        Name                                                                Description                                                                ~descriptor_base [destructor]                                                                Protected destructor to prevent deletion through this type.                                      Requirements              Header: boost/asio/posix/descriptor_base.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/posix__descriptor_base.html
Buffer-oriented asynchronous random-access write device requirementsBuffer-oriented asynchronous random-access write device requirementsHomeLibrariesPeopleFAQMoreBuffer-oriented      asynchronous random-access write device requirements        In the table below, a denotes        an asynchronous write stream object, o        denotes an offset of type boost::uint64_t,        cb denotes an object satisfying        constant buffer        sequence requirements, and h        denotes an object satisfying write        handler requirements.      TableÂ 5.Â Buffer-oriented asynchronous random-access write device requirements                                  operation                                                                type                                                                semantics, pre/post-conditions                                                                a.get_executor()                                                                A type satisfying the Executor                  requirements.                                                                Returns the associated I/O executor.                                                                a.async_write_some_at(o,                  cb,                  h);                                                                void                                                                Initiates an asynchronous operation to write one or more bytes                  of data to the device a                  at offset o. The                  operation is performed via the io_service                  object a.get_io_service()                  and behaves according to asynchronous                  operation requirements.  The constant buffer                  sequence cb specifies                  memory where the data to be written is located. The async_write_some_at operation                  shall always write a buffer in the sequence completely before proceeding                  to the next.  The implementation shall maintain one                  or more copies of cb                  until such time as the write operation no longer requires access                  to the memory specified by the buffers in the sequence. The program                  must ensure the memory is valid until:  â the last copy                  of cb is destroyed,                  or  â the handler for the asynchronous write operation                  is invoked,  whichever comes first.  If                  the total size of all buffers in the sequence cb                  is 0, the asynchronous                  write operation shall complete immediately and pass 0 as the argument to the handler                  that specifies the number of bytes written.                              Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/AsyncRandomAccessWriteDevice.html
executor_argexecutor_argHomeLibrariesPeopleFAQMoreexecutor_arg                      A special value, similar to std::nothrow, used to disambiguate constructors        that accept executor arguments.      constexpr executor_arg_t executor_arg;        See executor_arg_t        and uses_executor        for more information.              Requirements              Header: boost/asio/uses_executor.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/executor_arg.html
Buffer-oriented synchronous random-access read device requirementsBuffer-oriented synchronous random-access read device requirementsHomeLibrariesPeopleFAQMoreBuffer-oriented      synchronous random-access read device requirements        In the table below, a denotes        a synchronous random-access read device object, o        denotes an offset of type boost::uint64_t,        mb denotes an object satisfying        mutable buffer        sequence requirements, and ec        denotes an object of type error_code.      TableÂ 30.Â Buffer-oriented synchronous random-access read device requirements                                  operation                                                                type                                                                semantics, pre/post-conditions                                                                a.read_some_at(o,                  mb);                                                                size_t                                                                Equivalent to:                error_code ec;size_t s = a.read_some_at(o, mb, ec);if (ec) throw system_error(ec);return s;                                                a.read_some_at(o,                  mb,                  ec);                                                                size_t                                                                Reads one or more bytes of data from the device a                  at offset o.                   The mutable buffer sequence mb                  specifies memory where the data should be placed. The read_some_at operation shall                  always fill a buffer in the sequence completely before proceeding                  to the next.  If successful, returns the number of                  bytes read and sets ec                  such that !ec                  is true. If an error occurred, returns 0                  and sets ec such                  that !!ec                  is true.  If the total size of all buffers in the sequence                  mb is 0, the function shall return 0 immediately.                              Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/SyncRandomAccessReadDevice.html
read_untilread_untilHomeLibrariesPeopleFAQMoreread_until                      The read_until function is        a composed operation that reads data into a dynamic buffer sequence, or into        a streambuf, until it contains a delimiter, matches a regular expression,        or a function object indicates a match.              Read data into a dynamic buffer sequence until it contains a specified delimiter.      template&lt;    typename SyncReadStream,    typename DynamicBuffer_v1&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v1 &amp;&amp; buffers,    char delim,    typename constraint&lt; is_dynamic_buffer_v1&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0,    typename constraint&lt; !is_dynamic_buffer_v2&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename SyncReadStream,    typename DynamicBuffer_v1&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v1 &amp;&amp; buffers,    char delim,    boost::system::error_code &amp; ec,    typename constraint&lt; is_dynamic_buffer_v1&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0,    typename constraint&lt; !is_dynamic_buffer_v2&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename SyncReadStream,    typename DynamicBuffer_v1&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v1 &amp;&amp; buffers,    string_view delim,    typename constraint&lt; is_dynamic_buffer_v1&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0,    typename constraint&lt; !is_dynamic_buffer_v2&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename SyncReadStream,    typename DynamicBuffer_v1&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v1 &amp;&amp; buffers,    string_view delim,    boost::system::error_code &amp; ec,    typename constraint&lt; is_dynamic_buffer_v1&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0,    typename constraint&lt; !is_dynamic_buffer_v2&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0);  Â» more...        Read data into a dynamic buffer sequence until some part of the data it contains        matches a regular expression.      template&lt;    typename SyncReadStream,    typename DynamicBuffer_v1&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v1 &amp;&amp; buffers,    const boost::regex &amp; expr,    typename constraint&lt; is_dynamic_buffer_v1&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0,    typename constraint&lt; !is_dynamic_buffer_v2&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename SyncReadStream,    typename DynamicBuffer_v1&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v1 &amp;&amp; buffers,    const boost::regex &amp; expr,    boost::system::error_code &amp; ec,    typename constraint&lt; is_dynamic_buffer_v1&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0,    typename constraint&lt; !is_dynamic_buffer_v2&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0);  Â» more...        Read data into a dynamic buffer sequence until a function object indicates        a match.      template&lt;    typename SyncReadStream,    typename DynamicBuffer_v1,    typename MatchCondition&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v1 &amp;&amp; buffers,    MatchCondition match_condition,    typename constraint&lt; is_match_condition&lt; MatchCondition &gt;::value &gt;::type  = 0,    typename constraint&lt; is_dynamic_buffer_v1&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0,    typename constraint&lt; !is_dynamic_buffer_v2&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename SyncReadStream,    typename DynamicBuffer_v1,    typename MatchCondition&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v1 &amp;&amp; buffers,    MatchCondition match_condition,    boost::system::error_code &amp; ec,    typename constraint&lt; is_match_condition&lt; MatchCondition &gt;::value &gt;::type  = 0,    typename constraint&lt; is_dynamic_buffer_v1&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0,    typename constraint&lt; !is_dynamic_buffer_v2&lt; typename decay&lt; DynamicBuffer_v1 &gt;::type &gt;::value &gt;::type  = 0);  Â» more...        Read data into a streambuf until it contains a specified delimiter.      template&lt;    typename SyncReadStream,    typename Allocator&gt;std::size_t read_until(    SyncReadStream &amp; s,    boost::asio::basic_streambuf&lt; Allocator &gt; &amp; b,    char delim);  Â» more...template&lt;    typename SyncReadStream,    typename Allocator&gt;std::size_t read_until(    SyncReadStream &amp; s,    boost::asio::basic_streambuf&lt; Allocator &gt; &amp; b,    char delim,    boost::system::error_code &amp; ec);  Â» more...template&lt;    typename SyncReadStream,    typename Allocator&gt;std::size_t read_until(    SyncReadStream &amp; s,    boost::asio::basic_streambuf&lt; Allocator &gt; &amp; b,    string_view delim);  Â» more...template&lt;    typename SyncReadStream,    typename Allocator&gt;std::size_t read_until(    SyncReadStream &amp; s,    boost::asio::basic_streambuf&lt; Allocator &gt; &amp; b,    string_view delim,    boost::system::error_code &amp; ec);  Â» more...        Read data into a streambuf until some part of the data it contains matches        a regular expression.      template&lt;    typename SyncReadStream,    typename Allocator&gt;std::size_t read_until(    SyncReadStream &amp; s,    boost::asio::basic_streambuf&lt; Allocator &gt; &amp; b,    const boost::regex &amp; expr);  Â» more...template&lt;    typename SyncReadStream,    typename Allocator&gt;std::size_t read_until(    SyncReadStream &amp; s,    boost::asio::basic_streambuf&lt; Allocator &gt; &amp; b,    const boost::regex &amp; expr,    boost::system::error_code &amp; ec);  Â» more...        Read data into a streambuf until a function object indicates a match.      template&lt;    typename SyncReadStream,    typename Allocator,    typename MatchCondition&gt;std::size_t read_until(    SyncReadStream &amp; s,    boost::asio::basic_streambuf&lt; Allocator &gt; &amp; b,    MatchCondition match_condition,    typename constraint&lt; is_match_condition&lt; MatchCondition &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename SyncReadStream,    typename Allocator,    typename MatchCondition&gt;std::size_t read_until(    SyncReadStream &amp; s,    boost::asio::basic_streambuf&lt; Allocator &gt; &amp; b,    MatchCondition match_condition,    boost::system::error_code &amp; ec,    typename constraint&lt; is_match_condition&lt; MatchCondition &gt;::value &gt;::type  = 0);  Â» more...        Read data into a dynamic buffer sequence until it contains a specified delimiter.      template&lt;    typename SyncReadStream,    typename DynamicBuffer_v2&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v2 buffers,    char delim,    typename constraint&lt; is_dynamic_buffer_v2&lt; DynamicBuffer_v2 &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename SyncReadStream,    typename DynamicBuffer_v2&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v2 buffers,    char delim,    boost::system::error_code &amp; ec,    typename constraint&lt; is_dynamic_buffer_v2&lt; DynamicBuffer_v2 &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename SyncReadStream,    typename DynamicBuffer_v2&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v2 buffers,    string_view delim,    typename constraint&lt; is_dynamic_buffer_v2&lt; DynamicBuffer_v2 &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename SyncReadStream,    typename DynamicBuffer_v2&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v2 buffers,    string_view delim,    boost::system::error_code &amp; ec,    typename constraint&lt; is_dynamic_buffer_v2&lt; DynamicBuffer_v2 &gt;::value &gt;::type  = 0);  Â» more...        Read data into a dynamic buffer sequence until some part of the data it contains        matches a regular expression.      template&lt;    typename SyncReadStream,    typename DynamicBuffer_v2&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v2 buffers,    const boost::regex &amp; expr,    typename constraint&lt; is_dynamic_buffer_v2&lt; DynamicBuffer_v2 &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename SyncReadStream,    typename DynamicBuffer_v2&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v2 buffers,    const boost::regex &amp; expr,    boost::system::error_code &amp; ec,    typename constraint&lt; is_dynamic_buffer_v2&lt; DynamicBuffer_v2 &gt;::value &gt;::type  = 0);  Â» more...        Read data into a dynamic buffer sequence until a function object indicates        a match.      template&lt;    typename SyncReadStream,    typename DynamicBuffer_v2,    typename MatchCondition&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v2 buffers,    MatchCondition match_condition,    typename constraint&lt; is_match_condition&lt; MatchCondition &gt;::value &gt;::type  = 0,    typename constraint&lt; is_dynamic_buffer_v2&lt; DynamicBuffer_v2 &gt;::value &gt;::type  = 0);  Â» more...template&lt;    typename SyncReadStream,    typename DynamicBuffer_v2,    typename MatchCondition&gt;std::size_t read_until(    SyncReadStream &amp; s,    DynamicBuffer_v2 buffers,    MatchCondition match_condition,    boost::system::error_code &amp; ec,    typename constraint&lt; is_match_condition&lt; MatchCondition &gt;::value &gt;::type  = 0,    typename constraint&lt; is_dynamic_buffer_v2&lt; DynamicBuffer_v2 &gt;::value &gt;::type  = 0);  Â» more...        Requirements              Header: boost/asio/read_until.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/read_until.html
service_already_exists::service_already_existsservice_already_exists::service_already_existsHomeLibrariesPeopleFAQMoreservice_already_exists::service_already_exists                  service_already_exists();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/service_already_exists/service_already_exists.html
basic_stream_socket::rebind_executorbasic_stream_socket::rebind_executorHomeLibrariesPeopleFAQMorebasic_stream_socket::rebind_executor                      Rebinds the socket type to another executor.      template&lt;    typename Executor1&gt;struct rebind_executor        Types                                        Name                                                                Description                                                                other                                                                The socket type when rebound to the specified executor.                                      Requirements              Header: boost/asio/basic_stream_socket.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/basic_stream_socket__rebind_executor.html
ip::basic_resolver_resultsip::basic_resolver_resultsHomeLibrariesPeopleFAQMoreip::basic_resolver_results                      A range of entries produced by a resolver.      template&lt;    typename InternetProtocol&gt;class basic_resolver_results :  public ip::basic_resolver_iterator&lt; InternetProtocol &gt;        Types                                        Name                                                                Description                                                                const_iterator                                                                The type of an iterator into the range.                                                                const_reference                                                                The type of a const reference to a value in the range.                                                                difference_type                                                                Type used to represent the distance between two iterators in the                  range.                                                                endpoint_type                                                                The endpoint type associated with the results.                                                                iterator                                                                The type of an iterator into the range.                                                                iterator_category                                                                The iterator category.                                                                pointer                                                                The type of the result of applying operator-&gt;() to the iterator.                                                                protocol_type                                                                The protocol type associated with the results.                                                                reference                                                                The type of a non-const reference to a value in the range.                                                                size_type                                                                Type used to represent a count of the elements in the range.                                                                value_type                                                                The type of a value in the results range.                                      Member        Functions                                        Name                                                                Description                                                                basic_resolver_results [constructor]                                                                Default constructor creates an empty range.   â Copy                  constructor.   â Move constructor.                                                                begin                                                                Obtain a begin iterator for the results range.                                                                cbegin                                                                Obtain a begin iterator for the results range.                                                                cend                                                                Obtain an end iterator for the results range.                                                                empty                                                                Determine whether the results range is empty.                                                                end                                                                Obtain an end iterator for the results range.                                                                max_size                                                                Get the maximum number of entries permitted in a results range.                                                                operator *                                                                Dereference an iterator.                                                                operator++                                                                Increment operator (prefix).   â Increment operator (postfix).                                                                operator-&gt;                                                                Dereference an iterator.                                                                operator=                                                                Assignment operator.   â Move-assignment operator.                                                                size                                                                Get the number of entries in the results range.                                                                swap                                                                Swap the results range with another.                                      Protected        Member Functions                                        Name                                                                Description                                                                dereference                                                                              equal                                                                              increment                                                    Protected        Data Members                                        Name                                                                Description                                                                index_                                                                              values_                                                    Friends                                        Name                                                                Description                                                                operator!=                                                                Test two iterators for inequality.                                                                operator==                                                                Test two iterators for equality.                                      The ip::basic_resolver_results        class template is used to define a range over the results returned by a resolver.              The iterator's value_type, obtained when a results iterator is dereferenced,        is:      const basic_resolver_entry&lt;InternetProtocol&gt;        Remarks              For backward compatibility, ip::basic_resolver_results        is derived from ip::basic_resolver_iterator.        This derivation is deprecated.              Thread        Safety              Distinct objects: Safe.              Shared objects: Unsafe.              Requirements              Header: boost/asio/ip/basic_resolver_results.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/ip__basic_resolver_results.html
ip::bad_address_cast::~bad_address_castip::bad_address_cast::~bad_address_castHomeLibrariesPeopleFAQMoreip::bad_address_cast::~bad_address_cast           Destructor.        virtual ~bad_address_cast();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/ip__bad_address_cast/_bad_address_cast.html
ip::bad_address_cast::whatip::bad_address_cast::whatHomeLibrariesPeopleFAQMoreip::bad_address_cast::what           Get          the message associated with the exception.        virtual const char * what() const;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/ip__bad_address_cast/what.html
ip::bad_address_cast::bad_address_castip::bad_address_cast::bad_address_castHomeLibrariesPeopleFAQMoreip::bad_address_cast::bad_address_cast           Default          constructor.        bad_address_cast();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/ip__bad_address_cast/bad_address_cast.html
error::make_error_code (4 of 5 overloads)error::make_error_code (4 of 5 overloads)HomeLibrariesPeopleFAQMoreerror::make_error_code        (4 of 5 overloads)boost::system::error_code make_error_code(    misc_errors e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/error__make_error_code/overload4.html
error::make_error_code (2 of 5 overloads)error::make_error_code (2 of 5 overloads)HomeLibrariesPeopleFAQMoreerror::make_error_code        (2 of 5 overloads)boost::system::error_code make_error_code(    netdb_errors e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/error__make_error_code/overload2.html
error::make_error_code (3 of 5 overloads)error::make_error_code (3 of 5 overloads)HomeLibrariesPeopleFAQMoreerror::make_error_code        (3 of 5 overloads)boost::system::error_code make_error_code(    addrinfo_errors e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/error__make_error_code/overload3.html
error::make_error_code (1 of 5 overloads)error::make_error_code (1 of 5 overloads)HomeLibrariesPeopleFAQMoreerror::make_error_code        (1 of 5 overloads)boost::system::error_code make_error_code(    basic_errors e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/error__make_error_code/overload1.html
error::make_error_code (5 of 5 overloads)error::make_error_code (5 of 5 overloads)HomeLibrariesPeopleFAQMoreerror::make_error_code        (5 of 5 overloads)boost::system::error_code make_error_code(    ssl_errors e);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/error__make_error_code/overload5.html
as_tupleas_tupleHomeLibrariesPeopleFAQMoreas_tuple                      Adapt a completion        token to specify that the completion handler arguments should be combined        into a single tuple argument.      template&lt;    typename CompletionToken&gt;constexpr as_tuple_t&lt; typename decay&lt; CompletionToken &gt;::type &gt; as_tuple(    CompletionToken &amp;&amp; completion_token);        Requirements              Header: boost/asio/as_tuple.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/as_tuple.html
cancellation_slot_binder::operator() (2 of 2 overloads)cancellation_slot_binder::operator() (2 of 2 overloads)HomeLibrariesPeopleFAQMorecancellation_slot_binder::operator()          (2 of 2 overloads)template&lt;    typename... Args&gt;auto operator()(    Args &amp;&amp; ...) const;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/operator_lp__rp_/overload2.html
cancellation_slot_binder::operator() (1 of 2 overloads)cancellation_slot_binder::operator() (1 of 2 overloads)HomeLibrariesPeopleFAQMorecancellation_slot_binder::operator()          (1 of 2 overloads)template&lt;    typename... Args&gt;auto operator()(    Args &amp;&amp; ...);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/operator_lp__rp_/overload1.html
cancellation_slot_binder::get_cancellation_slotcancellation_slot_binder::get_cancellation_slotHomeLibrariesPeopleFAQMorecancellation_slot_binder::get_cancellation_slot           Obtain          the associated cancellation slot.        cancellation_slot_type get_cancellation_slot() const;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/get_cancellation_slot.html
cancellation_slot_binder::cancellation_slot_binder (4 of 9 overloads)cancellation_slot_binder::cancellation_slot_binder (4 of 9 overloads)HomeLibrariesPeopleFAQMorecancellation_slot_binder::cancellation_slot_binder          (4 of 9 overloads)            Construct a copy of a different cancellation slot wrapper type.          template&lt;    typename U,    typename OtherCancellationSlot&gt;cancellation_slot_binder(    const cancellation_slot_binder&lt; U, OtherCancellationSlot &gt; &amp; other);            This constructor is only valid if the CancellationSlot            type is constructible from type OtherCancellationSlot,            and the type T is constructible            from type U.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/cancellation_slot_binder/overload4.html
cancellation_slot_binder::cancellation_slot_binder (7 of 9 overloads)cancellation_slot_binder::cancellation_slot_binder (7 of 9 overloads)HomeLibrariesPeopleFAQMorecancellation_slot_binder::cancellation_slot_binder          (7 of 9 overloads)            Move construct the target object, but specify a different cancellation            slot.          cancellation_slot_binder(    const cancellation_slot_type &amp; s,    cancellation_slot_binder &amp;&amp; other);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/cancellation_slot_binder/overload7.html
cancellation_slot_binder::cancellation_slot_binder (2 of 9 overloads)cancellation_slot_binder::cancellation_slot_binder (2 of 9 overloads)HomeLibrariesPeopleFAQMorecancellation_slot_binder::cancellation_slot_binder          (2 of 9 overloads)            Copy constructor.          cancellation_slot_binder(    const cancellation_slot_binder &amp; other);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/cancellation_slot_binder/overload2.html
cancellation_slot_binder::cancellation_slot_binder (3 of 9 overloads)cancellation_slot_binder::cancellation_slot_binder (3 of 9 overloads)HomeLibrariesPeopleFAQMorecancellation_slot_binder::cancellation_slot_binder          (3 of 9 overloads)            Construct a copy, but specify a different cancellation slot.          cancellation_slot_binder(    const cancellation_slot_type &amp; s,    const cancellation_slot_binder &amp; other);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/cancellation_slot_binder/overload3.html
cancellation_slot_binder::cancellation_slot_binder (8 of 9 overloads)cancellation_slot_binder::cancellation_slot_binder (8 of 9 overloads)HomeLibrariesPeopleFAQMorecancellation_slot_binder::cancellation_slot_binder          (8 of 9 overloads)            Move construct from a different cancellation slot wrapper type.          template&lt;    typename U,    typename OtherCancellationSlot&gt;cancellation_slot_binder(    cancellation_slot_binder&lt; U, OtherCancellationSlot &gt; &amp;&amp; other);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/cancellation_slot_binder/overload8.html
cancellation_slot_binder::cancellation_slot_binder (6 of 9 overloads)cancellation_slot_binder::cancellation_slot_binder (6 of 9 overloads)HomeLibrariesPeopleFAQMorecancellation_slot_binder::cancellation_slot_binder          (6 of 9 overloads)            Move constructor.          cancellation_slot_binder(    cancellation_slot_binder &amp;&amp; other);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/cancellation_slot_binder/overload6.html
cancellation_slot_binder::cancellation_slot_binder (9 of 9 overloads)cancellation_slot_binder::cancellation_slot_binder (9 of 9 overloads)HomeLibrariesPeopleFAQMorecancellation_slot_binder::cancellation_slot_binder          (9 of 9 overloads)            Move construct from a different cancellation slot wrapper type, but specify            a different cancellation slot.          template&lt;    typename U,    typename OtherCancellationSlot&gt;cancellation_slot_binder(    const cancellation_slot_type &amp; s,    cancellation_slot_binder&lt; U, OtherCancellationSlot &gt; &amp;&amp; other);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/cancellation_slot_binder/overload9.html
cancellation_slot_binder::cancellation_slot_binder (1 of 9 overloads)cancellation_slot_binder::cancellation_slot_binder (1 of 9 overloads)HomeLibrariesPeopleFAQMorecancellation_slot_binder::cancellation_slot_binder          (1 of 9 overloads)            Construct a cancellation slot wrapper for the specified object.          template&lt;    typename U&gt;cancellation_slot_binder(    const cancellation_slot_type &amp; s,    U &amp;&amp; u);            This constructor is only valid if the type T            is constructible from type U.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/cancellation_slot_binder/overload1.html
cancellation_slot_binder::cancellation_slot_binder (5 of 9 overloads)cancellation_slot_binder::cancellation_slot_binder (5 of 9 overloads)HomeLibrariesPeopleFAQMorecancellation_slot_binder::cancellation_slot_binder          (5 of 9 overloads)            Construct a copy of a different cancellation slot wrapper type, but specify            a different cancellation slot.          template&lt;    typename U,    typename OtherCancellationSlot&gt;cancellation_slot_binder(    const cancellation_slot_type &amp; s,    const cancellation_slot_binder&lt; U, OtherCancellationSlot &gt; &amp; other);            This constructor is only valid if the type T            is constructible from type U.          Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/cancellation_slot_binder/overload5.html
cancellation_slot_binder::getcancellation_slot_binder::getHomeLibrariesPeopleFAQMorecancellation_slot_binder::get           Obtain          a reference to the target object.        target_type &amp; get();  Â» more...const target_type &amp; get() const;  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/get.html
cancellation_slot_binder::~cancellation_slot_bindercancellation_slot_binder::~cancellation_slot_binderHomeLibrariesPeopleFAQMorecancellation_slot_binder::~cancellation_slot_binder           Destructor.        ~cancellation_slot_binder();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/_cancellation_slot_binder.html
cancellation_slot_binder::get (2 of 2 overloads)cancellation_slot_binder::get (2 of 2 overloads)HomeLibrariesPeopleFAQMorecancellation_slot_binder::get          (2 of 2 overloads)            Obtain a reference to the target object.          const target_type &amp; get() const;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/get/overload2.html
cancellation_slot_binder::get (1 of 2 overloads)cancellation_slot_binder::get (1 of 2 overloads)HomeLibrariesPeopleFAQMorecancellation_slot_binder::get          (1 of 2 overloads)            Obtain a reference to the target object.          target_type &amp; get();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/get/overload1.html
cancellation_slot_binder::second_argument_typecancellation_slot_binder::second_argument_typeHomeLibrariesPeopleFAQMorecancellation_slot_binder::second_argument_type           The          type of the function's second argument.        typedef see_below second_argument_type;          The type of second_argument_type          is based on the type T          of the wrapper's target object:                      if T is a pointer to              a function type accepting two arguments, second_argument_type              is a synonym for the return type of T;                          if T is a class type              with a member type first_argument_type,              then second_argument_type              is a synonym for T::second_argument_type;                          otherwise second_argument_type              is not defined.                      Requirements                  Header: boost/asio/bind_cancellation_slot.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/second_argument_type.html
cancellation_slot_binder::target_typecancellation_slot_binder::target_typeHomeLibrariesPeopleFAQMorecancellation_slot_binder::target_type           The          type of the target object.        typedef T target_type;          Requirements                  Header: boost/asio/bind_cancellation_slot.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/target_type.html
cancellation_slot_binder::argument_typecancellation_slot_binder::argument_typeHomeLibrariesPeopleFAQMorecancellation_slot_binder::argument_type           The          type of the function's argument.        typedef see_below argument_type;          The type of argument_type          is based on the type T          of the wrapper's target object:                      if T is a pointer to              a function type accepting a single argument, argument_type              is a synonym for the return type of T;                          if T is a class type              with a member type argument_type,              then argument_type              is a synonym for T::argument_type;                          otherwise argument_type              is not defined.                      Requirements                  Header: boost/asio/bind_cancellation_slot.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/argument_type.html
cancellation_slot_binder::cancellation_slot_bindercancellation_slot_binder::cancellation_slot_binderHomeLibrariesPeopleFAQMorecancellation_slot_binder::cancellation_slot_binder           Construct          a cancellation slot wrapper for the specified object.        template&lt;    typename U&gt;cancellation_slot_binder(    const cancellation_slot_type &amp; s,    U &amp;&amp; u);  Â» more...          Copy constructor.        cancellation_slot_binder(    const cancellation_slot_binder &amp; other);  Â» more...          Construct a copy, but specify a different cancellation slot.        cancellation_slot_binder(    const cancellation_slot_type &amp; s,    const cancellation_slot_binder &amp; other);  Â» more...          Construct a copy of a different cancellation slot wrapper type.        template&lt;    typename U,    typename OtherCancellationSlot&gt;cancellation_slot_binder(    const cancellation_slot_binder&lt; U, OtherCancellationSlot &gt; &amp; other);  Â» more...          Construct a copy of a different cancellation slot wrapper type, but specify          a different cancellation slot.        template&lt;    typename U,    typename OtherCancellationSlot&gt;cancellation_slot_binder(    const cancellation_slot_type &amp; s,    const cancellation_slot_binder&lt; U, OtherCancellationSlot &gt; &amp; other);  Â» more...          Move constructor.        cancellation_slot_binder(    cancellation_slot_binder &amp;&amp; other);  Â» more...          Move construct the target object, but specify a different cancellation          slot.        cancellation_slot_binder(    const cancellation_slot_type &amp; s,    cancellation_slot_binder &amp;&amp; other);  Â» more...          Move construct from a different cancellation slot wrapper type.        template&lt;    typename U,    typename OtherCancellationSlot&gt;cancellation_slot_binder(    cancellation_slot_binder&lt; U, OtherCancellationSlot &gt; &amp;&amp; other);  Â» more...          Move construct from a different cancellation slot wrapper type, but specify          a different cancellation slot.        template&lt;    typename U,    typename OtherCancellationSlot&gt;cancellation_slot_binder(    const cancellation_slot_type &amp; s,    cancellation_slot_binder&lt; U, OtherCancellationSlot &gt; &amp;&amp; other);  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/cancellation_slot_binder.html
cancellation_slot_binder::first_argument_typecancellation_slot_binder::first_argument_typeHomeLibrariesPeopleFAQMorecancellation_slot_binder::first_argument_type           The          type of the function's first argument.        typedef see_below first_argument_type;          The type of first_argument_type          is based on the type T          of the wrapper's target object:                      if T is a pointer to              a function type accepting two arguments, first_argument_type              is a synonym for the return type of T;                          if T is a class type              with a member type first_argument_type,              then first_argument_type              is a synonym for T::first_argument_type;                          otherwise first_argument_type              is not defined.                      Requirements                  Header: boost/asio/bind_cancellation_slot.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/first_argument_type.html
cancellation_slot_binder::result_typecancellation_slot_binder::result_typeHomeLibrariesPeopleFAQMorecancellation_slot_binder::result_type           The          return type if a function.        typedef see_below result_type;          The type of result_type          is based on the type T          of the wrapper's target object:                      if T is a pointer to              function type, result_type              is a synonym for the return type of T;                          if T is a class type              with a member type result_type,              then result_type is              a synonym for T::result_type;                          otherwise result_type              is not defined.                      Requirements                  Header: boost/asio/bind_cancellation_slot.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/result_type.html
cancellation_slot_binder::operator()cancellation_slot_binder::operator()HomeLibrariesPeopleFAQMorecancellation_slot_binder::operator()                  template&lt;    typename... Args&gt;auto operator()(    Args &amp;&amp; ...);  Â» more...template&lt;    typename... Args&gt;auto operator()(    Args &amp;&amp; ...) const;  Â» more...Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/operator_lp__rp_.html
cancellation_slot_binder::cancellation_slot_typecancellation_slot_binder::cancellation_slot_typeHomeLibrariesPeopleFAQMorecancellation_slot_binder::cancellation_slot_type           The          type of the associated cancellation slot.        typedef CancellationSlot cancellation_slot_type;          Requirements                  Header: boost/asio/bind_cancellation_slot.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/cancellation_slot_binder/cancellation_slot_type.html
is_endpoint_sequence::valueis_endpoint_sequence::valueHomeLibrariesPeopleFAQMoreis_endpoint_sequence::value           The          value member is true if the type may be used as an endpoint sequence.        static const bool value;Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/is_endpoint_sequence/value.html
bind_executor (2 of 2 overloads)bind_executor (2 of 2 overloads)HomeLibrariesPeopleFAQMorebind_executor        (2 of 2 overloads)          Associate an object of type T          with an execution context's executor.        template&lt;    typename ExecutionContext,    typename T&gt;executor_binder&lt; typename decay&lt; T &gt;::type, typename ExecutionContext::executor_type &gt; bind_executor(    ExecutionContext &amp; ctx,    T &amp;&amp; t,    typename constraint&lt; is_convertible&lt; ExecutionContext &amp;, execution_context &amp; &gt;::value &gt;::type  = 0);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/bind_executor/overload2.html
bind_executor (1 of 2 overloads)bind_executor (1 of 2 overloads)HomeLibrariesPeopleFAQMorebind_executor        (1 of 2 overloads)          Associate an object of type T          with an executor of type Executor.        template&lt;    typename Executor,    typename T&gt;executor_binder&lt; typename decay&lt; T &gt;::type, Executor &gt; bind_executor(    const Executor &amp; ex,    T &amp;&amp; t,    typename constraint&lt; is_executor&lt; Executor &gt;::value||execution::is_executor&lt; Executor &gt;::value &gt;::type  = 0);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/bind_executor/overload1.html
buffer_sizebuffer_sizeHomeLibrariesPeopleFAQMorebuffer_size                      Get the total number of bytes in a buffer sequence.      template&lt;    typename BufferSequence&gt;std::size_t buffer_size(    const BufferSequence &amp; b);        The buffer_size function        determines the total size of all buffers in the buffer sequence, as if computed        as follows:      size_t total_size = 0;auto i = boost::asio::buffer_sequence_begin(buffers);auto end = boost::asio::buffer_sequence_end(buffers);for (; i != end; ++i){  const_buffer b(*i);  total_size += b.size();}return total_size;        The BufferSequence template        parameter may meet either of the ConstBufferSequence        or MutableBufferSequence        type requirements.              Requirements              Header: boost/asio/buffer.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/buffer_size.html
dynamic_buffer (4 of 4 overloads)dynamic_buffer (4 of 4 overloads)HomeLibrariesPeopleFAQMoredynamic_buffer        (4 of 4 overloads)          Create a new dynamic buffer that represents the given vector.        template&lt;    typename Elem,    typename Allocator&gt;dynamic_vector_buffer&lt; Elem, Allocator &gt; dynamic_buffer(    std::vector&lt; Elem, Allocator &gt; &amp; data,    std::size_t max_size);          Return          Value                  dynamic_vector_buffer&lt;Elem, Allocator&gt;(data, max_size).        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/dynamic_buffer/overload4.html
dynamic_buffer (2 of 4 overloads)dynamic_buffer (2 of 4 overloads)HomeLibrariesPeopleFAQMoredynamic_buffer        (2 of 4 overloads)          Create a new dynamic buffer that represents the given string.        template&lt;    typename Elem,    typename Traits,    typename Allocator&gt;dynamic_string_buffer&lt; Elem, Traits, Allocator &gt; dynamic_buffer(    std::basic_string&lt; Elem, Traits, Allocator &gt; &amp; data,    std::size_t max_size);          Return          Value                  dynamic_string_buffer&lt;Elem, Traits, Allocator&gt;(data, max_size).        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/dynamic_buffer/overload2.html
dynamic_buffer (3 of 4 overloads)dynamic_buffer (3 of 4 overloads)HomeLibrariesPeopleFAQMoredynamic_buffer        (3 of 4 overloads)          Create a new dynamic buffer that represents the given vector.        template&lt;    typename Elem,    typename Allocator&gt;dynamic_vector_buffer&lt; Elem, Allocator &gt; dynamic_buffer(    std::vector&lt; Elem, Allocator &gt; &amp; data);          Return          Value                  dynamic_vector_buffer&lt;Elem, Allocator&gt;(data).        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/dynamic_buffer/overload3.html
dynamic_buffer (1 of 4 overloads)dynamic_buffer (1 of 4 overloads)HomeLibrariesPeopleFAQMoredynamic_buffer        (1 of 4 overloads)          Create a new dynamic buffer that represents the given string.        template&lt;    typename Elem,    typename Traits,    typename Allocator&gt;dynamic_string_buffer&lt; Elem, Traits, Allocator &gt; dynamic_buffer(    std::basic_string&lt; Elem, Traits, Allocator &gt; &amp; data);          Return          Value                  dynamic_string_buffer&lt;Elem, Traits, Allocator&gt;(data).        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/dynamic_buffer/overload1.html
local::connect_pair (2 of 2 overloads)local::connect_pair (2 of 2 overloads)HomeLibrariesPeopleFAQMorelocal::connect_pair        (2 of 2 overloads)          Create a pair of connected sockets.        template&lt;    typename Protocol,    typename Executor1,    typename Executor2&gt;void connect_pair(    basic_socket&lt; Protocol, Executor1 &gt; &amp; socket1,    basic_socket&lt; Protocol, Executor2 &gt; &amp; socket2,    boost::system::error_code &amp; ec);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/local__connect_pair/overload2.html
local::connect_pair (1 of 2 overloads)local::connect_pair (1 of 2 overloads)HomeLibrariesPeopleFAQMorelocal::connect_pair        (1 of 2 overloads)          Create a pair of connected sockets.        template&lt;    typename Protocol,    typename Executor1,    typename Executor2&gt;void connect_pair(    basic_socket&lt; Protocol, Executor1 &gt; &amp; socket1,    basic_socket&lt; Protocol, Executor2 &gt; &amp; socket2);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/local__connect_pair/overload1.html
experimental::parallel_groupexperimental::parallel_groupHomeLibrariesPeopleFAQMoreexperimental::parallel_group                      A group of asynchronous operations that may be launched in parallel.      template&lt;    typename... Ops&gt;class parallel_group        Types                                        Name                                                                Description                                                                signature                                                                The completion signature for the group of operations.                                      Member        Functions                                        Name                                                                Description                                                                async_wait                                                                Initiate an asynchronous wait for the group of operations.                                                                parallel_group [constructor]                                                                Constructor.                                      See the documentation for experimental::make_parallel_group for a usage        example.              Requirements              Header: boost/asio/experimental/parallel_group.hpp              Convenience header: None      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/experimental__parallel_group.html
generic::datagram_protocolgeneric::datagram_protocolHomeLibrariesPeopleFAQMoregeneric::datagram_protocol                      Encapsulates the flags needed for a generic datagram-oriented socket.      class datagram_protocol        Types                                        Name                                                                Description                                                                endpoint                                                                The type of an endpoint.                                                                socket                                                                The generic socket type.                                      Member        Functions                                        Name                                                                Description                                                                datagram_protocol [constructor]                                                                Construct a protocol object for a specific address family and protocol.                    â Construct a generic protocol object from a specific                  protocol.                                                                family                                                                Obtain an identifier for the protocol family.                                                                protocol                                                                Obtain an identifier for the protocol.                                                                type                                                                Obtain an identifier for the type of the protocol.                                      Friends                                        Name                                                                Description                                                                operator!=                                                                Compare two protocols for inequality.                                                                operator==                                                                Compare two protocols for equality.                                      The generic::datagram_protocol class contains        flags necessary for datagram-oriented sockets of any address family and protocol.              Examples              Constructing using a native address family and socket protocol:      datagram_protocol p(AF_INET, IPPROTO_UDP);        Constructing from a specific protocol type:      datagram_protocol p(boost::asio::ip::udp::v4());        Thread        Safety              Distinct objects: Safe.              Shared objects: Safe.              Requirements              Header: boost/asio/generic/datagram_protocol.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/generic__datagram_protocol.html
ip::port_typeip::port_typeHomeLibrariesPeopleFAQMoreip::port_type                      Type used for storing port numbers.      typedef uint_least16_t port_type;        Requirements              Header: boost/asio/ip/basic_endpoint.hpp              Convenience header: boost/asio.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/ip__port_type.html
error::ssl_errorserror::ssl_errorsHomeLibrariesPeopleFAQMoreerror::ssl_errors              enum ssl_errors        Requirements              Header: boost/asio/ssl/error.hpp              Convenience header: boost/asio/ssl.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/error__ssl_errors.html
async_result&lt; std::packaged_task&lt; Result(Args...)&gt;, Signature &gt;::getasync_result&lt; std::packaged_task&lt; Result(Args...)&gt;, Signature &gt;::getHomeLibrariesPeopleFAQMoreasync_result&lt;        std::packaged_task&lt; Result(Args...)&gt;, Signature &gt;::get           Returns the packaged          task's future.        return_type get();Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/async_result_lt__std__packaged_task_lt__Result_lp_Args_ellipsis__rp__gt__comma__Signature__gt_/get.html
async_result&lt; std::packaged_task&lt; Result(Args...)&gt;, Signature &gt;::return_typeasync_result&lt; std::packaged_task&lt; Result(Args...)&gt;, Signature &gt;::return_typeHomeLibrariesPeopleFAQMoreasync_result&lt;        std::packaged_task&lt; Result(Args...)&gt;, Signature &gt;::return_type           The return type          of the initiating function is the future obtained from the packaged task.        typedef std::future&lt; Result &gt; return_type;          Requirements                  Header: boost/asio/packaged_task.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/async_result_lt__std__packaged_task_lt__Result_lp_Args_ellipsis__rp__gt__comma__Signature__gt_/return_type.html
async_result&lt; std::packaged_task&lt; Result(Args...)&gt;, Signature &gt;::async_resultasync_result&lt; std::packaged_task&lt; Result(Args...)&gt;, Signature &gt;::async_resultHomeLibrariesPeopleFAQMoreasync_result&lt;        std::packaged_task&lt; Result(Args...)&gt;, Signature &gt;::async_result           The constructor          extracts the future from the packaged task.        async_result(    completion_handler_type &amp; h);Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/async_result_lt__std__packaged_task_lt__Result_lp_Args_ellipsis__rp__gt__comma__Signature__gt_/async_result.html
async_result&lt; std::packaged_task&lt; Result(Args...)&gt;, Signature &gt;::completion_handler_typeasync_result&lt; std::packaged_task&lt; Result(Args...)&gt;, Signature &gt;::completion_handler_typeHomeLibrariesPeopleFAQMoreasync_result&lt;        std::packaged_task&lt; Result(Args...)&gt;, Signature &gt;::completion_handler_type           The packaged          task is the concrete completion handler type.        typedef std::packaged_task&lt; Result(Args...)&gt; completion_handler_type;          Requirements                  Header: boost/asio/packaged_task.hpp                  Convenience header: boost/asio.hpp        Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/async_result_lt__std__packaged_task_lt__Result_lp_Args_ellipsis__rp__gt__comma__Signature__gt_/completion_handler_type.html
execution::can_submitexecution::can_submitHomeLibrariesPeopleFAQMoreexecution::can_submit                      A type trait that determines whether a submit        expression is well-formed.      template&lt;    typename S,    typename R&gt;struct can_submit        Class template can_submit        is a trait that is derived from true_type        if the expression execution::submit(std::declval&lt;R&gt;(), std::declval&lt;E&gt;())        is well formed; otherwise false_type.              Requirements              Header: boost/asio/execution/submit.hpp              Convenience header: boost/asio/execution.hpp      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/execution__can_submit.html
experimental::error::make_error_codeexperimental::error::make_error_codeHomeLibrariesPeopleFAQMoreexperimental::error::make_error_code              boost::system::error_code make_error_code(    channel_errors e);        Requirements              Header: boost/asio/experimental/channel_error.hpp              Convenience header: None      Copyright Â© 2003-2022 Christopher M. Kohlhoff        Distributed under the Boost Software License, Version 1.0. (See accompanying        file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)      https://www.boost.org/doc/libs/1_81_0/doc/html/boost_asio/reference/experimental__error__make_error_code.html
execution::outstanding_work_t::tracked_texecution::outstanding_work_t::tracked_tHomeLibrariesPeopleFAQMoreexecution::outstanding_work_t::tracked_t                      A sub-property that indicates that the executor represents likely future        submission of a function object.      struct tracked_t        Types                                        Name                                                                Description                                                                polymorphic_query_result_type                                                                The type returned by queries against an any_executor.                                      Member        Functions                                        Name                                                                Description                                                                tracked_t [constructor]                                                                Default constructor.                                                                value [static]                                                                Get the value associated with a property object.                                      Data        Members             